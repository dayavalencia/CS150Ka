Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression SEMICOLON ka
Rule 2     ka -> assign SEMICOLON ka
Rule 3     ka -> print SEMICOLON ka
Rule 4     ka -> input SEMICOLON ka
Rule 5     ka -> if_statement ka
Rule 6     ka -> if_else_statement ka
Rule 7     ka -> while_statement ka
Rule 8     ka -> for_statement ka
Rule 9     ka -> function_statement ka
Rule 10    ka -> comment ka
Rule 11    ka -> empty
Rule 12    legal -> expression SEMICOLON legal
Rule 13    legal -> assign SEMICOLON legal
Rule 14    legal -> print SEMICOLON legal
Rule 15    legal -> input SEMICOLON legal
Rule 16    legal -> return SEMICOLON legal
Rule 17    legal -> if_statement legal
Rule 18    legal -> if_else_statement legal
Rule 19    legal -> while_statement legal
Rule 20    legal -> for_statement legal
Rule 21    legal -> empty
Rule 22    comment -> COMMENT
Rule 23    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 24    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 25    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 26    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 27    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 28    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 29    assign -> INTTYPE IDENTIFIER
Rule 30    assign -> FLOATTYPE IDENTIFIER
Rule 31    assign -> CHARTYPE IDENTIFIER
Rule 32    assign -> STRINGTYPE IDENTIFIER
Rule 33    print -> PRINT LPAREN expression RPAREN
Rule 34    input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN
Rule 35    return -> RETURN expression
Rule 36    return -> RETURN IDENTIFIER
Rule 37    expression -> expression ADD expression
Rule 38    expression -> expression SUBTRACT expression
Rule 39    expression -> expression MULTIPLY expression
Rule 40    expression -> expression DIVIDE expression
Rule 41    expression -> expression EXP expression
Rule 42    expression -> LPAREN expression RPAREN
Rule 43    expression -> expression EQUALCOMP expression
Rule 44    expression -> expression GREATER_THAN_EQUAL expression
Rule 45    expression -> expression LESS_THAN_EQUAL expression
Rule 46    expression -> expression GREATER_THAN expression
Rule 47    expression -> expression LESS_THAN expression
Rule 48    expression -> expression NOTEQUAL expression
Rule 49    expression -> NOT expression
Rule 50    expression -> expression AND expression
Rule 51    expression -> expression OR expression
Rule 52    expression -> INT
Rule 53    expression -> FLOAT
Rule 54    expression -> CONTINUE
Rule 55    expression -> BREAK
Rule 56    if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE
Rule 57    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
Rule 58    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
Rule 59    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
Rule 60    while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE
Rule 61    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
Rule 62    type_identifier -> INTTYPE IDENTIFIER
Rule 63    type_identifier -> CHARTYPE IDENTIFIER
Rule 64    type_identifier -> FLOATTYPE IDENTIFIER
Rule 65    type_identifier -> STRINGTYPE IDENTIFIER
Rule 66    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 67    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 68    function_input -> type_identifier COMMA function_input
Rule 69    function_input -> type_identifier
Rule 70    function_input -> empty
Rule 71    expression -> IDENTIFIER
Rule 72    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 37
AND                  : 50
BREAK                : 55
CHAR                 : 26
CHARTYPE             : 26 31 63
COMMA                : 68
COMMENT              : 22
CONTINUE             : 54
DIVIDE               : 40
ELSE                 : 57 58 59
EQUAL                : 23 24 25 26 27 28 34
EQUALCOMP            : 43
EXP                  : 41
FLOAT                : 27 53
FLOATTYPE            : 25 27 30 64
FOR                  : 61
GREATER_THAN         : 46
GREATER_THAN_EQUAL   : 44
IDENTIFIER           : 23 24 25 26 27 28 29 30 31 32 34 36 62 63 64 65 67 71
IF                   : 56 57 58 59
INPUT                : 34
INT                  : 23 52
INTTYPE              : 23 24 29 62
LBRACE               : 56 57 57 58 59 60 61 66 67
LESS_THAN            : 47
LESS_THAN_EQUAL      : 45
LPAREN               : 33 34 42 56 57 58 59 60 61 66 67
MULTIPLY             : 39
NOT                  : 49
NOTEQUAL             : 48
OR                   : 51
PRINT                : 33
RBRACE               : 56 57 57 58 59 60 61 66 67
RETURN               : 35 36
RPAREN               : 33 34 42 56 57 58 59 60 61 66 67
SEMICOLON            : 1 2 3 4 12 13 14 15 16 61 61
STRING               : 28
STRINGTYPE           : 28 32 65
SUBTRACT             : 38
VOID                 : 67
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

assign               : 2 13 61 61
comment              : 10
empty                : 11 21 70
expression           : 1 12 24 25 33 35 37 37 38 38 39 39 40 40 41 41 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 50 51 51 56 57 58 59 60 61
for_statement        : 8 20
function_input       : 66 67 68
function_statement   : 9
if_else_statement    : 6 18 58
if_statement         : 5 17 59
input                : 4 15
ka                   : 1 2 3 4 5 6 7 8 9 10 0
legal                : 12 13 14 15 16 17 18 19 20 56 57 57 58 59 60 61 66 67
print                : 3 14
return               : 16
type_identifier      : 66 68 69
while_statement      : 7 19

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . SEMICOLON ka
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       shift and go to state 31
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 3

    (2) ka -> assign . SEMICOLON ka

    SEMICOLON       shift and go to state 45


state 4

    (3) ka -> print . SEMICOLON ka

    SEMICOLON       shift and go to state 46


state 5

    (4) ka -> input . SEMICOLON ka

    SEMICOLON       shift and go to state 47


state 6

    (5) ka -> if_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    if_statement                   shift and go to state 6
    ka                             shift and go to state 48
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 7

    (6) ka -> if_else_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    if_else_statement              shift and go to state 7
    ka                             shift and go to state 49
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 8

    (7) ka -> while_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    while_statement                shift and go to state 8
    ka                             shift and go to state 50
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 9

    (8) ka -> for_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    for_statement                  shift and go to state 9
    ka                             shift and go to state 51
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 10

    (9) ka -> function_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    function_statement             shift and go to state 10
    ka                             shift and go to state 52
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 11

    (10) ka -> comment . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    comment                        shift and go to state 11
    ka                             shift and go to state 53
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 12

    (11) ka -> empty .

    $end            reduce using rule 11 (ka -> empty .)


state 13

    (42) expression -> LPAREN . expression RPAREN
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 54

state 14

    (49) expression -> NOT . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 56

state 15

    (52) expression -> INT .

    SEMICOLON       reduce using rule 52 (expression -> INT .)
    ADD             reduce using rule 52 (expression -> INT .)
    SUBTRACT        reduce using rule 52 (expression -> INT .)
    MULTIPLY        reduce using rule 52 (expression -> INT .)
    DIVIDE          reduce using rule 52 (expression -> INT .)
    EXP             reduce using rule 52 (expression -> INT .)
    EQUALCOMP       reduce using rule 52 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 52 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 52 (expression -> INT .)
    GREATER_THAN    reduce using rule 52 (expression -> INT .)
    LESS_THAN       reduce using rule 52 (expression -> INT .)
    NOTEQUAL        reduce using rule 52 (expression -> INT .)
    AND             reduce using rule 52 (expression -> INT .)
    OR              reduce using rule 52 (expression -> INT .)
    RPAREN          reduce using rule 52 (expression -> INT .)


state 16

    (53) expression -> FLOAT .

    SEMICOLON       reduce using rule 53 (expression -> FLOAT .)
    ADD             reduce using rule 53 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 53 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 53 (expression -> FLOAT .)
    DIVIDE          reduce using rule 53 (expression -> FLOAT .)
    EXP             reduce using rule 53 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 53 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 53 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 53 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 53 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 53 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 53 (expression -> FLOAT .)
    AND             reduce using rule 53 (expression -> FLOAT .)
    OR              reduce using rule 53 (expression -> FLOAT .)
    RPAREN          reduce using rule 53 (expression -> FLOAT .)


state 17

    (54) expression -> CONTINUE .

    SEMICOLON       reduce using rule 54 (expression -> CONTINUE .)
    ADD             reduce using rule 54 (expression -> CONTINUE .)
    SUBTRACT        reduce using rule 54 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 54 (expression -> CONTINUE .)
    DIVIDE          reduce using rule 54 (expression -> CONTINUE .)
    EXP             reduce using rule 54 (expression -> CONTINUE .)
    EQUALCOMP       reduce using rule 54 (expression -> CONTINUE .)
    GREATER_THAN_EQUAL reduce using rule 54 (expression -> CONTINUE .)
    LESS_THAN_EQUAL reduce using rule 54 (expression -> CONTINUE .)
    GREATER_THAN    reduce using rule 54 (expression -> CONTINUE .)
    LESS_THAN       reduce using rule 54 (expression -> CONTINUE .)
    NOTEQUAL        reduce using rule 54 (expression -> CONTINUE .)
    AND             reduce using rule 54 (expression -> CONTINUE .)
    OR              reduce using rule 54 (expression -> CONTINUE .)
    RPAREN          reduce using rule 54 (expression -> CONTINUE .)


state 18

    (55) expression -> BREAK .

    SEMICOLON       reduce using rule 55 (expression -> BREAK .)
    ADD             reduce using rule 55 (expression -> BREAK .)
    SUBTRACT        reduce using rule 55 (expression -> BREAK .)
    MULTIPLY        reduce using rule 55 (expression -> BREAK .)
    DIVIDE          reduce using rule 55 (expression -> BREAK .)
    EXP             reduce using rule 55 (expression -> BREAK .)
    EQUALCOMP       reduce using rule 55 (expression -> BREAK .)
    GREATER_THAN_EQUAL reduce using rule 55 (expression -> BREAK .)
    LESS_THAN_EQUAL reduce using rule 55 (expression -> BREAK .)
    GREATER_THAN    reduce using rule 55 (expression -> BREAK .)
    LESS_THAN       reduce using rule 55 (expression -> BREAK .)
    NOTEQUAL        reduce using rule 55 (expression -> BREAK .)
    AND             reduce using rule 55 (expression -> BREAK .)
    OR              reduce using rule 55 (expression -> BREAK .)
    RPAREN          reduce using rule 55 (expression -> BREAK .)


state 19

    (71) expression -> IDENTIFIER .
    (34) input -> IDENTIFIER . EQUAL INPUT LPAREN RPAREN

    SEMICOLON       reduce using rule 71 (expression -> IDENTIFIER .)
    ADD             reduce using rule 71 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 71 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 71 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (expression -> IDENTIFIER .)
    EXP             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 71 (expression -> IDENTIFIER .)
    AND             reduce using rule 71 (expression -> IDENTIFIER .)
    OR              reduce using rule 71 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 57


state 20

    (23) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (24) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (29) assign -> INTTYPE . IDENTIFIER
    (62) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 21

    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (30) assign -> FLOATTYPE . IDENTIFIER
    (64) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 59


state 22

    (26) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (31) assign -> CHARTYPE . IDENTIFIER
    (63) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 60


state 23

    (28) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (32) assign -> STRINGTYPE . IDENTIFIER
    (65) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 61


state 24

    (33) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 62


state 25

    (56) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement

    LPAREN          shift and go to state 63


state 26

    (60) while_statement -> WHILE . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 64


state 27

    (61) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 65


state 28

    (66) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 66


state 29

    (67) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE

    IDENTIFIER      shift and go to state 67


state 30

    (22) comment -> COMMENT .

    LPAREN          reduce using rule 22 (comment -> COMMENT .)
    NOT             reduce using rule 22 (comment -> COMMENT .)
    INT             reduce using rule 22 (comment -> COMMENT .)
    FLOAT           reduce using rule 22 (comment -> COMMENT .)
    CONTINUE        reduce using rule 22 (comment -> COMMENT .)
    BREAK           reduce using rule 22 (comment -> COMMENT .)
    IDENTIFIER      reduce using rule 22 (comment -> COMMENT .)
    INTTYPE         reduce using rule 22 (comment -> COMMENT .)
    FLOATTYPE       reduce using rule 22 (comment -> COMMENT .)
    CHARTYPE        reduce using rule 22 (comment -> COMMENT .)
    STRINGTYPE      reduce using rule 22 (comment -> COMMENT .)
    PRINT           reduce using rule 22 (comment -> COMMENT .)
    IF              reduce using rule 22 (comment -> COMMENT .)
    WHILE           reduce using rule 22 (comment -> COMMENT .)
    FOR             reduce using rule 22 (comment -> COMMENT .)
    VOID            reduce using rule 22 (comment -> COMMENT .)
    COMMENT         reduce using rule 22 (comment -> COMMENT .)
    $end            reduce using rule 22 (comment -> COMMENT .)


state 31

    (1) ka -> expression SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 68
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 32

    (37) expression -> expression ADD . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 69

state 33

    (38) expression -> expression SUBTRACT . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 70

state 34

    (39) expression -> expression MULTIPLY . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 71

state 35

    (40) expression -> expression DIVIDE . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 72

state 36

    (41) expression -> expression EXP . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 73

state 37

    (43) expression -> expression EQUALCOMP . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 74

state 38

    (44) expression -> expression GREATER_THAN_EQUAL . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 75

state 39

    (45) expression -> expression LESS_THAN_EQUAL . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 76

state 40

    (46) expression -> expression GREATER_THAN . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 77

state 41

    (47) expression -> expression LESS_THAN . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 78

state 42

    (48) expression -> expression NOTEQUAL . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 79

state 43

    (50) expression -> expression AND . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 80

state 44

    (51) expression -> expression OR . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 81

state 45

    (2) ka -> assign SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 82
    expression                     shift and go to state 2
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 46

    (3) ka -> print SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    print                          shift and go to state 4
    ka                             shift and go to state 83
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 47

    (4) ka -> input SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (67) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (72) empty -> .
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 20
    FLOATTYPE       shift and go to state 21
    CHARTYPE        shift and go to state 22
    STRINGTYPE      shift and go to state 23
    PRINT           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 72 (empty -> .)

    input                          shift and go to state 5
    ka                             shift and go to state 84
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 48

    (5) ka -> if_statement ka .

    $end            reduce using rule 5 (ka -> if_statement ka .)


state 49

    (6) ka -> if_else_statement ka .

    $end            reduce using rule 6 (ka -> if_else_statement ka .)


state 50

    (7) ka -> while_statement ka .

    $end            reduce using rule 7 (ka -> while_statement ka .)


state 51

    (8) ka -> for_statement ka .

    $end            reduce using rule 8 (ka -> for_statement ka .)


state 52

    (9) ka -> function_statement ka .

    $end            reduce using rule 9 (ka -> function_statement ka .)


state 53

    (10) ka -> comment ka .

    $end            reduce using rule 10 (ka -> comment ka .)


state 54

    (42) expression -> LPAREN expression . RPAREN
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 85
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 55

    (71) expression -> IDENTIFIER .

    RPAREN          reduce using rule 71 (expression -> IDENTIFIER .)
    ADD             reduce using rule 71 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 71 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 71 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (expression -> IDENTIFIER .)
    EXP             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 71 (expression -> IDENTIFIER .)
    AND             reduce using rule 71 (expression -> IDENTIFIER .)
    OR              reduce using rule 71 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (expression -> IDENTIFIER .)


state 56

    (49) expression -> NOT expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 49 (expression -> NOT expression .)
    RPAREN          reduce using rule 49 (expression -> NOT expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 49 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 49 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 49 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 49 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 49 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 49 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 49 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 49 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 49 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 49 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 49 (expression -> NOT expression .) ]


state 57

    (34) input -> IDENTIFIER EQUAL . INPUT LPAREN RPAREN

    INPUT           shift and go to state 86


state 58

    (23) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (24) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (29) assign -> INTTYPE IDENTIFIER .
    (62) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 87
    SEMICOLON       reduce using rule 29 (assign -> INTTYPE IDENTIFIER .)
    LPAREN          reduce using rule 62 (type_identifier -> INTTYPE IDENTIFIER .)


state 59

    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (30) assign -> FLOATTYPE IDENTIFIER .
    (64) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 88
    SEMICOLON       reduce using rule 30 (assign -> FLOATTYPE IDENTIFIER .)
    LPAREN          reduce using rule 64 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 60

    (26) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (31) assign -> CHARTYPE IDENTIFIER .
    (63) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 89
    SEMICOLON       reduce using rule 31 (assign -> CHARTYPE IDENTIFIER .)
    LPAREN          reduce using rule 63 (type_identifier -> CHARTYPE IDENTIFIER .)


state 61

    (28) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (32) assign -> STRINGTYPE IDENTIFIER .
    (65) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 90
    SEMICOLON       reduce using rule 32 (assign -> STRINGTYPE IDENTIFIER .)
    LPAREN          reduce using rule 65 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 62

    (33) print -> PRINT LPAREN . expression RPAREN
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 91

state 63

    (56) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 92

state 64

    (60) while_statement -> WHILE LPAREN . expression RPAREN LBRACE legal RBRACE
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 93

state 65

    (61) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98

    assign                         shift and go to state 94

state 66

    (66) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE legal RBRACE
    (68) function_input -> . type_identifier COMMA function_input
    (69) function_input -> . type_identifier
    (70) function_input -> . empty
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER
    (72) empty -> .

    INTTYPE         shift and go to state 102
    CHARTYPE        shift and go to state 103
    FLOATTYPE       shift and go to state 104
    STRINGTYPE      shift and go to state 105
    RPAREN          reduce using rule 72 (empty -> .)

    type_identifier                shift and go to state 99
    function_input                 shift and go to state 100
    empty                          shift and go to state 101

state 67

    (67) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 106


state 68

    (1) ka -> expression SEMICOLON ka .

    $end            reduce using rule 1 (ka -> expression SEMICOLON ka .)


state 69

    (37) expression -> expression ADD expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression ADD expression .)
    ADD             reduce using rule 37 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 37 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 37 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 37 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 37 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 37 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression ADD expression .)
    AND             reduce using rule 37 (expression -> expression ADD expression .)
    OR              reduce using rule 37 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 37 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! MULTIPLY        [ reduce using rule 37 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 37 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 70

    (38) expression -> expression SUBTRACT expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression SUBTRACT expression .)
    ADD             reduce using rule 38 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 38 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 38 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 38 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 38 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 38 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 38 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 38 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 38 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! MULTIPLY        [ reduce using rule 38 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 71

    (39) expression -> expression MULTIPLY expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression MULTIPLY expression .)
    ADD             reduce using rule 39 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 39 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 39 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 39 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 39 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 39 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 39 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 39 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 39 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 39 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 39 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 39 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 72

    (40) expression -> expression DIVIDE expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 40 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 40 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 40 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 40 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 40 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 40 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 40 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 40 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 40 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 40 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 73

    (41) expression -> expression EXP expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression EXP expression .)
    ADD             reduce using rule 41 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 41 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 41 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 41 (expression -> expression EXP expression .)
    EXP             reduce using rule 41 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 41 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 41 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 41 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 41 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 41 (expression -> expression EXP expression .)
    AND             reduce using rule 41 (expression -> expression EXP expression .)
    OR              reduce using rule 41 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 41 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 74

    (43) expression -> expression EQUALCOMP expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    EQUALCOMP       reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 43 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 43 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 43 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 75

    (44) expression -> expression GREATER_THAN_EQUAL expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 76

    (45) expression -> expression LESS_THAN_EQUAL expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 77

    (46) expression -> expression GREATER_THAN expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    EQUALCOMP       reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 46 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 46 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 46 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 46 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 78

    (47) expression -> expression LESS_THAN expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 47 (expression -> expression LESS_THAN expression .)
    EQUALCOMP       reduce using rule 47 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 47 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 47 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 47 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 47 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 47 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 47 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 47 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 79

    (48) expression -> expression NOTEQUAL expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    EQUALCOMP       reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 80

    (50) expression -> expression AND expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 50 (expression -> expression AND expression .)
    RPAREN          reduce using rule 50 (expression -> expression AND expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression AND expression .) ]


state 81

    (51) expression -> expression OR expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 51 (expression -> expression OR expression .)
    RPAREN          reduce using rule 51 (expression -> expression OR expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression OR expression .) ]


state 82

    (2) ka -> assign SEMICOLON ka .

    $end            reduce using rule 2 (ka -> assign SEMICOLON ka .)


state 83

    (3) ka -> print SEMICOLON ka .

    $end            reduce using rule 3 (ka -> print SEMICOLON ka .)


state 84

    (4) ka -> input SEMICOLON ka .

    $end            reduce using rule 4 (ka -> input SEMICOLON ka .)


state 85

    (42) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    SUBTRACT        reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    EQUALCOMP       reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 42 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 42 (expression -> LPAREN expression RPAREN .)


state 86

    (34) input -> IDENTIFIER EQUAL INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 107


state 87

    (23) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (24) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    INT             shift and go to state 108
    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 109

state 88

    (25) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (27) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    FLOAT           shift and go to state 111
    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 110

state 89

    (26) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 112


state 90

    (28) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 113


state 91

    (33) print -> PRINT LPAREN expression . RPAREN
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 114
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 92

    (56) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 115
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 93

    (60) while_statement -> WHILE LPAREN expression . RPAREN LBRACE legal RBRACE
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 116
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 94

    (61) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    SEMICOLON       shift and go to state 117


state 95

    (23) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (24) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (29) assign -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 118


state 96

    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (30) assign -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 119


state 97

    (26) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (31) assign -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 98

    (28) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (32) assign -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 121


state 99

    (68) function_input -> type_identifier . COMMA function_input
    (69) function_input -> type_identifier .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 69 (function_input -> type_identifier .)


state 100

    (66) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 123


state 101

    (70) function_input -> empty .

    RPAREN          reduce using rule 70 (function_input -> empty .)


state 102

    (62) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 124


state 103

    (63) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 125


state 104

    (64) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 126


state 105

    (65) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 127


state 106

    (67) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE legal RBRACE
    (68) function_input -> . type_identifier COMMA function_input
    (69) function_input -> . type_identifier
    (70) function_input -> . empty
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER
    (72) empty -> .

    INTTYPE         shift and go to state 102
    CHARTYPE        shift and go to state 103
    FLOATTYPE       shift and go to state 104
    STRINGTYPE      shift and go to state 105
    RPAREN          reduce using rule 72 (empty -> .)

    function_input                 shift and go to state 128
    type_identifier                shift and go to state 99
    empty                          shift and go to state 101

state 107

    (34) input -> IDENTIFIER EQUAL INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 129


state 108

    (23) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (52) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 52 (expression -> INT .)
    SUBTRACT        reduce using rule 52 (expression -> INT .)
    MULTIPLY        reduce using rule 52 (expression -> INT .)
    DIVIDE          reduce using rule 52 (expression -> INT .)
    EXP             reduce using rule 52 (expression -> INT .)
    EQUALCOMP       reduce using rule 52 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 52 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 52 (expression -> INT .)
    GREATER_THAN    reduce using rule 52 (expression -> INT .)
    LESS_THAN       reduce using rule 52 (expression -> INT .)
    NOTEQUAL        reduce using rule 52 (expression -> INT .)
    AND             reduce using rule 52 (expression -> INT .)
    OR              reduce using rule 52 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 52 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 52 (expression -> INT .) ]


state 109

    (24) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 24 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 24 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 110

    (25) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 111

    (27) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (53) expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 53 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 53 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 53 (expression -> FLOAT .)
    DIVIDE          reduce using rule 53 (expression -> FLOAT .)
    EXP             reduce using rule 53 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 53 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 53 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 53 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 53 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 53 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 53 (expression -> FLOAT .)
    AND             reduce using rule 53 (expression -> FLOAT .)
    OR              reduce using rule 53 (expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 53 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 53 (expression -> FLOAT .) ]


state 112

    (26) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    SEMICOLON       reduce using rule 26 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 26 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 113

    (28) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    SEMICOLON       reduce using rule 28 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 28 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 114

    (33) print -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 33 (print -> PRINT LPAREN expression RPAREN .)


state 115

    (56) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE
    (57) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement

    LBRACE          shift and go to state 130


state 116

    (60) while_statement -> WHILE LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 131


state 117

    (61) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 132

state 118

    (23) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (24) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (29) assign -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 87
    SEMICOLON       reduce using rule 29 (assign -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 29 (assign -> INTTYPE IDENTIFIER .)


state 119

    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (30) assign -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 88
    SEMICOLON       reduce using rule 30 (assign -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 30 (assign -> FLOATTYPE IDENTIFIER .)


state 120

    (26) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (31) assign -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 89
    SEMICOLON       reduce using rule 31 (assign -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 31 (assign -> CHARTYPE IDENTIFIER .)


state 121

    (28) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (32) assign -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 90
    SEMICOLON       reduce using rule 32 (assign -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 32 (assign -> STRINGTYPE IDENTIFIER .)


state 122

    (68) function_input -> type_identifier COMMA . function_input
    (68) function_input -> . type_identifier COMMA function_input
    (69) function_input -> . type_identifier
    (70) function_input -> . empty
    (62) type_identifier -> . INTTYPE IDENTIFIER
    (63) type_identifier -> . CHARTYPE IDENTIFIER
    (64) type_identifier -> . FLOATTYPE IDENTIFIER
    (65) type_identifier -> . STRINGTYPE IDENTIFIER
    (72) empty -> .

    INTTYPE         shift and go to state 102
    CHARTYPE        shift and go to state 103
    FLOATTYPE       shift and go to state 104
    STRINGTYPE      shift and go to state 105
    RPAREN          reduce using rule 72 (empty -> .)

    type_identifier                shift and go to state 99
    function_input                 shift and go to state 133
    empty                          shift and go to state 101

state 123

    (66) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 134


state 124

    (62) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 62 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 62 (type_identifier -> INTTYPE IDENTIFIER .)


state 125

    (63) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 63 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 63 (type_identifier -> CHARTYPE IDENTIFIER .)


state 126

    (64) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 64 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 64 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 127

    (65) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 65 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 65 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 128

    (67) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 135


state 129

    (34) input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .

    SEMICOLON       reduce using rule 34 (input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .)


state 130

    (56) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    expression                     shift and go to state 136
    legal                          shift and go to state 137
    if_else_statement              shift and go to state 138
    if_statement                   shift and go to state 139
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 131

    (60) while_statement -> WHILE LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    expression                     shift and go to state 136
    legal                          shift and go to state 148
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 132

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE legal RBRACE
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       shift and go to state 149
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 133

    (68) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 68 (function_input -> type_identifier COMMA function_input .)


state 134

    (66) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    legal                          shift and go to state 150
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 135

    (67) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 151


state 136

    (12) legal -> expression . SEMICOLON legal
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       shift and go to state 152
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 137

    (56) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE
    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement

    RBRACE          shift and go to state 153


state 138

    (18) legal -> if_else_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    if_else_statement              shift and go to state 138
    legal                          shift and go to state 154
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 139

    (17) legal -> if_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    if_statement                   shift and go to state 139
    legal                          shift and go to state 155
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 140

    (13) legal -> assign . SEMICOLON legal

    SEMICOLON       shift and go to state 156


state 141

    (14) legal -> print . SEMICOLON legal

    SEMICOLON       shift and go to state 157


state 142

    (15) legal -> input . SEMICOLON legal

    SEMICOLON       shift and go to state 158


state 143

    (16) legal -> return . SEMICOLON legal

    SEMICOLON       shift and go to state 159


state 144

    (19) legal -> while_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    while_statement                shift and go to state 144
    legal                          shift and go to state 160
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 145

    (20) legal -> for_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    for_statement                  shift and go to state 145
    legal                          shift and go to state 161
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    empty                          shift and go to state 146

state 146

    (21) legal -> empty .

    RBRACE          reduce using rule 21 (legal -> empty .)


state 147

    (35) return -> RETURN . expression
    (36) return -> RETURN . IDENTIFIER
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 163
    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18

    expression                     shift and go to state 162

state 148

    (60) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 164


state 149

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE legal RBRACE
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98

    assign                         shift and go to state 165

state 150

    (66) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 166


state 151

    (67) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    legal                          shift and go to state 167
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 152

    (12) legal -> expression SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    expression                     shift and go to state 136
    legal                          shift and go to state 168
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 153

    (56) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .
    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement

    LPAREN          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    ELSE            shift and go to state 169


state 154

    (18) legal -> if_else_statement legal .

    RBRACE          reduce using rule 18 (legal -> if_else_statement legal .)


state 155

    (17) legal -> if_statement legal .

    RBRACE          reduce using rule 17 (legal -> if_statement legal .)


state 156

    (13) legal -> assign SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    assign                         shift and go to state 140
    legal                          shift and go to state 170
    expression                     shift and go to state 136
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 157

    (14) legal -> print SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    print                          shift and go to state 141
    legal                          shift and go to state 171
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 158

    (15) legal -> input SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    input                          shift and go to state 142
    legal                          shift and go to state 172
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 159

    (16) legal -> return SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    return                         shift and go to state 143
    legal                          shift and go to state 173
    expression                     shift and go to state 136
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 160

    (19) legal -> while_statement legal .

    RBRACE          reduce using rule 19 (legal -> while_statement legal .)


state 161

    (20) legal -> for_statement legal .

    RBRACE          reduce using rule 20 (legal -> for_statement legal .)


state 162

    (35) return -> RETURN expression .
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (return -> RETURN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 163

    (36) return -> RETURN IDENTIFIER .
    (71) expression -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (return -> RETURN IDENTIFIER .)
    SEMICOLON       reduce using rule 36 (return -> RETURN IDENTIFIER .)
    ADD             reduce using rule 71 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 71 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 71 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (expression -> IDENTIFIER .)
    EXP             reduce using rule 71 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 71 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 71 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 71 (expression -> IDENTIFIER .)
    AND             reduce using rule 71 (expression -> IDENTIFIER .)
    OR              reduce using rule 71 (expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 71 (expression -> IDENTIFIER .) ]


state 164

    (60) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 60 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)


state 165

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 174


state 166

    (66) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 66 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 167

    (67) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 175


state 168

    (12) legal -> expression SEMICOLON legal .

    RBRACE          reduce using rule 12 (legal -> expression SEMICOLON legal .)


state 169

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_statement
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE

    LBRACE          shift and go to state 177
    IF              shift and go to state 176

    if_else_statement              shift and go to state 178
    if_statement                   shift and go to state 179

state 170

    (13) legal -> assign SEMICOLON legal .

    RBRACE          reduce using rule 13 (legal -> assign SEMICOLON legal .)


state 171

    (14) legal -> print SEMICOLON legal .

    RBRACE          reduce using rule 14 (legal -> print SEMICOLON legal .)


state 172

    (15) legal -> input SEMICOLON legal .

    RBRACE          reduce using rule 15 (legal -> input SEMICOLON legal .)


state 173

    (16) legal -> return SEMICOLON legal .

    RBRACE          reduce using rule 16 (legal -> return SEMICOLON legal .)


state 174

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 180


state 175

    (67) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 67 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 176

    (57) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (56) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 181


state 177

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    expression                     shift and go to state 136
    legal                          shift and go to state 182
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 178

    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .

    LPAREN          reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    NOT             reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INT             reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CONTINUE        reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    BREAK           reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IF              reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    COMMENT         reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    $end            reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RETURN          reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RBRACE          reduce using rule 58 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)


state 179

    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .

    LPAREN          reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    NOT             reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INT             reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CONTINUE        reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    BREAK           reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    PRINT           reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IF              reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    WHILE           reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FOR             reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    VOID            reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    COMMENT         reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    $end            reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RETURN          reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RBRACE          reduce using rule 59 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)


state 180

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    assign                         shift and go to state 140
    expression                     shift and go to state 136
    legal                          shift and go to state 183
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    if_statement                   shift and go to state 139
    if_else_statement              shift and go to state 138
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 181

    (57) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (56) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 55

    expression                     shift and go to state 184

state 182

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal . RBRACE

    RBRACE          shift and go to state 185


state 183

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 186


state 184

    (57) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (56) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (37) expression -> expression . ADD expression
    (38) expression -> expression . SUBTRACT expression
    (39) expression -> expression . MULTIPLY expression
    (40) expression -> expression . DIVIDE expression
    (41) expression -> expression . EXP expression
    (43) expression -> expression . EQUALCOMP expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression
    (46) expression -> expression . GREATER_THAN expression
    (47) expression -> expression . LESS_THAN expression
    (48) expression -> expression . NOTEQUAL expression
    (50) expression -> expression . AND expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 187
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 185

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .

    LPAREN          reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    NOT             reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INT             reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOAT           reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    BREAK           reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    PRINT           reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IF              reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    WHILE           reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FOR             reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    VOID            reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    COMMENT         reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    $end            reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RETURN          reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RBRACE          reduce using rule 57 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)


state 186

    (61) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 61 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)


state 187

    (57) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement
    (56) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 188


state 188

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (56) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (37) expression -> . expression ADD expression
    (38) expression -> . expression SUBTRACT expression
    (39) expression -> . expression MULTIPLY expression
    (40) expression -> . expression DIVIDE expression
    (41) expression -> . expression EXP expression
    (42) expression -> . LPAREN expression RPAREN
    (43) expression -> . expression EQUALCOMP expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . expression GREATER_THAN expression
    (47) expression -> . expression LESS_THAN expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . NOT expression
    (50) expression -> . expression AND expression
    (51) expression -> . expression OR expression
    (52) expression -> . INT
    (53) expression -> . FLOAT
    (54) expression -> . CONTINUE
    (55) expression -> . BREAK
    (71) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) assign -> . INTTYPE IDENTIFIER
    (30) assign -> . FLOATTYPE IDENTIFIER
    (31) assign -> . CHARTYPE IDENTIFIER
    (32) assign -> . STRINGTYPE IDENTIFIER
    (33) print -> . PRINT LPAREN expression RPAREN
    (34) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (35) return -> . RETURN expression
    (36) return -> . RETURN IDENTIFIER
    (56) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (57) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (59) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (60) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (61) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (72) empty -> .

    LPAREN          shift and go to state 13
    NOT             shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CONTINUE        shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 19
    INTTYPE         shift and go to state 95
    FLOATTYPE       shift and go to state 96
    CHARTYPE        shift and go to state 97
    STRINGTYPE      shift and go to state 98
    PRINT           shift and go to state 24
    RETURN          shift and go to state 147
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 72 (empty -> .)

    expression                     shift and go to state 136
    legal                          shift and go to state 189
    if_else_statement              shift and go to state 138
    if_statement                   shift and go to state 139
    assign                         shift and go to state 140
    print                          shift and go to state 141
    input                          shift and go to state 142
    return                         shift and go to state 143
    while_statement                shift and go to state 144
    for_statement                  shift and go to state 145
    empty                          shift and go to state 146

state 189

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement
    (56) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 190


state 190

    (57) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (58) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (59) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement
    (56) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .

    ELSE            shift and go to state 169
    LPAREN          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 56 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 56 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for EXP in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 56 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 56 resolved as shift
WARNING: shift/reduce conflict for ADD in state 80 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for ADD in state 81 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 81 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for EXP in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: reduce/reduce conflict in state 108 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 108
WARNING: reduce/reduce conflict in state 111 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 111
WARNING: reduce/reduce conflict in state 163 resolved using rule (return -> RETURN IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 163
