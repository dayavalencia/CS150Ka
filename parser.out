Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    INPUT
    RETURN

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression SEMICOLON ka
Rule 2     ka -> assign SEMICOLON ka
Rule 3     ka -> print SEMICOLON ka
Rule 4     ka -> if_statement ka
Rule 5     ka -> if_else_statement ka
Rule 6     ka -> while_statement ka
Rule 7     ka -> for_statement ka
Rule 8     ka -> function_statement ka
Rule 9     ka -> empty
Rule 10    legal -> expression SEMICOLON legal
Rule 11    legal -> assign SEMICOLON legal
Rule 12    legal -> print SEMICOLON legal
Rule 13    legal -> if_statement legal
Rule 14    legal -> if_else_statement legal
Rule 15    legal -> while_statement legal
Rule 16    legal -> for_statement legal
Rule 17    legal -> empty
Rule 18    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 19    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 20    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 21    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 22    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 23    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 24    print -> PRINT LPAREN expression RPAREN
Rule 25    expression -> expression ADD expression
Rule 26    expression -> expression SUBTRACT expression
Rule 27    expression -> expression MULTIPLY expression
Rule 28    expression -> expression DIVIDE expression
Rule 29    expression -> expression EXP expression
Rule 30    expression -> expression EQUALCOMP expression
Rule 31    expression -> expression GREATER_THAN_EQUAL expression
Rule 32    expression -> expression LESS_THAN_EQUAL expression
Rule 33    expression -> expression GREATER_THAN expression
Rule 34    expression -> expression LESS_THAN expression
Rule 35    expression -> expression NOTEQUAL expression
Rule 36    expression -> NOT expression
Rule 37    expression -> expression AND expression
Rule 38    expression -> expression OR expression
Rule 39    expression -> INT
Rule 40    expression -> FLOAT
Rule 41    expression -> CONTINUE
Rule 42    expression -> BREAK
Rule 43    if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE
Rule 44    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
Rule 45    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
Rule 46    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
Rule 47    while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE
Rule 48    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
Rule 49    type_identifier -> INTTYPE IDENTIFIER
Rule 50    type_identifier -> CHARTYPE IDENTIFIER
Rule 51    type_identifier -> FLOATTYPE IDENTIFIER
Rule 52    type_identifier -> STRINGTYPE IDENTIFIER
Rule 53    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 54    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 55    function_input -> type_identifier COMMA function_input
Rule 56    function_input -> type_identifier
Rule 57    expression -> IDENTIFIER
Rule 58    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 25
AND                  : 37
BREAK                : 42
CHAR                 : 21
CHARTYPE             : 21 50
COMMA                : 55
COMMENT              : 
CONTINUE             : 41
DIVIDE               : 28
ELSE                 : 44 45 46
EQUAL                : 18 19 20 21 22 23
EQUALCOMP            : 30
EXP                  : 29
FLOAT                : 22 40
FLOATTYPE            : 20 22 51
FOR                  : 48
GREATER_THAN         : 33
GREATER_THAN_EQUAL   : 31
IDENTIFIER           : 18 19 20 21 22 23 49 50 51 52 54 57
IF                   : 43 44 45 46
INPUT                : 
INT                  : 18 39
INTTYPE              : 18 19 49
LBRACE               : 43 44 44 45 46 47 48 53 54
LESS_THAN            : 34
LESS_THAN_EQUAL      : 32
LPAREN               : 24 43 44 45 46 47 48 53 54
MULTIPLY             : 27
NOT                  : 36
NOTEQUAL             : 35
OR                   : 38
PRINT                : 24
RBRACE               : 43 44 44 45 46 47 48 53 54
RETURN               : 
RPAREN               : 24 43 44 45 46 47 48 53 54
SEMICOLON            : 1 2 3 10 11 12 48 48
STRING               : 23
STRINGTYPE           : 23 52
SUBTRACT             : 26
VOID                 : 54
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

assign               : 2 11 48 48
empty                : 9 17
expression           : 1 10 19 20 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 37 37 38 38 43 44 45 46 47 48
for_statement        : 7 16
function_input       : 53 54 55
function_statement   : 8
if_else_statement    : 5 14 45
if_statement         : 4 13 46
ka                   : 1 2 3 4 5 6 7 8 0
legal                : 10 11 12 13 14 15 16 43 44 44 45 46 47 48 53 54
print                : 3 12
type_identifier      : 53 55 56
while_statement      : 6 15

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . SEMICOLON ka
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       shift and go to state 27
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 3

    (2) ka -> assign . SEMICOLON ka

    SEMICOLON       shift and go to state 41


state 4

    (3) ka -> print . SEMICOLON ka

    SEMICOLON       shift and go to state 42


state 5

    (4) ka -> if_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    if_statement                   shift and go to state 5
    ka                             shift and go to state 43
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 6

    (5) ka -> if_else_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    if_else_statement              shift and go to state 6
    ka                             shift and go to state 44
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 7

    (6) ka -> while_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    while_statement                shift and go to state 7
    ka                             shift and go to state 45
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 8

    (7) ka -> for_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    for_statement                  shift and go to state 8
    ka                             shift and go to state 46
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 9

    (8) ka -> function_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    function_statement             shift and go to state 9
    ka                             shift and go to state 47
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 10

    (9) ka -> empty .

    $end            reduce using rule 9 (ka -> empty .)


state 11

    (36) expression -> NOT . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 48

state 12

    (39) expression -> INT .

    SEMICOLON       reduce using rule 39 (expression -> INT .)
    ADD             reduce using rule 39 (expression -> INT .)
    SUBTRACT        reduce using rule 39 (expression -> INT .)
    MULTIPLY        reduce using rule 39 (expression -> INT .)
    DIVIDE          reduce using rule 39 (expression -> INT .)
    EXP             reduce using rule 39 (expression -> INT .)
    EQUALCOMP       reduce using rule 39 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 39 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 39 (expression -> INT .)
    GREATER_THAN    reduce using rule 39 (expression -> INT .)
    LESS_THAN       reduce using rule 39 (expression -> INT .)
    NOTEQUAL        reduce using rule 39 (expression -> INT .)
    AND             reduce using rule 39 (expression -> INT .)
    OR              reduce using rule 39 (expression -> INT .)
    RPAREN          reduce using rule 39 (expression -> INT .)


state 13

    (40) expression -> FLOAT .

    SEMICOLON       reduce using rule 40 (expression -> FLOAT .)
    ADD             reduce using rule 40 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 40 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 40 (expression -> FLOAT .)
    DIVIDE          reduce using rule 40 (expression -> FLOAT .)
    EXP             reduce using rule 40 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 40 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 40 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 40 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 40 (expression -> FLOAT .)
    AND             reduce using rule 40 (expression -> FLOAT .)
    OR              reduce using rule 40 (expression -> FLOAT .)
    RPAREN          reduce using rule 40 (expression -> FLOAT .)


state 14

    (41) expression -> CONTINUE .

    SEMICOLON       reduce using rule 41 (expression -> CONTINUE .)
    ADD             reduce using rule 41 (expression -> CONTINUE .)
    SUBTRACT        reduce using rule 41 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 41 (expression -> CONTINUE .)
    DIVIDE          reduce using rule 41 (expression -> CONTINUE .)
    EXP             reduce using rule 41 (expression -> CONTINUE .)
    EQUALCOMP       reduce using rule 41 (expression -> CONTINUE .)
    GREATER_THAN_EQUAL reduce using rule 41 (expression -> CONTINUE .)
    LESS_THAN_EQUAL reduce using rule 41 (expression -> CONTINUE .)
    GREATER_THAN    reduce using rule 41 (expression -> CONTINUE .)
    LESS_THAN       reduce using rule 41 (expression -> CONTINUE .)
    NOTEQUAL        reduce using rule 41 (expression -> CONTINUE .)
    AND             reduce using rule 41 (expression -> CONTINUE .)
    OR              reduce using rule 41 (expression -> CONTINUE .)
    RPAREN          reduce using rule 41 (expression -> CONTINUE .)


state 15

    (42) expression -> BREAK .

    SEMICOLON       reduce using rule 42 (expression -> BREAK .)
    ADD             reduce using rule 42 (expression -> BREAK .)
    SUBTRACT        reduce using rule 42 (expression -> BREAK .)
    MULTIPLY        reduce using rule 42 (expression -> BREAK .)
    DIVIDE          reduce using rule 42 (expression -> BREAK .)
    EXP             reduce using rule 42 (expression -> BREAK .)
    EQUALCOMP       reduce using rule 42 (expression -> BREAK .)
    GREATER_THAN_EQUAL reduce using rule 42 (expression -> BREAK .)
    LESS_THAN_EQUAL reduce using rule 42 (expression -> BREAK .)
    GREATER_THAN    reduce using rule 42 (expression -> BREAK .)
    LESS_THAN       reduce using rule 42 (expression -> BREAK .)
    NOTEQUAL        reduce using rule 42 (expression -> BREAK .)
    AND             reduce using rule 42 (expression -> BREAK .)
    OR              reduce using rule 42 (expression -> BREAK .)
    RPAREN          reduce using rule 42 (expression -> BREAK .)


state 16

    (57) expression -> IDENTIFIER .

    SEMICOLON       reduce using rule 57 (expression -> IDENTIFIER .)
    ADD             reduce using rule 57 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 57 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 57 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 57 (expression -> IDENTIFIER .)
    EXP             reduce using rule 57 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 57 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 57 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 57 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 57 (expression -> IDENTIFIER .)
    AND             reduce using rule 57 (expression -> IDENTIFIER .)
    OR              reduce using rule 57 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 57 (expression -> IDENTIFIER .)


state 17

    (18) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (19) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (49) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 49


state 18

    (20) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (22) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (51) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 50


state 19

    (21) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (50) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 51


state 20

    (23) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (52) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 52


state 21

    (24) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 53


state 22

    (43) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement

    LPAREN          shift and go to state 54


state 23

    (47) while_statement -> WHILE . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 55


state 24

    (48) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 56


state 25

    (53) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 57


state 26

    (54) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE

    IDENTIFIER      shift and go to state 58


state 27

    (1) ka -> expression SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 59
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 28

    (25) expression -> expression ADD . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 60

state 29

    (26) expression -> expression SUBTRACT . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 61

state 30

    (27) expression -> expression MULTIPLY . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 62

state 31

    (28) expression -> expression DIVIDE . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 63

state 32

    (29) expression -> expression EXP . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 64

state 33

    (30) expression -> expression EQUALCOMP . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 65

state 34

    (31) expression -> expression GREATER_THAN_EQUAL . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 66

state 35

    (32) expression -> expression LESS_THAN_EQUAL . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 67

state 36

    (33) expression -> expression GREATER_THAN . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 68

state 37

    (34) expression -> expression LESS_THAN . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 69

state 38

    (35) expression -> expression NOTEQUAL . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 70

state 39

    (37) expression -> expression AND . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 71

state 40

    (38) expression -> expression OR . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 72

state 41

    (2) ka -> assign SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 73
    expression                     shift and go to state 2
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 42

    (3) ka -> print SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . if_statement ka
    (5) ka -> . if_else_statement ka
    (6) ka -> . while_statement ka
    (7) ka -> . for_statement ka
    (8) ka -> . function_statement ka
    (9) ka -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (53) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (54) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (58) empty -> .
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 17
    FLOATTYPE       shift and go to state 18
    CHARTYPE        shift and go to state 19
    STRINGTYPE      shift and go to state 20
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    VOID            shift and go to state 26
    $end            reduce using rule 58 (empty -> .)

    print                          shift and go to state 4
    ka                             shift and go to state 74
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 5
    if_else_statement              shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    function_statement             shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 25

state 43

    (4) ka -> if_statement ka .

    $end            reduce using rule 4 (ka -> if_statement ka .)


state 44

    (5) ka -> if_else_statement ka .

    $end            reduce using rule 5 (ka -> if_else_statement ka .)


state 45

    (6) ka -> while_statement ka .

    $end            reduce using rule 6 (ka -> while_statement ka .)


state 46

    (7) ka -> for_statement ka .

    $end            reduce using rule 7 (ka -> for_statement ka .)


state 47

    (8) ka -> function_statement ka .

    $end            reduce using rule 8 (ka -> function_statement ka .)


state 48

    (36) expression -> NOT expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 36 (expression -> NOT expression .)
    RPAREN          reduce using rule 36 (expression -> NOT expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! ADD             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 36 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 36 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 36 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 36 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 36 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 36 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 36 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 36 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 36 (expression -> NOT expression .) ]


state 49

    (18) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (19) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (49) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 75
    LPAREN          reduce using rule 49 (type_identifier -> INTTYPE IDENTIFIER .)


state 50

    (20) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (22) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (51) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 76
    LPAREN          reduce using rule 51 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 51

    (21) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (50) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 77
    LPAREN          reduce using rule 50 (type_identifier -> CHARTYPE IDENTIFIER .)


state 52

    (23) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (52) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 78
    LPAREN          reduce using rule 52 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 53

    (24) print -> PRINT LPAREN . expression RPAREN
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 79

state 54

    (43) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 80

state 55

    (47) while_statement -> WHILE LPAREN . expression RPAREN LBRACE legal RBRACE
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 81

state 56

    (48) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86

    assign                         shift and go to state 82

state 57

    (53) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE legal RBRACE
    (55) function_input -> . type_identifier COMMA function_input
    (56) function_input -> . type_identifier
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 89
    CHARTYPE        shift and go to state 90
    FLOATTYPE       shift and go to state 91
    STRINGTYPE      shift and go to state 92

    type_identifier                shift and go to state 87
    function_input                 shift and go to state 88

state 58

    (54) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 93


state 59

    (1) ka -> expression SEMICOLON ka .

    $end            reduce using rule 1 (ka -> expression SEMICOLON ka .)


state 60

    (25) expression -> expression ADD expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 25 (expression -> expression ADD expression .)
    ADD             reduce using rule 25 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 25 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 25 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 25 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 25 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 25 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 25 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 25 (expression -> expression ADD expression .)
    AND             reduce using rule 25 (expression -> expression ADD expression .)
    OR              reduce using rule 25 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 25 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! MULTIPLY        [ reduce using rule 25 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 25 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUBTRACT        [ shift and go to state 29 ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 61

    (26) expression -> expression SUBTRACT expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 26 (expression -> expression SUBTRACT expression .)
    ADD             reduce using rule 26 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 26 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 26 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 26 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 26 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 26 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 26 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 26 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 26 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 26 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 26 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! MULTIPLY        [ reduce using rule 26 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 26 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 28 ]
  ! SUBTRACT        [ shift and go to state 29 ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 62

    (27) expression -> expression MULTIPLY expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 27 (expression -> expression MULTIPLY expression .)
    ADD             reduce using rule 27 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 27 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 27 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 27 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 27 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 27 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 27 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 27 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 27 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 27 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 27 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 27 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 27 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 27 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 28 ]
  ! SUBTRACT        [ shift and go to state 29 ]
  ! MULTIPLY        [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! EXP             [ shift and go to state 32 ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 63

    (28) expression -> expression DIVIDE expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 28 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 28 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 28 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 28 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 28 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 28 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 28 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 28 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 28 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 28 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 28 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 28 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 28 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 28 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 28 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 28 ]
  ! SUBTRACT        [ shift and go to state 29 ]
  ! MULTIPLY        [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! EXP             [ shift and go to state 32 ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 64

    (29) expression -> expression EXP expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 29 (expression -> expression EXP expression .)
    ADD             reduce using rule 29 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 29 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 29 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 29 (expression -> expression EXP expression .)
    EXP             reduce using rule 29 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 29 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 29 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 29 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 29 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 29 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 29 (expression -> expression EXP expression .)
    AND             reduce using rule 29 (expression -> expression EXP expression .)
    OR              reduce using rule 29 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 29 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 28 ]
  ! SUBTRACT        [ shift and go to state 29 ]
  ! MULTIPLY        [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 31 ]
  ! EXP             [ shift and go to state 32 ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 65

    (30) expression -> expression EQUALCOMP expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    EQUALCOMP       reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 30 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 30 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 30 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 30 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 66

    (31) expression -> expression GREATER_THAN_EQUAL expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 31 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 67

    (32) expression -> expression LESS_THAN_EQUAL expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 32 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 68

    (33) expression -> expression GREATER_THAN expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    EQUALCOMP       reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 33 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 33 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 33 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 33 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 33 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 69

    (34) expression -> expression LESS_THAN expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression LESS_THAN expression .)
    EQUALCOMP       reduce using rule 34 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 34 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 34 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 34 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 34 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 34 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 34 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 34 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 34 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 70

    (35) expression -> expression NOTEQUAL expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    EQUALCOMP       reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32

  ! ADD             [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 33 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 34 ]
  ! LESS_THAN_EQUAL [ shift and go to state 35 ]
  ! GREATER_THAN    [ shift and go to state 36 ]
  ! LESS_THAN       [ shift and go to state 37 ]
  ! NOTEQUAL        [ shift and go to state 38 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]


state 71

    (37) expression -> expression AND expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression AND expression .)
    RPAREN          reduce using rule 37 (expression -> expression AND expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! ADD             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression AND expression .) ]


state 72

    (38) expression -> expression OR expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression OR expression .)
    RPAREN          reduce using rule 38 (expression -> expression OR expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! ADD             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression OR expression .) ]


state 73

    (2) ka -> assign SEMICOLON ka .

    $end            reduce using rule 2 (ka -> assign SEMICOLON ka .)


state 74

    (3) ka -> print SEMICOLON ka .

    $end            reduce using rule 3 (ka -> print SEMICOLON ka .)


state 75

    (18) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (19) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    INT             shift and go to state 94
    NOT             shift and go to state 11
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 95

state 76

    (20) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (22) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    FLOAT           shift and go to state 97
    NOT             shift and go to state 11
    INT             shift and go to state 12
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 96

state 77

    (21) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 98


state 78

    (23) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 99


state 79

    (24) print -> PRINT LPAREN expression . RPAREN
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    RPAREN          shift and go to state 100
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 80

    (43) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    RPAREN          shift and go to state 101
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 81

    (47) while_statement -> WHILE LPAREN expression . RPAREN LBRACE legal RBRACE
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    RPAREN          shift and go to state 102
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 82

    (48) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    SEMICOLON       shift and go to state 103


state 83

    (18) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (19) assign -> INTTYPE . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 104


state 84

    (20) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (22) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT

    IDENTIFIER      shift and go to state 105


state 85

    (21) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR

    IDENTIFIER      shift and go to state 106


state 86

    (23) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING

    IDENTIFIER      shift and go to state 107


state 87

    (55) function_input -> type_identifier . COMMA function_input
    (56) function_input -> type_identifier .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 56 (function_input -> type_identifier .)


state 88

    (53) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 109


state 89

    (49) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 110


state 90

    (50) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 111


state 91

    (51) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 112


state 92

    (52) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 113


state 93

    (54) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE legal RBRACE
    (55) function_input -> . type_identifier COMMA function_input
    (56) function_input -> . type_identifier
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 89
    CHARTYPE        shift and go to state 90
    FLOATTYPE       shift and go to state 91
    STRINGTYPE      shift and go to state 92

    function_input                 shift and go to state 114
    type_identifier                shift and go to state 87

state 94

    (18) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (39) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 18 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 18 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 18 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 18 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 39 (expression -> INT .)
    SUBTRACT        reduce using rule 39 (expression -> INT .)
    MULTIPLY        reduce using rule 39 (expression -> INT .)
    DIVIDE          reduce using rule 39 (expression -> INT .)
    EXP             reduce using rule 39 (expression -> INT .)
    EQUALCOMP       reduce using rule 39 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 39 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 39 (expression -> INT .)
    GREATER_THAN    reduce using rule 39 (expression -> INT .)
    LESS_THAN       reduce using rule 39 (expression -> INT .)
    NOTEQUAL        reduce using rule 39 (expression -> INT .)
    AND             reduce using rule 39 (expression -> INT .)
    OR              reduce using rule 39 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 39 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 39 (expression -> INT .) ]


state 95

    (19) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 19 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 19 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 96

    (20) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       reduce using rule 20 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 20 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 97

    (22) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (40) expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 22 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 22 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 40 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 40 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 40 (expression -> FLOAT .)
    DIVIDE          reduce using rule 40 (expression -> FLOAT .)
    EXP             reduce using rule 40 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 40 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 40 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 40 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 40 (expression -> FLOAT .)
    AND             reduce using rule 40 (expression -> FLOAT .)
    OR              reduce using rule 40 (expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 40 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 40 (expression -> FLOAT .) ]


state 98

    (21) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    SEMICOLON       reduce using rule 21 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 21 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 99

    (23) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    SEMICOLON       reduce using rule 23 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 23 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 100

    (24) print -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 24 (print -> PRINT LPAREN expression RPAREN .)


state 101

    (43) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE
    (44) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement

    LBRACE          shift and go to state 115


state 102

    (47) while_statement -> WHILE LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 116


state 103

    (48) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 117

state 104

    (18) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (19) assign -> INTTYPE IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 75


state 105

    (20) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (22) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT

    EQUAL           shift and go to state 76


state 106

    (21) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR

    EQUAL           shift and go to state 77


state 107

    (23) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING

    EQUAL           shift and go to state 78


state 108

    (55) function_input -> type_identifier COMMA . function_input
    (55) function_input -> . type_identifier COMMA function_input
    (56) function_input -> . type_identifier
    (49) type_identifier -> . INTTYPE IDENTIFIER
    (50) type_identifier -> . CHARTYPE IDENTIFIER
    (51) type_identifier -> . FLOATTYPE IDENTIFIER
    (52) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 89
    CHARTYPE        shift and go to state 90
    FLOATTYPE       shift and go to state 91
    STRINGTYPE      shift and go to state 92

    type_identifier                shift and go to state 87
    function_input                 shift and go to state 118

state 109

    (53) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 119


state 110

    (49) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 49 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 49 (type_identifier -> INTTYPE IDENTIFIER .)


state 111

    (50) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 50 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 50 (type_identifier -> CHARTYPE IDENTIFIER .)


state 112

    (51) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 51 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 51 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 113

    (52) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 52 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 52 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 114

    (54) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 120


state 115

    (43) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 121
    legal                          shift and go to state 122
    if_else_statement              shift and go to state 123
    if_statement                   shift and go to state 124
    assign                         shift and go to state 125
    print                          shift and go to state 126
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 116

    (47) while_statement -> WHILE LPAREN expression RPAREN LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 121
    legal                          shift and go to state 130
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 117

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE legal RBRACE
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       shift and go to state 131
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 118

    (55) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 55 (function_input -> type_identifier COMMA function_input .)


state 119

    (53) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    legal                          shift and go to state 132
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 120

    (54) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 133


state 121

    (10) legal -> expression . SEMICOLON legal
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    SEMICOLON       shift and go to state 134
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 122

    (43) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE
    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement

    RBRACE          shift and go to state 135


state 123

    (14) legal -> if_else_statement . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    if_else_statement              shift and go to state 123
    legal                          shift and go to state 136
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 124

    (13) legal -> if_statement . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    if_statement                   shift and go to state 124
    legal                          shift and go to state 137
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 125

    (11) legal -> assign . SEMICOLON legal

    SEMICOLON       shift and go to state 138


state 126

    (12) legal -> print . SEMICOLON legal

    SEMICOLON       shift and go to state 139


state 127

    (15) legal -> while_statement . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    while_statement                shift and go to state 127
    legal                          shift and go to state 140
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 128

    (16) legal -> for_statement . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    for_statement                  shift and go to state 128
    legal                          shift and go to state 141
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    empty                          shift and go to state 129

state 129

    (17) legal -> empty .

    RBRACE          reduce using rule 17 (legal -> empty .)


state 130

    (47) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 142


state 131

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE legal RBRACE
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86

    assign                         shift and go to state 143

state 132

    (53) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 144


state 133

    (54) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    legal                          shift and go to state 145
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 134

    (10) legal -> expression SEMICOLON . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 121
    legal                          shift and go to state 146
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 135

    (43) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .
    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement

    NOT             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    ELSE            shift and go to state 147


state 136

    (14) legal -> if_else_statement legal .

    RBRACE          reduce using rule 14 (legal -> if_else_statement legal .)


state 137

    (13) legal -> if_statement legal .

    RBRACE          reduce using rule 13 (legal -> if_statement legal .)


state 138

    (11) legal -> assign SEMICOLON . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    assign                         shift and go to state 125
    legal                          shift and go to state 148
    expression                     shift and go to state 121
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 139

    (12) legal -> print SEMICOLON . legal
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    print                          shift and go to state 126
    legal                          shift and go to state 149
    expression                     shift and go to state 121
    assign                         shift and go to state 125
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 140

    (15) legal -> while_statement legal .

    RBRACE          reduce using rule 15 (legal -> while_statement legal .)


state 141

    (16) legal -> for_statement legal .

    RBRACE          reduce using rule 16 (legal -> for_statement legal .)


state 142

    (47) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 47 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)


state 143

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 150


state 144

    (53) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 53 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 145

    (54) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 151


state 146

    (10) legal -> expression SEMICOLON legal .

    RBRACE          reduce using rule 10 (legal -> expression SEMICOLON legal .)


state 147

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_statement
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE

    LBRACE          shift and go to state 153
    IF              shift and go to state 152

    if_else_statement              shift and go to state 154
    if_statement                   shift and go to state 155

state 148

    (11) legal -> assign SEMICOLON legal .

    RBRACE          reduce using rule 11 (legal -> assign SEMICOLON legal .)


state 149

    (12) legal -> print SEMICOLON legal .

    RBRACE          reduce using rule 12 (legal -> print SEMICOLON legal .)


state 150

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 156


state 151

    (54) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 54 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 152

    (44) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (43) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 157


state 153

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 121
    legal                          shift and go to state 158
    assign                         shift and go to state 125
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 154

    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .

    NOT             reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INT             reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CONTINUE        reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    BREAK           reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IF              reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    $end            reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RBRACE          reduce using rule 45 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)


state 155

    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .

    NOT             reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INT             reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CONTINUE        reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    BREAK           reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    PRINT           reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IF              reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    WHILE           reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FOR             reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    VOID            reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    $end            reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RBRACE          reduce using rule 46 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)


state 156

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    assign                         shift and go to state 125
    expression                     shift and go to state 121
    legal                          shift and go to state 159
    print                          shift and go to state 126
    if_statement                   shift and go to state 124
    if_else_statement              shift and go to state 123
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 157

    (44) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (43) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16

    expression                     shift and go to state 160

state 158

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal . RBRACE

    RBRACE          shift and go to state 161


state 159

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 162


state 160

    (44) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (43) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (25) expression -> expression . ADD expression
    (26) expression -> expression . SUBTRACT expression
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . EQUALCOMP expression
    (31) expression -> expression . GREATER_THAN_EQUAL expression
    (32) expression -> expression . LESS_THAN_EQUAL expression
    (33) expression -> expression . GREATER_THAN expression
    (34) expression -> expression . LESS_THAN expression
    (35) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression

    RPAREN          shift and go to state 163
    ADD             shift and go to state 28
    SUBTRACT        shift and go to state 29
    MULTIPLY        shift and go to state 30
    DIVIDE          shift and go to state 31
    EXP             shift and go to state 32
    EQUALCOMP       shift and go to state 33
    GREATER_THAN_EQUAL shift and go to state 34
    LESS_THAN_EQUAL shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    NOTEQUAL        shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 161

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .

    NOT             reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INT             reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOAT           reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    BREAK           reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    PRINT           reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IF              reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    WHILE           reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FOR             reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    VOID            reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    $end            reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RBRACE          reduce using rule 44 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)


state 162

    (48) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 48 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)


state 163

    (44) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement
    (43) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 164


state 164

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (43) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (10) legal -> . expression SEMICOLON legal
    (11) legal -> . assign SEMICOLON legal
    (12) legal -> . print SEMICOLON legal
    (13) legal -> . if_statement legal
    (14) legal -> . if_else_statement legal
    (15) legal -> . while_statement legal
    (16) legal -> . for_statement legal
    (17) legal -> . empty
    (25) expression -> . expression ADD expression
    (26) expression -> . expression SUBTRACT expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression EQUALCOMP expression
    (31) expression -> . expression GREATER_THAN_EQUAL expression
    (32) expression -> . expression LESS_THAN_EQUAL expression
    (33) expression -> . expression GREATER_THAN expression
    (34) expression -> . expression LESS_THAN expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . INT
    (40) expression -> . FLOAT
    (41) expression -> . CONTINUE
    (42) expression -> . BREAK
    (57) expression -> . IDENTIFIER
    (18) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (19) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (20) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (21) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (22) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (23) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (24) print -> . PRINT LPAREN expression RPAREN
    (43) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (44) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (46) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (47) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (48) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) empty -> .

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    IDENTIFIER      shift and go to state 16
    INTTYPE         shift and go to state 83
    FLOATTYPE       shift and go to state 84
    CHARTYPE        shift and go to state 85
    STRINGTYPE      shift and go to state 86
    PRINT           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    RBRACE          reduce using rule 58 (empty -> .)

    expression                     shift and go to state 121
    legal                          shift and go to state 165
    if_else_statement              shift and go to state 123
    if_statement                   shift and go to state 124
    assign                         shift and go to state 125
    print                          shift and go to state 126
    while_statement                shift and go to state 127
    for_statement                  shift and go to state 128
    empty                          shift and go to state 129

state 165

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement
    (43) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 166


state 166

    (44) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (45) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (46) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement
    (43) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .

    ELSE            shift and go to state 147
    NOT             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 43 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 48 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 48 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for EXP in state 48 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 48 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 48 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 48 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for ADD in state 71 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for EXP in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 71 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for ADD in state 72 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for EXP in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 72 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: reduce/reduce conflict in state 94 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 94
WARNING: reduce/reduce conflict in state 97 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 97
