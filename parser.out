Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression SEMICOLON ka
Rule 2     ka -> assign SEMICOLON ka
Rule 3     ka -> print SEMICOLON ka
Rule 4     ka -> return SEMICOLON ka
Rule 5     ka -> if_statement ka
Rule 6     ka -> if_else_statement ka
Rule 7     ka -> while_statement ka
Rule 8     ka -> for_statement ka
Rule 9     ka -> function_statement ka
Rule 10    ka -> comment ka
Rule 11    ka -> empty
Rule 12    legal -> expression SEMICOLON legal
Rule 13    legal -> assign SEMICOLON legal
Rule 14    legal -> print SEMICOLON legal
Rule 15    legal -> if_statement legal
Rule 16    legal -> if_else_statement legal
Rule 17    legal -> while_statement legal
Rule 18    legal -> for_statement legal
Rule 19    legal -> empty
Rule 20    comment -> COMMENT
Rule 21    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 22    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 23    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 24    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 25    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 26    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 27    print -> PRINT LPAREN expression RPAREN
Rule 28    return -> RETURN expression
Rule 29    return -> RETURN IDENTIFIER
Rule 30    expression -> expression ADD expression
Rule 31    expression -> expression SUBTRACT expression
Rule 32    expression -> expression MULTIPLY expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    expression -> expression EXP expression
Rule 35    expression -> expression EQUALCOMP expression
Rule 36    expression -> expression GREATER_THAN_EQUAL expression
Rule 37    expression -> expression LESS_THAN_EQUAL expression
Rule 38    expression -> expression GREATER_THAN expression
Rule 39    expression -> expression LESS_THAN expression
Rule 40    expression -> expression NOTEQUAL expression
Rule 41    expression -> NOT expression
Rule 42    expression -> expression AND expression
Rule 43    expression -> expression OR expression
Rule 44    expression -> INT
Rule 45    expression -> FLOAT
Rule 46    expression -> CONTINUE
Rule 47    expression -> BREAK
Rule 48    if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE
Rule 49    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
Rule 50    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
Rule 51    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
Rule 52    while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE
Rule 53    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
Rule 54    type_identifier -> INTTYPE IDENTIFIER
Rule 55    type_identifier -> CHARTYPE IDENTIFIER
Rule 56    type_identifier -> FLOATTYPE IDENTIFIER
Rule 57    type_identifier -> STRINGTYPE IDENTIFIER
Rule 58    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 59    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 60    function_input -> type_identifier COMMA function_input
Rule 61    function_input -> type_identifier
Rule 62    expression -> IDENTIFIER
Rule 63    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 30
AND                  : 42
BREAK                : 47
CHAR                 : 24
CHARTYPE             : 24 55
COMMA                : 60
COMMENT              : 20
CONTINUE             : 46
DIVIDE               : 33
ELSE                 : 49 50 51
EQUAL                : 21 22 23 24 25 26
EQUALCOMP            : 35
EXP                  : 34
FLOAT                : 25 45
FLOATTYPE            : 23 25 56
FOR                  : 53
GREATER_THAN         : 38
GREATER_THAN_EQUAL   : 36
IDENTIFIER           : 21 22 23 24 25 26 29 54 55 56 57 59 62
IF                   : 48 49 50 51
INT                  : 21 44
INTTYPE              : 21 22 54
LBRACE               : 48 49 49 50 51 52 53 58 59
LESS_THAN            : 39
LESS_THAN_EQUAL      : 37
LPAREN               : 27 48 49 50 51 52 53 58 59
MULTIPLY             : 32
NOT                  : 41
NOTEQUAL             : 40
OR                   : 43
PRINT                : 27
RBRACE               : 48 49 49 50 51 52 53 58 59
RETURN               : 28 29
RPAREN               : 27 48 49 50 51 52 53 58 59
SEMICOLON            : 1 2 3 4 12 13 14 53 53
STRING               : 26
STRINGTYPE           : 26 57
SUBTRACT             : 31
VOID                 : 59
WHILE                : 52
error                : 

Nonterminals, with rules where they appear

assign               : 2 13 53 53
comment              : 10
empty                : 11 19
expression           : 1 12 22 23 27 28 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 42 43 43 48 49 50 51 52 53
for_statement        : 8 18
function_input       : 58 59 60
function_statement   : 9
if_else_statement    : 6 16 50
if_statement         : 5 15 51
ka                   : 1 2 3 4 5 6 7 8 9 10 0
legal                : 12 13 14 15 16 17 18 48 49 49 50 51 52 53 58 59
print                : 3 14
return               : 4
type_identifier      : 58 60 61
while_statement      : 7 17

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . SEMICOLON ka
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 31
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 3

    (2) ka -> assign . SEMICOLON ka

    SEMICOLON       shift and go to state 45


state 4

    (3) ka -> print . SEMICOLON ka

    SEMICOLON       shift and go to state 46


state 5

    (4) ka -> return . SEMICOLON ka

    SEMICOLON       shift and go to state 47


state 6

    (5) ka -> if_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    if_statement                   shift and go to state 6
    ka                             shift and go to state 48
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 7

    (6) ka -> if_else_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    if_else_statement              shift and go to state 7
    ka                             shift and go to state 49
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 8

    (7) ka -> while_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    while_statement                shift and go to state 8
    ka                             shift and go to state 50
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 9

    (8) ka -> for_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    for_statement                  shift and go to state 9
    ka                             shift and go to state 51
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 10

    (9) ka -> function_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    function_statement             shift and go to state 10
    ka                             shift and go to state 52
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 11

    (10) ka -> comment . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    comment                        shift and go to state 11
    ka                             shift and go to state 53
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 12

    (11) ka -> empty .

    $end            reduce using rule 11 (ka -> empty .)


state 13

    (41) expression -> NOT . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 54

state 14

    (44) expression -> INT .

    SEMICOLON       reduce using rule 44 (expression -> INT .)
    ADD             reduce using rule 44 (expression -> INT .)
    SUBTRACT        reduce using rule 44 (expression -> INT .)
    MULTIPLY        reduce using rule 44 (expression -> INT .)
    DIVIDE          reduce using rule 44 (expression -> INT .)
    EXP             reduce using rule 44 (expression -> INT .)
    EQUALCOMP       reduce using rule 44 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 44 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 44 (expression -> INT .)
    GREATER_THAN    reduce using rule 44 (expression -> INT .)
    LESS_THAN       reduce using rule 44 (expression -> INT .)
    NOTEQUAL        reduce using rule 44 (expression -> INT .)
    AND             reduce using rule 44 (expression -> INT .)
    OR              reduce using rule 44 (expression -> INT .)
    RPAREN          reduce using rule 44 (expression -> INT .)


state 15

    (45) expression -> FLOAT .

    SEMICOLON       reduce using rule 45 (expression -> FLOAT .)
    ADD             reduce using rule 45 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 45 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 45 (expression -> FLOAT .)
    DIVIDE          reduce using rule 45 (expression -> FLOAT .)
    EXP             reduce using rule 45 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 45 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 45 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 45 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 45 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 45 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 45 (expression -> FLOAT .)
    AND             reduce using rule 45 (expression -> FLOAT .)
    OR              reduce using rule 45 (expression -> FLOAT .)
    RPAREN          reduce using rule 45 (expression -> FLOAT .)


state 16

    (46) expression -> CONTINUE .

    SEMICOLON       reduce using rule 46 (expression -> CONTINUE .)
    ADD             reduce using rule 46 (expression -> CONTINUE .)
    SUBTRACT        reduce using rule 46 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 46 (expression -> CONTINUE .)
    DIVIDE          reduce using rule 46 (expression -> CONTINUE .)
    EXP             reduce using rule 46 (expression -> CONTINUE .)
    EQUALCOMP       reduce using rule 46 (expression -> CONTINUE .)
    GREATER_THAN_EQUAL reduce using rule 46 (expression -> CONTINUE .)
    LESS_THAN_EQUAL reduce using rule 46 (expression -> CONTINUE .)
    GREATER_THAN    reduce using rule 46 (expression -> CONTINUE .)
    LESS_THAN       reduce using rule 46 (expression -> CONTINUE .)
    NOTEQUAL        reduce using rule 46 (expression -> CONTINUE .)
    AND             reduce using rule 46 (expression -> CONTINUE .)
    OR              reduce using rule 46 (expression -> CONTINUE .)
    RPAREN          reduce using rule 46 (expression -> CONTINUE .)


state 17

    (47) expression -> BREAK .

    SEMICOLON       reduce using rule 47 (expression -> BREAK .)
    ADD             reduce using rule 47 (expression -> BREAK .)
    SUBTRACT        reduce using rule 47 (expression -> BREAK .)
    MULTIPLY        reduce using rule 47 (expression -> BREAK .)
    DIVIDE          reduce using rule 47 (expression -> BREAK .)
    EXP             reduce using rule 47 (expression -> BREAK .)
    EQUALCOMP       reduce using rule 47 (expression -> BREAK .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> BREAK .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> BREAK .)
    GREATER_THAN    reduce using rule 47 (expression -> BREAK .)
    LESS_THAN       reduce using rule 47 (expression -> BREAK .)
    NOTEQUAL        reduce using rule 47 (expression -> BREAK .)
    AND             reduce using rule 47 (expression -> BREAK .)
    OR              reduce using rule 47 (expression -> BREAK .)
    RPAREN          reduce using rule 47 (expression -> BREAK .)


state 18

    (62) expression -> IDENTIFIER .

    SEMICOLON       reduce using rule 62 (expression -> IDENTIFIER .)
    ADD             reduce using rule 62 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 62 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 62 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 62 (expression -> IDENTIFIER .)
    EXP             reduce using rule 62 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 62 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 62 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 62 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 62 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 62 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 62 (expression -> IDENTIFIER .)
    AND             reduce using rule 62 (expression -> IDENTIFIER .)
    OR              reduce using rule 62 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 62 (expression -> IDENTIFIER .)


state 19

    (21) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (22) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (54) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 55


state 20

    (23) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (56) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 21

    (24) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (55) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 22

    (26) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (57) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 23

    (27) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 59


state 24

    (28) return -> RETURN . expression
    (29) return -> RETURN . IDENTIFIER
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 61
    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17

    expression                     shift and go to state 60

state 25

    (48) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement

    LPAREN          shift and go to state 62


state 26

    (52) while_statement -> WHILE . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 63


state 27

    (53) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 64


state 28

    (58) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 65


state 29

    (59) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE

    IDENTIFIER      shift and go to state 66


state 30

    (20) comment -> COMMENT .

    NOT             reduce using rule 20 (comment -> COMMENT .)
    INT             reduce using rule 20 (comment -> COMMENT .)
    FLOAT           reduce using rule 20 (comment -> COMMENT .)
    CONTINUE        reduce using rule 20 (comment -> COMMENT .)
    BREAK           reduce using rule 20 (comment -> COMMENT .)
    IDENTIFIER      reduce using rule 20 (comment -> COMMENT .)
    INTTYPE         reduce using rule 20 (comment -> COMMENT .)
    FLOATTYPE       reduce using rule 20 (comment -> COMMENT .)
    CHARTYPE        reduce using rule 20 (comment -> COMMENT .)
    STRINGTYPE      reduce using rule 20 (comment -> COMMENT .)
    PRINT           reduce using rule 20 (comment -> COMMENT .)
    RETURN          reduce using rule 20 (comment -> COMMENT .)
    IF              reduce using rule 20 (comment -> COMMENT .)
    WHILE           reduce using rule 20 (comment -> COMMENT .)
    FOR             reduce using rule 20 (comment -> COMMENT .)
    VOID            reduce using rule 20 (comment -> COMMENT .)
    COMMENT         reduce using rule 20 (comment -> COMMENT .)
    $end            reduce using rule 20 (comment -> COMMENT .)


state 31

    (1) ka -> expression SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 67
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 32

    (30) expression -> expression ADD . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 68

state 33

    (31) expression -> expression SUBTRACT . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 69

state 34

    (32) expression -> expression MULTIPLY . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 70

state 35

    (33) expression -> expression DIVIDE . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 71

state 36

    (34) expression -> expression EXP . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 72

state 37

    (35) expression -> expression EQUALCOMP . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 73

state 38

    (36) expression -> expression GREATER_THAN_EQUAL . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 74

state 39

    (37) expression -> expression LESS_THAN_EQUAL . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 75

state 40

    (38) expression -> expression GREATER_THAN . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 76

state 41

    (39) expression -> expression LESS_THAN . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 77

state 42

    (40) expression -> expression NOTEQUAL . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 78

state 43

    (42) expression -> expression AND . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 79

state 44

    (43) expression -> expression OR . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 80

state 45

    (2) ka -> assign SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 81
    expression                     shift and go to state 2
    print                          shift and go to state 4
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 46

    (3) ka -> print SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    print                          shift and go to state 4
    ka                             shift and go to state 82
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    return                         shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 47

    (4) ka -> return SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . return SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (28) return -> . RETURN expression
    (29) return -> . RETURN IDENTIFIER
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (58) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (59) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (20) comment -> . COMMENT
    (63) empty -> .
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    VOID            shift and go to state 29
    COMMENT         shift and go to state 30
    $end            reduce using rule 63 (empty -> .)

    return                         shift and go to state 5
    ka                             shift and go to state 83
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 28

state 48

    (5) ka -> if_statement ka .

    $end            reduce using rule 5 (ka -> if_statement ka .)


state 49

    (6) ka -> if_else_statement ka .

    $end            reduce using rule 6 (ka -> if_else_statement ka .)


state 50

    (7) ka -> while_statement ka .

    $end            reduce using rule 7 (ka -> while_statement ka .)


state 51

    (8) ka -> for_statement ka .

    $end            reduce using rule 8 (ka -> for_statement ka .)


state 52

    (9) ka -> function_statement ka .

    $end            reduce using rule 9 (ka -> function_statement ka .)


state 53

    (10) ka -> comment ka .

    $end            reduce using rule 10 (ka -> comment ka .)


state 54

    (41) expression -> NOT expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 41 (expression -> NOT expression .)
    RPAREN          reduce using rule 41 (expression -> NOT expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 41 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 41 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 41 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 41 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 41 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 41 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 41 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 41 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 41 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 41 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 41 (expression -> NOT expression .) ]


state 55

    (21) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (22) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (54) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 84
    LPAREN          reduce using rule 54 (type_identifier -> INTTYPE IDENTIFIER .)


state 56

    (23) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (56) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 85
    LPAREN          reduce using rule 56 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 57

    (24) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (55) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 86
    LPAREN          reduce using rule 55 (type_identifier -> CHARTYPE IDENTIFIER .)


state 58

    (26) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (57) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 87
    LPAREN          reduce using rule 57 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 59

    (27) print -> PRINT LPAREN . expression RPAREN
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 88

state 60

    (28) return -> RETURN expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 28 (return -> RETURN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 61

    (29) return -> RETURN IDENTIFIER .
    (62) expression -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (return -> RETURN IDENTIFIER .)
    SEMICOLON       reduce using rule 29 (return -> RETURN IDENTIFIER .)
    ADD             reduce using rule 62 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 62 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 62 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 62 (expression -> IDENTIFIER .)
    EXP             reduce using rule 62 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 62 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 62 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 62 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 62 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 62 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 62 (expression -> IDENTIFIER .)
    AND             reduce using rule 62 (expression -> IDENTIFIER .)
    OR              reduce using rule 62 (expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 62 (expression -> IDENTIFIER .) ]


state 62

    (48) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 89

state 63

    (52) while_statement -> WHILE LPAREN . expression RPAREN LBRACE legal RBRACE
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 90

state 64

    (53) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95

    assign                         shift and go to state 91

state 65

    (58) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE legal RBRACE
    (60) function_input -> . type_identifier COMMA function_input
    (61) function_input -> . type_identifier
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    type_identifier                shift and go to state 96
    function_input                 shift and go to state 97

state 66

    (59) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 102


state 67

    (1) ka -> expression SEMICOLON ka .

    $end            reduce using rule 1 (ka -> expression SEMICOLON ka .)


state 68

    (30) expression -> expression ADD expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 30 (expression -> expression ADD expression .)
    ADD             reduce using rule 30 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 30 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 30 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 30 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 30 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 30 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 30 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 30 (expression -> expression ADD expression .)
    AND             reduce using rule 30 (expression -> expression ADD expression .)
    OR              reduce using rule 30 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 30 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! MULTIPLY        [ reduce using rule 30 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 30 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 69

    (31) expression -> expression SUBTRACT expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 31 (expression -> expression SUBTRACT expression .)
    ADD             reduce using rule 31 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 31 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 31 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 31 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 31 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 31 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 31 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 31 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 31 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 31 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 31 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! MULTIPLY        [ reduce using rule 31 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 31 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 70

    (32) expression -> expression MULTIPLY expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    ADD             reduce using rule 32 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 32 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 32 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 32 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 32 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 32 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 32 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 32 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 32 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 32 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 71

    (33) expression -> expression DIVIDE expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 33 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 33 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 33 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 33 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 33 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 33 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 33 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 33 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 33 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 33 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 33 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 72

    (34) expression -> expression EXP expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression EXP expression .)
    ADD             reduce using rule 34 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 34 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 34 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 34 (expression -> expression EXP expression .)
    EXP             reduce using rule 34 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 34 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 34 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 34 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 34 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 34 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 34 (expression -> expression EXP expression .)
    AND             reduce using rule 34 (expression -> expression EXP expression .)
    OR              reduce using rule 34 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 34 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 32 ]
  ! SUBTRACT        [ shift and go to state 33 ]
  ! MULTIPLY        [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 73

    (35) expression -> expression EQUALCOMP expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    EQUALCOMP       reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 35 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 35 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 35 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 35 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 74

    (36) expression -> expression GREATER_THAN_EQUAL expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 36 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 75

    (37) expression -> expression LESS_THAN_EQUAL expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 37 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 76

    (38) expression -> expression GREATER_THAN expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    EQUALCOMP       reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 38 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 38 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 38 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 77

    (39) expression -> expression LESS_THAN expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression LESS_THAN expression .)
    EQUALCOMP       reduce using rule 39 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 39 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 39 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 39 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 39 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 39 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 39 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 39 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 39 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 39 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 78

    (40) expression -> expression NOTEQUAL expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    EQUALCOMP       reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 40 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36

  ! ADD             [ reduce using rule 40 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 40 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 40 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 37 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 38 ]
  ! LESS_THAN_EQUAL [ shift and go to state 39 ]
  ! GREATER_THAN    [ shift and go to state 40 ]
  ! LESS_THAN       [ shift and go to state 41 ]
  ! NOTEQUAL        [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 79

    (42) expression -> expression AND expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 42 (expression -> expression AND expression .)
    RPAREN          reduce using rule 42 (expression -> expression AND expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression AND expression .) ]


state 80

    (43) expression -> expression OR expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 43 (expression -> expression OR expression .)
    RPAREN          reduce using rule 43 (expression -> expression OR expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44

  ! ADD             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression OR expression .) ]


state 81

    (2) ka -> assign SEMICOLON ka .

    $end            reduce using rule 2 (ka -> assign SEMICOLON ka .)


state 82

    (3) ka -> print SEMICOLON ka .

    $end            reduce using rule 3 (ka -> print SEMICOLON ka .)


state 83

    (4) ka -> return SEMICOLON ka .

    $end            reduce using rule 4 (ka -> return SEMICOLON ka .)


state 84

    (21) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (22) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    INT             shift and go to state 103
    NOT             shift and go to state 13
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 104

state 85

    (23) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (25) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    FLOAT           shift and go to state 106
    NOT             shift and go to state 13
    INT             shift and go to state 14
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 105

state 86

    (24) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 107


state 87

    (26) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 108


state 88

    (27) print -> PRINT LPAREN expression . RPAREN
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 109
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 89

    (48) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 110
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 90

    (52) while_statement -> WHILE LPAREN expression . RPAREN LBRACE legal RBRACE
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 111
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 91

    (53) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    SEMICOLON       shift and go to state 112


state 92

    (21) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (22) assign -> INTTYPE . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 113


state 93

    (23) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT

    IDENTIFIER      shift and go to state 114


state 94

    (24) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR

    IDENTIFIER      shift and go to state 115


state 95

    (26) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING

    IDENTIFIER      shift and go to state 116


state 96

    (60) function_input -> type_identifier . COMMA function_input
    (61) function_input -> type_identifier .

    COMMA           shift and go to state 117
    RPAREN          reduce using rule 61 (function_input -> type_identifier .)


state 97

    (58) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 118


state 98

    (54) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 119


state 99

    (55) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 100

    (56) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 121


state 101

    (57) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 122


state 102

    (59) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE legal RBRACE
    (60) function_input -> . type_identifier COMMA function_input
    (61) function_input -> . type_identifier
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    function_input                 shift and go to state 123
    type_identifier                shift and go to state 96

state 103

    (21) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (44) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 21 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 21 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 21 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 44 (expression -> INT .)
    SUBTRACT        reduce using rule 44 (expression -> INT .)
    MULTIPLY        reduce using rule 44 (expression -> INT .)
    DIVIDE          reduce using rule 44 (expression -> INT .)
    EXP             reduce using rule 44 (expression -> INT .)
    EQUALCOMP       reduce using rule 44 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 44 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 44 (expression -> INT .)
    GREATER_THAN    reduce using rule 44 (expression -> INT .)
    LESS_THAN       reduce using rule 44 (expression -> INT .)
    NOTEQUAL        reduce using rule 44 (expression -> INT .)
    AND             reduce using rule 44 (expression -> INT .)
    OR              reduce using rule 44 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 44 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 44 (expression -> INT .) ]


state 104

    (22) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 22 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 22 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 105

    (23) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       reduce using rule 23 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 23 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 106

    (25) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (45) expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 45 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 45 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 45 (expression -> FLOAT .)
    DIVIDE          reduce using rule 45 (expression -> FLOAT .)
    EXP             reduce using rule 45 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 45 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 45 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 45 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 45 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 45 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 45 (expression -> FLOAT .)
    AND             reduce using rule 45 (expression -> FLOAT .)
    OR              reduce using rule 45 (expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 45 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> FLOAT .) ]


state 107

    (24) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    SEMICOLON       reduce using rule 24 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 24 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 108

    (26) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    SEMICOLON       reduce using rule 26 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 26 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 109

    (27) print -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 27 (print -> PRINT LPAREN expression RPAREN .)


state 110

    (48) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE
    (49) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement

    LBRACE          shift and go to state 124


state 111

    (52) while_statement -> WHILE LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 125


state 112

    (53) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 126

state 113

    (21) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (22) assign -> INTTYPE IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 84


state 114

    (23) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT

    EQUAL           shift and go to state 85


state 115

    (24) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR

    EQUAL           shift and go to state 86


state 116

    (26) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING

    EQUAL           shift and go to state 87


state 117

    (60) function_input -> type_identifier COMMA . function_input
    (60) function_input -> . type_identifier COMMA function_input
    (61) function_input -> . type_identifier
    (54) type_identifier -> . INTTYPE IDENTIFIER
    (55) type_identifier -> . CHARTYPE IDENTIFIER
    (56) type_identifier -> . FLOATTYPE IDENTIFIER
    (57) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    type_identifier                shift and go to state 96
    function_input                 shift and go to state 127

state 118

    (58) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 128


state 119

    (54) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 54 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 54 (type_identifier -> INTTYPE IDENTIFIER .)


state 120

    (55) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 55 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 55 (type_identifier -> CHARTYPE IDENTIFIER .)


state 121

    (56) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 56 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 56 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 122

    (57) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 57 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 57 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 123

    (59) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 129


state 124

    (48) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    expression                     shift and go to state 130
    legal                          shift and go to state 131
    if_else_statement              shift and go to state 132
    if_statement                   shift and go to state 133
    assign                         shift and go to state 134
    print                          shift and go to state 135
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 125

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    expression                     shift and go to state 130
    legal                          shift and go to state 139
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 126

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE legal RBRACE
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 140
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 127

    (60) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 60 (function_input -> type_identifier COMMA function_input .)


state 128

    (58) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    legal                          shift and go to state 141
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 129

    (59) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 142


state 130

    (12) legal -> expression . SEMICOLON legal
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    SEMICOLON       shift and go to state 143
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 131

    (48) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE
    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement

    RBRACE          shift and go to state 144


state 132

    (16) legal -> if_else_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    if_else_statement              shift and go to state 132
    legal                          shift and go to state 145
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 133

    (15) legal -> if_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    if_statement                   shift and go to state 133
    legal                          shift and go to state 146
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 134

    (13) legal -> assign . SEMICOLON legal

    SEMICOLON       shift and go to state 147


state 135

    (14) legal -> print . SEMICOLON legal

    SEMICOLON       shift and go to state 148


state 136

    (17) legal -> while_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    while_statement                shift and go to state 136
    legal                          shift and go to state 149
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 137

    (18) legal -> for_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    for_statement                  shift and go to state 137
    legal                          shift and go to state 150
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    empty                          shift and go to state 138

state 138

    (19) legal -> empty .

    RBRACE          reduce using rule 19 (legal -> empty .)


state 139

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 151


state 140

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE legal RBRACE
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95

    assign                         shift and go to state 152

state 141

    (58) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 153


state 142

    (59) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    legal                          shift and go to state 154
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 143

    (12) legal -> expression SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    expression                     shift and go to state 130
    legal                          shift and go to state 155
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 144

    (48) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .
    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement

    NOT             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    ELSE            shift and go to state 156


state 145

    (16) legal -> if_else_statement legal .

    RBRACE          reduce using rule 16 (legal -> if_else_statement legal .)


state 146

    (15) legal -> if_statement legal .

    RBRACE          reduce using rule 15 (legal -> if_statement legal .)


state 147

    (13) legal -> assign SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    assign                         shift and go to state 134
    legal                          shift and go to state 157
    expression                     shift and go to state 130
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 148

    (14) legal -> print SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    print                          shift and go to state 135
    legal                          shift and go to state 158
    expression                     shift and go to state 130
    assign                         shift and go to state 134
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 149

    (17) legal -> while_statement legal .

    RBRACE          reduce using rule 17 (legal -> while_statement legal .)


state 150

    (18) legal -> for_statement legal .

    RBRACE          reduce using rule 18 (legal -> for_statement legal .)


state 151

    (52) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 52 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)


state 152

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 159


state 153

    (58) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 58 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 154

    (59) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 160


state 155

    (12) legal -> expression SEMICOLON legal .

    RBRACE          reduce using rule 12 (legal -> expression SEMICOLON legal .)


state 156

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_statement
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE

    LBRACE          shift and go to state 162
    IF              shift and go to state 161

    if_else_statement              shift and go to state 163
    if_statement                   shift and go to state 164

state 157

    (13) legal -> assign SEMICOLON legal .

    RBRACE          reduce using rule 13 (legal -> assign SEMICOLON legal .)


state 158

    (14) legal -> print SEMICOLON legal .

    RBRACE          reduce using rule 14 (legal -> print SEMICOLON legal .)


state 159

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 165


state 160

    (59) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 59 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 161

    (49) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (48) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 166


state 162

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    expression                     shift and go to state 130
    legal                          shift and go to state 167
    assign                         shift and go to state 134
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 163

    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .

    NOT             reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INT             reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CONTINUE        reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    BREAK           reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RETURN          reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IF              reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    COMMENT         reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    $end            reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RBRACE          reduce using rule 50 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)


state 164

    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .

    NOT             reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INT             reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CONTINUE        reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    BREAK           reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    PRINT           reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RETURN          reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IF              reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    WHILE           reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FOR             reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    VOID            reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    COMMENT         reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    $end            reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RBRACE          reduce using rule 51 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)


state 165

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    assign                         shift and go to state 134
    expression                     shift and go to state 130
    legal                          shift and go to state 168
    print                          shift and go to state 135
    if_statement                   shift and go to state 133
    if_else_statement              shift and go to state 132
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 166

    (49) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (48) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 169

state 167

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal . RBRACE

    RBRACE          shift and go to state 170


state 168

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 171


state 169

    (49) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (48) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (30) expression -> expression . ADD expression
    (31) expression -> expression . SUBTRACT expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EXP expression
    (35) expression -> expression . EQUALCOMP expression
    (36) expression -> expression . GREATER_THAN_EQUAL expression
    (37) expression -> expression . LESS_THAN_EQUAL expression
    (38) expression -> expression . GREATER_THAN expression
    (39) expression -> expression . LESS_THAN expression
    (40) expression -> expression . NOTEQUAL expression
    (42) expression -> expression . AND expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 172
    ADD             shift and go to state 32
    SUBTRACT        shift and go to state 33
    MULTIPLY        shift and go to state 34
    DIVIDE          shift and go to state 35
    EXP             shift and go to state 36
    EQUALCOMP       shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    NOTEQUAL        shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44


state 170

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .

    NOT             reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INT             reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOAT           reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    BREAK           reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    PRINT           reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RETURN          reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IF              reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    WHILE           reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FOR             reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    VOID            reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    COMMENT         reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    $end            reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RBRACE          reduce using rule 49 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)


state 171

    (53) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 53 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)


state 172

    (49) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement
    (48) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 173


state 173

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (48) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . if_statement legal
    (16) legal -> . if_else_statement legal
    (17) legal -> . while_statement legal
    (18) legal -> . for_statement legal
    (19) legal -> . empty
    (30) expression -> . expression ADD expression
    (31) expression -> . expression SUBTRACT expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EXP expression
    (35) expression -> . expression EQUALCOMP expression
    (36) expression -> . expression GREATER_THAN_EQUAL expression
    (37) expression -> . expression LESS_THAN_EQUAL expression
    (38) expression -> . expression GREATER_THAN expression
    (39) expression -> . expression LESS_THAN expression
    (40) expression -> . expression NOTEQUAL expression
    (41) expression -> . NOT expression
    (42) expression -> . expression AND expression
    (43) expression -> . expression OR expression
    (44) expression -> . INT
    (45) expression -> . FLOAT
    (46) expression -> . CONTINUE
    (47) expression -> . BREAK
    (62) expression -> . IDENTIFIER
    (21) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (22) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (23) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (24) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (26) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (27) print -> . PRINT LPAREN expression RPAREN
    (48) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (49) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (51) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (52) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (53) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (63) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    RBRACE          reduce using rule 63 (empty -> .)

    expression                     shift and go to state 130
    legal                          shift and go to state 174
    if_else_statement              shift and go to state 132
    if_statement                   shift and go to state 133
    assign                         shift and go to state 134
    print                          shift and go to state 135
    while_statement                shift and go to state 136
    for_statement                  shift and go to state 137
    empty                          shift and go to state 138

state 174

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement
    (48) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 175


state 175

    (49) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (50) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (51) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement
    (48) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .

    ELSE            shift and go to state 156
    NOT             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 48 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 54 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 54 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for EXP in state 54 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 54 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 54 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for AND in state 54 resolved as shift
WARNING: shift/reduce conflict for OR in state 54 resolved as shift
WARNING: shift/reduce conflict for ADD in state 79 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for EXP in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for ADD in state 80 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (return -> RETURN IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 61
WARNING: reduce/reduce conflict in state 103 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 103
WARNING: reduce/reduce conflict in state 106 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 106
