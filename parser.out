Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression SEMICOLON ka
Rule 2     ka -> assign SEMICOLON ka
Rule 3     ka -> print SEMICOLON ka
Rule 4     ka -> input SEMICOLON ka
Rule 5     ka -> return SEMICOLON legal
Rule 6     ka -> if_statement ka
Rule 7     ka -> if_else_statement ka
Rule 8     ka -> while_statement ka
Rule 9     ka -> for_statement ka
Rule 10    ka -> function_statement ka
Rule 11    ka -> comment ka
Rule 12    ka -> empty
Rule 13    legal -> expression SEMICOLON legal
Rule 14    legal -> assign SEMICOLON legal
Rule 15    legal -> print SEMICOLON legal
Rule 16    legal -> input SEMICOLON legal
Rule 17    legal -> return SEMICOLON legal
Rule 18    legal -> if_statement legal
Rule 19    legal -> if_else_statement legal
Rule 20    legal -> while_statement legal
Rule 21    legal -> for_statement legal
Rule 22    legal -> comment ka
Rule 23    legal -> empty
Rule 24    comment -> COMMENT
Rule 25    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 26    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 27    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 28    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 29    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 30    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 31    assign -> INTTYPE IDENTIFIER
Rule 32    assign -> FLOATTYPE IDENTIFIER
Rule 33    assign -> CHARTYPE IDENTIFIER
Rule 34    assign -> STRINGTYPE IDENTIFIER
Rule 35    assign -> IDENTIFIER EQUAL expression
Rule 36    print -> PRINT LPAREN expression RPAREN
Rule 37    print -> PRINT LPAREN STRING RPAREN
Rule 38    input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN
Rule 39    return -> RETURN expression
Rule 40    return -> RETURN INT
Rule 41    return -> RETURN IDENTIFIER
Rule 42    expression -> expression ADD expression
Rule 43    expression -> expression SUBTRACT expression
Rule 44    expression -> expression MULTIPLY expression
Rule 45    expression -> expression DIVIDE expression
Rule 46    expression -> expression EXP expression
Rule 47    expression -> LPAREN expression RPAREN
Rule 48    expression -> expression EQUALCOMP expression
Rule 49    expression -> expression GREATER_THAN_EQUAL expression
Rule 50    expression -> expression LESS_THAN_EQUAL expression
Rule 51    expression -> expression GREATER_THAN expression
Rule 52    expression -> expression LESS_THAN expression
Rule 53    expression -> expression NOTEQUAL expression
Rule 54    expression -> NOT expression
Rule 55    expression -> expression AND expression
Rule 56    expression -> expression OR expression
Rule 57    expression -> INT
Rule 58    expression -> FLOAT
Rule 59    expression -> CONTINUE
Rule 60    expression -> BREAK
Rule 61    if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE
Rule 62    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
Rule 63    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
Rule 64    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
Rule 65    while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE
Rule 66    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
Rule 67    type_identifier -> INTTYPE IDENTIFIER
Rule 68    type_identifier -> CHARTYPE IDENTIFIER
Rule 69    type_identifier -> FLOATTYPE IDENTIFIER
Rule 70    type_identifier -> STRINGTYPE IDENTIFIER
Rule 71    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 72    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 73    function_input -> type_identifier COMMA function_input
Rule 74    function_input -> type_identifier
Rule 75    function_input -> empty
Rule 76    expression -> IDENTIFIER LPAREN function_call_input RPAREN
Rule 77    function_call_input -> IDENTIFIER COMMA IDENTIFIER
Rule 78    function_call_input -> IDENTIFIER COMMA expression
Rule 79    function_call_input -> expression COMMA IDENTIFIER
Rule 80    function_call_input -> expression COMMA expression
Rule 81    function_call_input -> IDENTIFIER
Rule 82    function_call_input -> expression
Rule 83    function_call_input -> empty
Rule 84    expression -> IDENTIFIER
Rule 85    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 42
AND                  : 55
BREAK                : 60
CHAR                 : 28
CHARTYPE             : 28 33 68
COMMA                : 73 77 78 79 80
COMMENT              : 24
CONTINUE             : 59
DIVIDE               : 45
ELSE                 : 62 63 64
EQUAL                : 25 26 27 28 29 30 35 38
EQUALCOMP            : 48
EXP                  : 46
FLOAT                : 29 58
FLOATTYPE            : 27 29 32 69
FOR                  : 66
GREATER_THAN         : 51
GREATER_THAN_EQUAL   : 49
IDENTIFIER           : 25 26 27 28 29 30 31 32 33 34 35 38 41 67 68 69 70 72 76 77 77 78 79 81 84
IF                   : 61 62 63 64
INPUT                : 38
INT                  : 25 40 57
INTTYPE              : 25 26 31 67
LBRACE               : 61 62 62 63 64 65 66 71 72
LESS_THAN            : 52
LESS_THAN_EQUAL      : 50
LPAREN               : 36 37 38 47 61 62 63 64 65 66 71 72 76
MULTIPLY             : 44
NOT                  : 54
NOTEQUAL             : 53
OR                   : 56
PRINT                : 36 37
RBRACE               : 61 62 62 63 64 65 66 71 72
RETURN               : 39 40 41
RPAREN               : 36 37 38 47 61 62 63 64 65 66 71 72 76
SEMICOLON            : 1 2 3 4 5 13 14 15 16 17 66 66
STRING               : 30 37
STRINGTYPE           : 30 34 70
SUBTRACT             : 43
VOID                 : 72
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

assign               : 2 14 66 66
comment              : 11 22
empty                : 12 23 75 83
expression           : 1 13 26 27 35 36 39 42 42 43 43 44 44 45 45 46 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 55 55 56 56 61 62 63 64 65 66 78 79 80 80 82
for_statement        : 9 21
function_call_input  : 76
function_input       : 71 72 73
function_statement   : 10
if_else_statement    : 7 19 63
if_statement         : 6 18 64
input                : 4 16
ka                   : 1 2 3 4 6 7 8 9 10 11 22 0
legal                : 5 13 14 15 16 17 18 19 20 21 61 62 62 63 64 65 66 71 72
print                : 3 15
return               : 5 17
type_identifier      : 71 73 74
while_statement      : 8 20

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . SEMICOLON ka
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       shift and go to state 33
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 3

    (2) ka -> assign . SEMICOLON ka

    SEMICOLON       shift and go to state 47


state 4

    (3) ka -> print . SEMICOLON ka

    SEMICOLON       shift and go to state 48


state 5

    (4) ka -> input . SEMICOLON ka

    SEMICOLON       shift and go to state 49


state 6

    (5) ka -> return . SEMICOLON legal

    SEMICOLON       shift and go to state 50


state 7

    (6) ka -> if_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    if_statement                   shift and go to state 7
    ka                             shift and go to state 51
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 8

    (7) ka -> if_else_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    if_else_statement              shift and go to state 8
    ka                             shift and go to state 52
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 9

    (8) ka -> while_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    while_statement                shift and go to state 9
    ka                             shift and go to state 53
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 10

    (9) ka -> for_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    for_statement                  shift and go to state 10
    ka                             shift and go to state 54
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 11

    (10) ka -> function_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    function_statement             shift and go to state 11
    ka                             shift and go to state 55
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 12

    (11) ka -> comment . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    comment                        shift and go to state 12
    ka                             shift and go to state 56
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 13

    (12) ka -> empty .

    $end            reduce using rule 12 (ka -> empty .)
    RBRACE          reduce using rule 12 (ka -> empty .)


state 14

    (47) expression -> LPAREN . expression RPAREN
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 57

state 15

    (54) expression -> NOT . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 59

state 16

    (57) expression -> INT .

    SEMICOLON       reduce using rule 57 (expression -> INT .)
    ADD             reduce using rule 57 (expression -> INT .)
    SUBTRACT        reduce using rule 57 (expression -> INT .)
    MULTIPLY        reduce using rule 57 (expression -> INT .)
    DIVIDE          reduce using rule 57 (expression -> INT .)
    EXP             reduce using rule 57 (expression -> INT .)
    EQUALCOMP       reduce using rule 57 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    GREATER_THAN    reduce using rule 57 (expression -> INT .)
    LESS_THAN       reduce using rule 57 (expression -> INT .)
    NOTEQUAL        reduce using rule 57 (expression -> INT .)
    AND             reduce using rule 57 (expression -> INT .)
    OR              reduce using rule 57 (expression -> INT .)
    RPAREN          reduce using rule 57 (expression -> INT .)
    COMMA           reduce using rule 57 (expression -> INT .)


state 17

    (58) expression -> FLOAT .

    SEMICOLON       reduce using rule 58 (expression -> FLOAT .)
    ADD             reduce using rule 58 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 58 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 58 (expression -> FLOAT .)
    DIVIDE          reduce using rule 58 (expression -> FLOAT .)
    EXP             reduce using rule 58 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 58 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 58 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 58 (expression -> FLOAT .)
    AND             reduce using rule 58 (expression -> FLOAT .)
    OR              reduce using rule 58 (expression -> FLOAT .)
    RPAREN          reduce using rule 58 (expression -> FLOAT .)
    COMMA           reduce using rule 58 (expression -> FLOAT .)


state 18

    (59) expression -> CONTINUE .

    SEMICOLON       reduce using rule 59 (expression -> CONTINUE .)
    ADD             reduce using rule 59 (expression -> CONTINUE .)
    SUBTRACT        reduce using rule 59 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 59 (expression -> CONTINUE .)
    DIVIDE          reduce using rule 59 (expression -> CONTINUE .)
    EXP             reduce using rule 59 (expression -> CONTINUE .)
    EQUALCOMP       reduce using rule 59 (expression -> CONTINUE .)
    GREATER_THAN_EQUAL reduce using rule 59 (expression -> CONTINUE .)
    LESS_THAN_EQUAL reduce using rule 59 (expression -> CONTINUE .)
    GREATER_THAN    reduce using rule 59 (expression -> CONTINUE .)
    LESS_THAN       reduce using rule 59 (expression -> CONTINUE .)
    NOTEQUAL        reduce using rule 59 (expression -> CONTINUE .)
    AND             reduce using rule 59 (expression -> CONTINUE .)
    OR              reduce using rule 59 (expression -> CONTINUE .)
    RPAREN          reduce using rule 59 (expression -> CONTINUE .)
    COMMA           reduce using rule 59 (expression -> CONTINUE .)


state 19

    (60) expression -> BREAK .

    SEMICOLON       reduce using rule 60 (expression -> BREAK .)
    ADD             reduce using rule 60 (expression -> BREAK .)
    SUBTRACT        reduce using rule 60 (expression -> BREAK .)
    MULTIPLY        reduce using rule 60 (expression -> BREAK .)
    DIVIDE          reduce using rule 60 (expression -> BREAK .)
    EXP             reduce using rule 60 (expression -> BREAK .)
    EQUALCOMP       reduce using rule 60 (expression -> BREAK .)
    GREATER_THAN_EQUAL reduce using rule 60 (expression -> BREAK .)
    LESS_THAN_EQUAL reduce using rule 60 (expression -> BREAK .)
    GREATER_THAN    reduce using rule 60 (expression -> BREAK .)
    LESS_THAN       reduce using rule 60 (expression -> BREAK .)
    NOTEQUAL        reduce using rule 60 (expression -> BREAK .)
    AND             reduce using rule 60 (expression -> BREAK .)
    OR              reduce using rule 60 (expression -> BREAK .)
    RPAREN          reduce using rule 60 (expression -> BREAK .)
    COMMA           reduce using rule 60 (expression -> BREAK .)


state 20

    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .
    (35) assign -> IDENTIFIER . EQUAL expression
    (38) input -> IDENTIFIER . EQUAL INPUT LPAREN RPAREN

    LPAREN          shift and go to state 60
    SEMICOLON       reduce using rule 84 (expression -> IDENTIFIER .)
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 61


state 21

    (25) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (26) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (31) assign -> INTTYPE . IDENTIFIER
    (67) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 62


state 22

    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (29) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (32) assign -> FLOATTYPE . IDENTIFIER
    (69) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 63


state 23

    (28) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (33) assign -> CHARTYPE . IDENTIFIER
    (68) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 64


state 24

    (30) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (34) assign -> STRINGTYPE . IDENTIFIER
    (70) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 65


state 25

    (36) print -> PRINT . LPAREN expression RPAREN
    (37) print -> PRINT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 66


state 26

    (39) return -> RETURN . expression
    (40) return -> RETURN . INT
    (41) return -> RETURN . IDENTIFIER
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    INT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19

    expression                     shift and go to state 67

state 27

    (61) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement

    LPAREN          shift and go to state 70


state 28

    (65) while_statement -> WHILE . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 71


state 29

    (66) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 72


state 30

    (71) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 73


state 31

    (72) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE

    IDENTIFIER      shift and go to state 74


state 32

    (24) comment -> COMMENT .

    LPAREN          reduce using rule 24 (comment -> COMMENT .)
    NOT             reduce using rule 24 (comment -> COMMENT .)
    INT             reduce using rule 24 (comment -> COMMENT .)
    FLOAT           reduce using rule 24 (comment -> COMMENT .)
    CONTINUE        reduce using rule 24 (comment -> COMMENT .)
    BREAK           reduce using rule 24 (comment -> COMMENT .)
    IDENTIFIER      reduce using rule 24 (comment -> COMMENT .)
    INTTYPE         reduce using rule 24 (comment -> COMMENT .)
    FLOATTYPE       reduce using rule 24 (comment -> COMMENT .)
    CHARTYPE        reduce using rule 24 (comment -> COMMENT .)
    STRINGTYPE      reduce using rule 24 (comment -> COMMENT .)
    PRINT           reduce using rule 24 (comment -> COMMENT .)
    RETURN          reduce using rule 24 (comment -> COMMENT .)
    IF              reduce using rule 24 (comment -> COMMENT .)
    WHILE           reduce using rule 24 (comment -> COMMENT .)
    FOR             reduce using rule 24 (comment -> COMMENT .)
    VOID            reduce using rule 24 (comment -> COMMENT .)
    COMMENT         reduce using rule 24 (comment -> COMMENT .)
    $end            reduce using rule 24 (comment -> COMMENT .)
    RBRACE          reduce using rule 24 (comment -> COMMENT .)


state 33

    (1) ka -> expression SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 75
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 34

    (42) expression -> expression ADD . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 76

state 35

    (43) expression -> expression SUBTRACT . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 77

state 36

    (44) expression -> expression MULTIPLY . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 78

state 37

    (45) expression -> expression DIVIDE . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 79

state 38

    (46) expression -> expression EXP . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 80

state 39

    (48) expression -> expression EQUALCOMP . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 81

state 40

    (49) expression -> expression GREATER_THAN_EQUAL . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 82

state 41

    (50) expression -> expression LESS_THAN_EQUAL . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 83

state 42

    (51) expression -> expression GREATER_THAN . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 84

state 43

    (52) expression -> expression LESS_THAN . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 85

state 44

    (53) expression -> expression NOTEQUAL . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 86

state 45

    (55) expression -> expression AND . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 87

state 46

    (56) expression -> expression OR . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 88

state 47

    (2) ka -> assign SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 89
    expression                     shift and go to state 2
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 48

    (3) ka -> print SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    print                          shift and go to state 4
    ka                             shift and go to state 90
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 49

    (4) ka -> input SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    input                          shift and go to state 5
    ka                             shift and go to state 91
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 50

    (5) ka -> return SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    return                         shift and go to state 92
    legal                          shift and go to state 93
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 51

    (6) ka -> if_statement ka .

    $end            reduce using rule 6 (ka -> if_statement ka .)
    RBRACE          reduce using rule 6 (ka -> if_statement ka .)


state 52

    (7) ka -> if_else_statement ka .

    $end            reduce using rule 7 (ka -> if_else_statement ka .)
    RBRACE          reduce using rule 7 (ka -> if_else_statement ka .)


state 53

    (8) ka -> while_statement ka .

    $end            reduce using rule 8 (ka -> while_statement ka .)
    RBRACE          reduce using rule 8 (ka -> while_statement ka .)


state 54

    (9) ka -> for_statement ka .

    $end            reduce using rule 9 (ka -> for_statement ka .)
    RBRACE          reduce using rule 9 (ka -> for_statement ka .)


state 55

    (10) ka -> function_statement ka .

    $end            reduce using rule 10 (ka -> function_statement ka .)
    RBRACE          reduce using rule 10 (ka -> function_statement ka .)


state 56

    (11) ka -> comment ka .

    $end            reduce using rule 11 (ka -> comment ka .)
    RBRACE          reduce using rule 11 (ka -> comment ka .)


state 57

    (47) expression -> LPAREN expression . RPAREN
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          shift and go to state 108
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 58

    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .

    LPAREN          shift and go to state 60
    RPAREN          reduce using rule 84 (expression -> IDENTIFIER .)
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 84 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 84 (expression -> IDENTIFIER .)


state 59

    (54) expression -> NOT expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 54 (expression -> NOT expression .)
    RPAREN          reduce using rule 54 (expression -> NOT expression .)
    COMMA           reduce using rule 54 (expression -> NOT expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46

  ! ADD             [ reduce using rule 54 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 54 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 54 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 54 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 54 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 54 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 54 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 54 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 54 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 54 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 54 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 54 (expression -> NOT expression .) ]


state 60

    (76) expression -> IDENTIFIER LPAREN . function_call_input RPAREN
    (77) function_call_input -> . IDENTIFIER COMMA IDENTIFIER
    (78) function_call_input -> . IDENTIFIER COMMA expression
    (79) function_call_input -> . expression COMMA IDENTIFIER
    (80) function_call_input -> . expression COMMA expression
    (81) function_call_input -> . IDENTIFIER
    (82) function_call_input -> . expression
    (83) function_call_input -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (85) empty -> .

    IDENTIFIER      shift and go to state 109
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    RPAREN          reduce using rule 85 (empty -> .)

    function_call_input            shift and go to state 110
    expression                     shift and go to state 111
    empty                          shift and go to state 112

state 61

    (35) assign -> IDENTIFIER EQUAL . expression
    (38) input -> IDENTIFIER EQUAL . INPUT LPAREN RPAREN
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    INPUT           shift and go to state 114
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 113

state 62

    (25) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (26) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (31) assign -> INTTYPE IDENTIFIER .
    (67) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 115
    SEMICOLON       reduce using rule 31 (assign -> INTTYPE IDENTIFIER .)
    LPAREN          reduce using rule 67 (type_identifier -> INTTYPE IDENTIFIER .)


state 63

    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (29) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (32) assign -> FLOATTYPE IDENTIFIER .
    (69) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 116
    SEMICOLON       reduce using rule 32 (assign -> FLOATTYPE IDENTIFIER .)
    LPAREN          reduce using rule 69 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 64

    (28) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (33) assign -> CHARTYPE IDENTIFIER .
    (68) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 117
    SEMICOLON       reduce using rule 33 (assign -> CHARTYPE IDENTIFIER .)
    LPAREN          reduce using rule 68 (type_identifier -> CHARTYPE IDENTIFIER .)


state 65

    (30) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (34) assign -> STRINGTYPE IDENTIFIER .
    (70) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 118
    SEMICOLON       reduce using rule 34 (assign -> STRINGTYPE IDENTIFIER .)
    LPAREN          reduce using rule 70 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 66

    (36) print -> PRINT LPAREN . expression RPAREN
    (37) print -> PRINT LPAREN . STRING RPAREN
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    STRING          shift and go to state 120
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 119

state 67

    (39) return -> RETURN expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (return -> RETURN expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 68

    (40) return -> RETURN INT .
    (57) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 40 (return -> RETURN INT .)
    SEMICOLON       reduce using rule 40 (return -> RETURN INT .)
    ADD             reduce using rule 57 (expression -> INT .)
    SUBTRACT        reduce using rule 57 (expression -> INT .)
    MULTIPLY        reduce using rule 57 (expression -> INT .)
    DIVIDE          reduce using rule 57 (expression -> INT .)
    EXP             reduce using rule 57 (expression -> INT .)
    EQUALCOMP       reduce using rule 57 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    GREATER_THAN    reduce using rule 57 (expression -> INT .)
    LESS_THAN       reduce using rule 57 (expression -> INT .)
    NOTEQUAL        reduce using rule 57 (expression -> INT .)
    AND             reduce using rule 57 (expression -> INT .)
    OR              reduce using rule 57 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 57 (expression -> INT .) ]


state 69

    (41) return -> RETURN IDENTIFIER .
    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 41 (return -> RETURN IDENTIFIER .)
    SEMICOLON       reduce using rule 41 (return -> RETURN IDENTIFIER .)
    LPAREN          shift and go to state 60
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 84 (expression -> IDENTIFIER .) ]


state 70

    (61) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 121

state 71

    (65) while_statement -> WHILE LPAREN . expression RPAREN LBRACE legal RBRACE
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 122

state 72

    (66) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression

    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    IDENTIFIER      shift and go to state 124

    assign                         shift and go to state 123

state 73

    (71) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE legal RBRACE
    (73) function_input -> . type_identifier COMMA function_input
    (74) function_input -> . type_identifier
    (75) function_input -> . empty
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER
    (85) empty -> .

    INTTYPE         shift and go to state 128
    CHARTYPE        shift and go to state 129
    FLOATTYPE       shift and go to state 130
    STRINGTYPE      shift and go to state 131
    RPAREN          reduce using rule 85 (empty -> .)

    type_identifier                shift and go to state 125
    function_input                 shift and go to state 126
    empty                          shift and go to state 127

state 74

    (72) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 132


state 75

    (1) ka -> expression SEMICOLON ka .

    $end            reduce using rule 1 (ka -> expression SEMICOLON ka .)
    RBRACE          reduce using rule 1 (ka -> expression SEMICOLON ka .)


state 76

    (42) expression -> expression ADD expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression ADD expression .)
    ADD             reduce using rule 42 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 42 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 42 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 42 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 42 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 42 (expression -> expression ADD expression .)
    AND             reduce using rule 42 (expression -> expression ADD expression .)
    OR              reduce using rule 42 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 42 (expression -> expression ADD expression .)
    COMMA           reduce using rule 42 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! MULTIPLY        [ reduce using rule 42 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 42 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 34 ]
  ! SUBTRACT        [ shift and go to state 35 ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 77

    (43) expression -> expression SUBTRACT expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression SUBTRACT expression .)
    ADD             reduce using rule 43 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 43 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 43 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 43 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 43 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 43 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 43 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 43 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 43 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 43 (expression -> expression SUBTRACT expression .)
    COMMA           reduce using rule 43 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! MULTIPLY        [ reduce using rule 43 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 34 ]
  ! SUBTRACT        [ shift and go to state 35 ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 78

    (44) expression -> expression MULTIPLY expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 44 (expression -> expression MULTIPLY expression .)
    ADD             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 44 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 44 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 44 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 44 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 44 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 44 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 44 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 44 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 34 ]
  ! SUBTRACT        [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! EXP             [ shift and go to state 38 ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 79

    (45) expression -> expression DIVIDE expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 45 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 45 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 45 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 45 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 45 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 45 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 45 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 45 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 45 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 45 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 45 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 45 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 45 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 45 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 45 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 34 ]
  ! SUBTRACT        [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! EXP             [ shift and go to state 38 ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 80

    (46) expression -> expression EXP expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 46 (expression -> expression EXP expression .)
    ADD             reduce using rule 46 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 46 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 46 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 46 (expression -> expression EXP expression .)
    EXP             reduce using rule 46 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 46 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 46 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 46 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 46 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 46 (expression -> expression EXP expression .)
    AND             reduce using rule 46 (expression -> expression EXP expression .)
    OR              reduce using rule 46 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 46 (expression -> expression EXP expression .)
    COMMA           reduce using rule 46 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 34 ]
  ! SUBTRACT        [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! EXP             [ shift and go to state 38 ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 81

    (48) expression -> expression EQUALCOMP expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    EQUALCOMP       reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    COMMA           reduce using rule 48 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 48 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 48 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 48 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 82

    (49) expression -> expression GREATER_THAN_EQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 49 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 83

    (50) expression -> expression LESS_THAN_EQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 50 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 84

    (51) expression -> expression GREATER_THAN expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    EQUALCOMP       reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 51 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 51 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 51 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 51 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 85

    (52) expression -> expression LESS_THAN expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 52 (expression -> expression LESS_THAN expression .)
    EQUALCOMP       reduce using rule 52 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 52 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 52 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 52 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 52 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 52 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 52 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 52 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 52 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 52 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 52 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 52 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 52 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 86

    (53) expression -> expression NOTEQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    EQUALCOMP       reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 53 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38

  ! ADD             [ reduce using rule 53 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 53 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 53 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 39 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 40 ]
  ! LESS_THAN_EQUAL [ shift and go to state 41 ]
  ! GREATER_THAN    [ shift and go to state 42 ]
  ! LESS_THAN       [ shift and go to state 43 ]
  ! NOTEQUAL        [ shift and go to state 44 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 87

    (55) expression -> expression AND expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 55 (expression -> expression AND expression .)
    RPAREN          reduce using rule 55 (expression -> expression AND expression .)
    COMMA           reduce using rule 55 (expression -> expression AND expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46

  ! ADD             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression AND expression .) ]


state 88

    (56) expression -> expression OR expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 56 (expression -> expression OR expression .)
    RPAREN          reduce using rule 56 (expression -> expression OR expression .)
    COMMA           reduce using rule 56 (expression -> expression OR expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46

  ! ADD             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression OR expression .) ]


state 89

    (2) ka -> assign SEMICOLON ka .

    $end            reduce using rule 2 (ka -> assign SEMICOLON ka .)
    RBRACE          reduce using rule 2 (ka -> assign SEMICOLON ka .)


state 90

    (3) ka -> print SEMICOLON ka .

    $end            reduce using rule 3 (ka -> print SEMICOLON ka .)
    RBRACE          reduce using rule 3 (ka -> print SEMICOLON ka .)


state 91

    (4) ka -> input SEMICOLON ka .

    $end            reduce using rule 4 (ka -> input SEMICOLON ka .)
    RBRACE          reduce using rule 4 (ka -> input SEMICOLON ka .)


state 92

    (17) legal -> return . SEMICOLON legal

    SEMICOLON       shift and go to state 133


state 93

    (5) ka -> return SEMICOLON legal .

    $end            reduce using rule 5 (ka -> return SEMICOLON legal .)
    RBRACE          reduce using rule 5 (ka -> return SEMICOLON legal .)


state 94

    (13) legal -> expression . SEMICOLON legal
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       shift and go to state 134
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 95

    (14) legal -> assign . SEMICOLON legal

    SEMICOLON       shift and go to state 135


state 96

    (15) legal -> print . SEMICOLON legal

    SEMICOLON       shift and go to state 136


state 97

    (16) legal -> input . SEMICOLON legal

    SEMICOLON       shift and go to state 137


state 98

    (18) legal -> if_statement . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    if_statement                   shift and go to state 98
    legal                          shift and go to state 138
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 99

    (19) legal -> if_else_statement . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    if_else_statement              shift and go to state 99
    legal                          shift and go to state 139
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 100

    (20) legal -> while_statement . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    while_statement                shift and go to state 100
    legal                          shift and go to state 140
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 101

    (21) legal -> for_statement . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    for_statement                  shift and go to state 101
    legal                          shift and go to state 141
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 102

    (22) legal -> comment . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . return SEMICOLON legal
    (6) ka -> . if_statement ka
    (7) ka -> . if_else_statement ka
    (8) ka -> . while_statement ka
    (9) ka -> . for_statement ka
    (10) ka -> . function_statement ka
    (11) ka -> . comment ka
    (12) ka -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (71) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (72) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 21
    FLOATTYPE       shift and go to state 22
    CHARTYPE        shift and go to state 23
    STRINGTYPE      shift and go to state 24
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    VOID            shift and go to state 31
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    comment                        shift and go to state 12
    ka                             shift and go to state 142
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    return                         shift and go to state 6
    if_statement                   shift and go to state 7
    if_else_statement              shift and go to state 8
    while_statement                shift and go to state 9
    for_statement                  shift and go to state 10
    function_statement             shift and go to state 11
    empty                          shift and go to state 13
    type_identifier                shift and go to state 30

state 103

    (23) legal -> empty .

    $end            reduce using rule 23 (legal -> empty .)
    RBRACE          reduce using rule 23 (legal -> empty .)


state 104

    (25) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (26) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (31) assign -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 143


state 105

    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (29) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (32) assign -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 144


state 106

    (28) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (33) assign -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 145


state 107

    (30) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (34) assign -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 146


state 108

    (47) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    SUBTRACT        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    EQUALCOMP       reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 47 (expression -> LPAREN expression RPAREN .)


state 109

    (77) function_call_input -> IDENTIFIER . COMMA IDENTIFIER
    (78) function_call_input -> IDENTIFIER . COMMA expression
    (81) function_call_input -> IDENTIFIER .
    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (function_call_input -> IDENTIFIER .)
    COMMA           shift and go to state 147
    RPAREN          reduce using rule 81 (function_call_input -> IDENTIFIER .)
    LPAREN          shift and go to state 60
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)

  ! COMMA           [ reduce using rule 84 (expression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 84 (expression -> IDENTIFIER .) ]


state 110

    (76) expression -> IDENTIFIER LPAREN function_call_input . RPAREN

    RPAREN          shift and go to state 148


state 111

    (79) function_call_input -> expression . COMMA IDENTIFIER
    (80) function_call_input -> expression . COMMA expression
    (82) function_call_input -> expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    COMMA           shift and go to state 149
    RPAREN          reduce using rule 82 (function_call_input -> expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 112

    (83) function_call_input -> empty .

    RPAREN          reduce using rule 83 (function_call_input -> empty .)


state 113

    (35) assign -> IDENTIFIER EQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (assign -> IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 35 (assign -> IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 114

    (38) input -> IDENTIFIER EQUAL INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 150


state 115

    (25) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (26) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    INT             shift and go to state 151
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 152

state 116

    (27) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (29) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    FLOAT           shift and go to state 154
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 153

state 117

    (28) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 155


state 118

    (30) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 156


state 119

    (36) print -> PRINT LPAREN expression . RPAREN
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          shift and go to state 157
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 120

    (37) print -> PRINT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 158


state 121

    (61) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          shift and go to state 159
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 122

    (65) while_statement -> WHILE LPAREN expression . RPAREN LBRACE legal RBRACE
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          shift and go to state 160
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 123

    (66) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    SEMICOLON       shift and go to state 161


state 124

    (35) assign -> IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 162


state 125

    (73) function_input -> type_identifier . COMMA function_input
    (74) function_input -> type_identifier .

    COMMA           shift and go to state 163
    RPAREN          reduce using rule 74 (function_input -> type_identifier .)


state 126

    (71) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 164


state 127

    (75) function_input -> empty .

    RPAREN          reduce using rule 75 (function_input -> empty .)


state 128

    (67) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 165


state 129

    (68) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 166


state 130

    (69) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 167


state 131

    (70) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 168


state 132

    (72) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE legal RBRACE
    (73) function_input -> . type_identifier COMMA function_input
    (74) function_input -> . type_identifier
    (75) function_input -> . empty
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER
    (85) empty -> .

    INTTYPE         shift and go to state 128
    CHARTYPE        shift and go to state 129
    FLOATTYPE       shift and go to state 130
    STRINGTYPE      shift and go to state 131
    RPAREN          reduce using rule 85 (empty -> .)

    function_input                 shift and go to state 169
    type_identifier                shift and go to state 125
    empty                          shift and go to state 127

state 133

    (17) legal -> return SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    return                         shift and go to state 92
    legal                          shift and go to state 170
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 134

    (13) legal -> expression SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 94
    legal                          shift and go to state 171
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 135

    (14) legal -> assign SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    assign                         shift and go to state 95
    legal                          shift and go to state 172
    expression                     shift and go to state 94
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 136

    (15) legal -> print SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    print                          shift and go to state 96
    legal                          shift and go to state 173
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 137

    (16) legal -> input SEMICOLON . legal
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    $end            reduce using rule 85 (empty -> .)
    RBRACE          reduce using rule 85 (empty -> .)

    input                          shift and go to state 97
    legal                          shift and go to state 174
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 138

    (18) legal -> if_statement legal .

    $end            reduce using rule 18 (legal -> if_statement legal .)
    RBRACE          reduce using rule 18 (legal -> if_statement legal .)


state 139

    (19) legal -> if_else_statement legal .

    $end            reduce using rule 19 (legal -> if_else_statement legal .)
    RBRACE          reduce using rule 19 (legal -> if_else_statement legal .)


state 140

    (20) legal -> while_statement legal .

    $end            reduce using rule 20 (legal -> while_statement legal .)
    RBRACE          reduce using rule 20 (legal -> while_statement legal .)


state 141

    (21) legal -> for_statement legal .

    $end            reduce using rule 21 (legal -> for_statement legal .)
    RBRACE          reduce using rule 21 (legal -> for_statement legal .)


state 142

    (22) legal -> comment ka .

    $end            reduce using rule 22 (legal -> comment ka .)
    RBRACE          reduce using rule 22 (legal -> comment ka .)


state 143

    (25) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (26) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (31) assign -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 115
    SEMICOLON       reduce using rule 31 (assign -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 31 (assign -> INTTYPE IDENTIFIER .)


state 144

    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (29) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (32) assign -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 116
    SEMICOLON       reduce using rule 32 (assign -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 32 (assign -> FLOATTYPE IDENTIFIER .)


state 145

    (28) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (33) assign -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 117
    SEMICOLON       reduce using rule 33 (assign -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 33 (assign -> CHARTYPE IDENTIFIER .)


state 146

    (30) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (34) assign -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 118
    SEMICOLON       reduce using rule 34 (assign -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 34 (assign -> STRINGTYPE IDENTIFIER .)


state 147

    (77) function_call_input -> IDENTIFIER COMMA . IDENTIFIER
    (78) function_call_input -> IDENTIFIER COMMA . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 175
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19

    expression                     shift and go to state 176

state 148

    (76) expression -> IDENTIFIER LPAREN function_call_input RPAREN .

    SEMICOLON       reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    ADD             reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    SUBTRACT        reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    MULTIPLY        reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    DIVIDE          reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    EXP             reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    EQUALCOMP       reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    LESS_THAN_EQUAL reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    GREATER_THAN    reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    LESS_THAN       reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    NOTEQUAL        reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    AND             reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    OR              reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    RPAREN          reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)
    COMMA           reduce using rule 76 (expression -> IDENTIFIER LPAREN function_call_input RPAREN .)


state 149

    (79) function_call_input -> expression COMMA . IDENTIFIER
    (80) function_call_input -> expression COMMA . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 178
    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19

    expression                     shift and go to state 177

state 150

    (38) input -> IDENTIFIER EQUAL INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 179


state 151

    (25) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (57) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 25 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 25 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 57 (expression -> INT .)
    SUBTRACT        reduce using rule 57 (expression -> INT .)
    MULTIPLY        reduce using rule 57 (expression -> INT .)
    DIVIDE          reduce using rule 57 (expression -> INT .)
    EXP             reduce using rule 57 (expression -> INT .)
    EQUALCOMP       reduce using rule 57 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> INT .)
    GREATER_THAN    reduce using rule 57 (expression -> INT .)
    LESS_THAN       reduce using rule 57 (expression -> INT .)
    NOTEQUAL        reduce using rule 57 (expression -> INT .)
    AND             reduce using rule 57 (expression -> INT .)
    OR              reduce using rule 57 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 57 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 57 (expression -> INT .) ]


state 152

    (26) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 26 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 26 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 153

    (27) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 154

    (29) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (58) expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 29 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 29 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 58 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 58 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 58 (expression -> FLOAT .)
    DIVIDE          reduce using rule 58 (expression -> FLOAT .)
    EXP             reduce using rule 58 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 58 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 58 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 58 (expression -> FLOAT .)
    AND             reduce using rule 58 (expression -> FLOAT .)
    OR              reduce using rule 58 (expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 58 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 58 (expression -> FLOAT .) ]


state 155

    (28) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    SEMICOLON       reduce using rule 28 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 28 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 156

    (30) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    SEMICOLON       reduce using rule 30 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 30 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 157

    (36) print -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 36 (print -> PRINT LPAREN expression RPAREN .)


state 158

    (37) print -> PRINT LPAREN STRING RPAREN .

    SEMICOLON       reduce using rule 37 (print -> PRINT LPAREN STRING RPAREN .)


state 159

    (61) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE
    (62) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement

    LBRACE          shift and go to state 180


state 160

    (65) while_statement -> WHILE LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 181


state 161

    (66) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 182

state 162

    (35) assign -> IDENTIFIER EQUAL . expression
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 113

state 163

    (73) function_input -> type_identifier COMMA . function_input
    (73) function_input -> . type_identifier COMMA function_input
    (74) function_input -> . type_identifier
    (75) function_input -> . empty
    (67) type_identifier -> . INTTYPE IDENTIFIER
    (68) type_identifier -> . CHARTYPE IDENTIFIER
    (69) type_identifier -> . FLOATTYPE IDENTIFIER
    (70) type_identifier -> . STRINGTYPE IDENTIFIER
    (85) empty -> .

    INTTYPE         shift and go to state 128
    CHARTYPE        shift and go to state 129
    FLOATTYPE       shift and go to state 130
    STRINGTYPE      shift and go to state 131
    RPAREN          reduce using rule 85 (empty -> .)

    type_identifier                shift and go to state 125
    function_input                 shift and go to state 183
    empty                          shift and go to state 127

state 164

    (71) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 184


state 165

    (67) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 67 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 67 (type_identifier -> INTTYPE IDENTIFIER .)


state 166

    (68) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 68 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 68 (type_identifier -> CHARTYPE IDENTIFIER .)


state 167

    (69) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 69 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 69 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 168

    (70) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 70 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 70 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 169

    (72) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 185


state 170

    (17) legal -> return SEMICOLON legal .

    $end            reduce using rule 17 (legal -> return SEMICOLON legal .)
    RBRACE          reduce using rule 17 (legal -> return SEMICOLON legal .)


state 171

    (13) legal -> expression SEMICOLON legal .

    $end            reduce using rule 13 (legal -> expression SEMICOLON legal .)
    RBRACE          reduce using rule 13 (legal -> expression SEMICOLON legal .)


state 172

    (14) legal -> assign SEMICOLON legal .

    $end            reduce using rule 14 (legal -> assign SEMICOLON legal .)
    RBRACE          reduce using rule 14 (legal -> assign SEMICOLON legal .)


state 173

    (15) legal -> print SEMICOLON legal .

    $end            reduce using rule 15 (legal -> print SEMICOLON legal .)
    RBRACE          reduce using rule 15 (legal -> print SEMICOLON legal .)


state 174

    (16) legal -> input SEMICOLON legal .

    $end            reduce using rule 16 (legal -> input SEMICOLON legal .)
    RBRACE          reduce using rule 16 (legal -> input SEMICOLON legal .)


state 175

    (77) function_call_input -> IDENTIFIER COMMA IDENTIFIER .
    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 77 (function_call_input -> IDENTIFIER COMMA IDENTIFIER .)
    RPAREN          reduce using rule 77 (function_call_input -> IDENTIFIER COMMA IDENTIFIER .)
    LPAREN          shift and go to state 60
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 84 (expression -> IDENTIFIER .) ]


state 176

    (78) function_call_input -> IDENTIFIER COMMA expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          reduce using rule 78 (function_call_input -> IDENTIFIER COMMA expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 177

    (80) function_call_input -> expression COMMA expression .
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          reduce using rule 80 (function_call_input -> expression COMMA expression .)
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 178

    (79) function_call_input -> expression COMMA IDENTIFIER .
    (76) expression -> IDENTIFIER . LPAREN function_call_input RPAREN
    (84) expression -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 79 (function_call_input -> expression COMMA IDENTIFIER .)
    RPAREN          reduce using rule 79 (function_call_input -> expression COMMA IDENTIFIER .)
    LPAREN          shift and go to state 60
    ADD             reduce using rule 84 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 84 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 84 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (expression -> IDENTIFIER .)
    EXP             reduce using rule 84 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 84 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 84 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 84 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 84 (expression -> IDENTIFIER .)
    AND             reduce using rule 84 (expression -> IDENTIFIER .)
    OR              reduce using rule 84 (expression -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 84 (expression -> IDENTIFIER .) ]


state 179

    (38) input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .

    SEMICOLON       reduce using rule 38 (input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .)


state 180

    (61) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 94
    legal                          shift and go to state 186
    if_else_statement              shift and go to state 99
    if_statement                   shift and go to state 98
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 181

    (65) while_statement -> WHILE LPAREN expression RPAREN LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 94
    legal                          shift and go to state 187
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 182

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE legal RBRACE
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    SEMICOLON       shift and go to state 188
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 183

    (73) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 73 (function_input -> type_identifier COMMA function_input .)


state 184

    (71) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    legal                          shift and go to state 189
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 185

    (72) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 190


state 186

    (61) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE
    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement

    RBRACE          shift and go to state 191


state 187

    (65) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 192


state 188

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE legal RBRACE
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression

    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    IDENTIFIER      shift and go to state 124

    assign                         shift and go to state 193

state 189

    (71) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 194


state 190

    (72) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    legal                          shift and go to state 195
    expression                     shift and go to state 94
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 191

    (61) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .
    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement

    LPAREN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    ELSE            shift and go to state 196


state 192

    (65) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 65 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)


state 193

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 197


state 194

    (71) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 71 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 195

    (72) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 198


state 196

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_statement
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE

    LBRACE          shift and go to state 200
    IF              shift and go to state 199

    if_else_statement              shift and go to state 201
    if_statement                   shift and go to state 202

state 197

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 203


state 198

    (72) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 72 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 199

    (62) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (61) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 204


state 200

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 94
    legal                          shift and go to state 205
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 201

    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .

    LPAREN          reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    NOT             reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INT             reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CONTINUE        reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    BREAK           reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RETURN          reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IF              reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    COMMENT         reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    $end            reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RBRACE          reduce using rule 63 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)


state 202

    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .

    LPAREN          reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    NOT             reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INT             reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CONTINUE        reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    BREAK           reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    PRINT           reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RETURN          reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IF              reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    WHILE           reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FOR             reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    VOID            reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    COMMENT         reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    $end            reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RBRACE          reduce using rule 64 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)


state 203

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    assign                         shift and go to state 95
    expression                     shift and go to state 94
    legal                          shift and go to state 206
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    if_statement                   shift and go to state 98
    if_else_statement              shift and go to state 99
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 204

    (62) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (61) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 58

    expression                     shift and go to state 207

state 205

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal . RBRACE

    RBRACE          shift and go to state 208


state 206

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 209


state 207

    (62) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (61) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (42) expression -> expression . ADD expression
    (43) expression -> expression . SUBTRACT expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . EXP expression
    (48) expression -> expression . EQUALCOMP expression
    (49) expression -> expression . GREATER_THAN_EQUAL expression
    (50) expression -> expression . LESS_THAN_EQUAL expression
    (51) expression -> expression . GREATER_THAN expression
    (52) expression -> expression . LESS_THAN expression
    (53) expression -> expression . NOTEQUAL expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression

    RPAREN          shift and go to state 210
    ADD             shift and go to state 34
    SUBTRACT        shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    EXP             shift and go to state 38
    EQUALCOMP       shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    LESS_THAN_EQUAL shift and go to state 41
    GREATER_THAN    shift and go to state 42
    LESS_THAN       shift and go to state 43
    NOTEQUAL        shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46


state 208

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .

    LPAREN          reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    NOT             reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INT             reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOAT           reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    BREAK           reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    PRINT           reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RETURN          reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IF              reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    WHILE           reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FOR             reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    VOID            reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    COMMENT         reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    $end            reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RBRACE          reduce using rule 62 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)


state 209

    (66) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .

    LPAREN          reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 66 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)


state 210

    (62) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement
    (61) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 211


state 211

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (61) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (13) legal -> . expression SEMICOLON legal
    (14) legal -> . assign SEMICOLON legal
    (15) legal -> . print SEMICOLON legal
    (16) legal -> . input SEMICOLON legal
    (17) legal -> . return SEMICOLON legal
    (18) legal -> . if_statement legal
    (19) legal -> . if_else_statement legal
    (20) legal -> . while_statement legal
    (21) legal -> . for_statement legal
    (22) legal -> . comment ka
    (23) legal -> . empty
    (42) expression -> . expression ADD expression
    (43) expression -> . expression SUBTRACT expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression EXP expression
    (47) expression -> . LPAREN expression RPAREN
    (48) expression -> . expression EQUALCOMP expression
    (49) expression -> . expression GREATER_THAN_EQUAL expression
    (50) expression -> . expression LESS_THAN_EQUAL expression
    (51) expression -> . expression GREATER_THAN expression
    (52) expression -> . expression LESS_THAN expression
    (53) expression -> . expression NOTEQUAL expression
    (54) expression -> . NOT expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . INT
    (58) expression -> . FLOAT
    (59) expression -> . CONTINUE
    (60) expression -> . BREAK
    (76) expression -> . IDENTIFIER LPAREN function_call_input RPAREN
    (84) expression -> . IDENTIFIER
    (25) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (26) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (28) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (29) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (30) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (31) assign -> . INTTYPE IDENTIFIER
    (32) assign -> . FLOATTYPE IDENTIFIER
    (33) assign -> . CHARTYPE IDENTIFIER
    (34) assign -> . STRINGTYPE IDENTIFIER
    (35) assign -> . IDENTIFIER EQUAL expression
    (36) print -> . PRINT LPAREN expression RPAREN
    (37) print -> . PRINT LPAREN STRING RPAREN
    (38) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (39) return -> . RETURN expression
    (40) return -> . RETURN INT
    (41) return -> . RETURN IDENTIFIER
    (61) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (62) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (64) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (65) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (66) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (24) comment -> . COMMENT
    (85) empty -> .

    LPAREN          shift and go to state 14
    NOT             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CONTINUE        shift and go to state 18
    BREAK           shift and go to state 19
    IDENTIFIER      shift and go to state 20
    INTTYPE         shift and go to state 104
    FLOATTYPE       shift and go to state 105
    CHARTYPE        shift and go to state 106
    STRINGTYPE      shift and go to state 107
    PRINT           shift and go to state 25
    RETURN          shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    COMMENT         shift and go to state 32
    RBRACE          reduce using rule 85 (empty -> .)

    expression                     shift and go to state 94
    legal                          shift and go to state 212
    if_else_statement              shift and go to state 99
    if_statement                   shift and go to state 98
    assign                         shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    return                         shift and go to state 92
    while_statement                shift and go to state 100
    for_statement                  shift and go to state 101
    comment                        shift and go to state 102
    empty                          shift and go to state 103

state 212

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement
    (61) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 213


state 213

    (62) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (63) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (64) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement
    (61) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .

    ELSE            shift and go to state 196
    LPAREN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    NOT             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 59 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 59 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for EXP in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for ADD in state 87 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for EXP in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for ADD in state 88 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for EXP in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 109 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (return -> RETURN INT)
WARNING: rejected rule (expression -> INT) in state 68
WARNING: reduce/reduce conflict in state 69 resolved using rule (return -> RETURN IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 69
WARNING: reduce/reduce conflict in state 109 resolved using rule (function_call_input -> IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 109
WARNING: reduce/reduce conflict in state 151 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 151
WARNING: reduce/reduce conflict in state 154 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 154
WARNING: reduce/reduce conflict in state 175 resolved using rule (function_call_input -> IDENTIFIER COMMA IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 175
WARNING: reduce/reduce conflict in state 178 resolved using rule (function_call_input -> expression COMMA IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 178
