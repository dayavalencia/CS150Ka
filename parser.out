Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COMMENT
    CONTINUE
    INPUT
    RETURN

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression ka
Rule 2     ka -> assign ka
Rule 3     ka -> if_statement ka
Rule 4     ka -> if_else_statement ka
Rule 5     ka -> while_statement ka
Rule 6     ka -> for_statement ka
Rule 7     ka -> function_statement ka
Rule 8     ka -> print ka
Rule 9     ka -> empty
Rule 10    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 11    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 12    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 13    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 14    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 15    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 16    print -> PRINT LPAREN expression RPAREN
Rule 17    expression -> expression ADD expression
Rule 18    expression -> expression SUBTRACT expression
Rule 19    expression -> expression MULTIPLY expression
Rule 20    expression -> expression DIVIDE expression
Rule 21    expression -> expression EXP expression
Rule 22    expression -> expression EQUALCOMP expression
Rule 23    expression -> expression GREATER_THAN_EQUAL expression
Rule 24    expression -> expression LESS_THAN_EQUAL expression
Rule 25    expression -> expression GREATER_THAN expression
Rule 26    expression -> expression LESS_THAN expression
Rule 27    expression -> expression NOTEQUAL expression
Rule 28    expression -> NOT expression
Rule 29    expression -> expression AND expression
Rule 30    expression -> expression OR expression
Rule 31    expression -> INT
Rule 32    expression -> FLOAT
Rule 33    if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty
Rule 34    if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
Rule 35    if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
Rule 36    if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
Rule 37    while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE
Rule 38    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
Rule 39    type_identifier -> INTTYPE IDENTIFIER
Rule 40    type_identifier -> CHARTYPE IDENTIFIER
Rule 41    type_identifier -> FLOATTYPE IDENTIFIER
Rule 42    type_identifier -> STRINGTYPE IDENTIFIER
Rule 43    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
Rule 44    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
Rule 45    function_input -> type_identifier COMMA function_input
Rule 46    function_input -> type_identifier
Rule 47    expression -> IDENTIFIER
Rule 48    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 17
AND                  : 29
BREAK                : 
CHAR                 : 13
CHARTYPE             : 13 40
COMMA                : 45
COMMENT              : 
CONTINUE             : 
DIVIDE               : 20
ELSE                 : 34 35 36
EQUAL                : 10 11 12 13 14 15
EQUALCOMP            : 22
EXP                  : 21
FLOAT                : 14 32
FLOATTYPE            : 12 14 41
FOR                  : 38
GREATER_THAN         : 25
GREATER_THAN_EQUAL   : 23
IDENTIFIER           : 10 11 12 13 14 15 39 40 41 42 44 47
IF                   : 33 34 35 36
INPUT                : 
INT                  : 10 31
INTTYPE              : 10 11 39
LBRACE               : 33 34 34 35 36 37 38 43 44
LESS_THAN            : 26
LESS_THAN_EQUAL      : 24
LPAREN               : 16 33 34 35 36 37 38 43 44
MULTIPLY             : 19
NOT                  : 28
NOTEQUAL             : 27
OR                   : 30
PRINT                : 16
RBRACE               : 33 34 34 35 36 37 38 43 44
RETURN               : 
RPAREN               : 16 33 34 35 36 37 38 43 44
SEMICOLON            : 38 38
STRING               : 15
STRINGTYPE           : 15 42
SUBTRACT             : 18
VOID                 : 44
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

assign               : 2 38 38
empty                : 9 33 34
expression           : 1 11 12 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 29 30 30 33 33 34 34 34 35 35 36 36 37 37 38 38 43 44
for_statement        : 6
function_input       : 43 44 45
function_statement   : 7
if_else_statement    : 4 35
if_statement         : 3 36
ka                   : 1 2 3 4 5 6 7 8 0
print                : 8
type_identifier      : 43 45 46
while_statement      : 5

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . ka
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 25
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 3

    (2) ka -> assign . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 39
    expression                     shift and go to state 2
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 4

    (3) ka -> if_statement . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    if_statement                   shift and go to state 4
    ka                             shift and go to state 40
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 5

    (4) ka -> if_else_statement . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    if_else_statement              shift and go to state 5
    ka                             shift and go to state 41
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 6

    (5) ka -> while_statement . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    while_statement                shift and go to state 6
    ka                             shift and go to state 42
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 7

    (6) ka -> for_statement . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    for_statement                  shift and go to state 7
    ka                             shift and go to state 43
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    function_statement             shift and go to state 8
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 8

    (7) ka -> function_statement . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    function_statement             shift and go to state 8
    ka                             shift and go to state 44
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print                          shift and go to state 9
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 9

    (8) ka -> print . ka
    (1) ka -> . expression ka
    (2) ka -> . assign ka
    (3) ka -> . if_statement ka
    (4) ka -> . if_else_statement ka
    (5) ka -> . while_statement ka
    (6) ka -> . for_statement ka
    (7) ka -> . function_statement ka
    (8) ka -> . print ka
    (9) ka -> . empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (37) while_statement -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE
    (38) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (43) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE
    (44) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE
    (16) print -> . PRINT LPAREN expression RPAREN
    (48) empty -> .
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14
    INTTYPE         shift and go to state 15
    FLOATTYPE       shift and go to state 16
    CHARTYPE        shift and go to state 17
    STRINGTYPE      shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    VOID            shift and go to state 23
    PRINT           shift and go to state 24
    $end            reduce using rule 48 (empty -> .)

    print                          shift and go to state 9
    ka                             shift and go to state 45
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    function_statement             shift and go to state 8
    empty                          shift and go to state 10
    type_identifier                shift and go to state 22

state 10

    (9) ka -> empty .

    $end            reduce using rule 9 (ka -> empty .)


state 11

    (28) expression -> NOT . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 46

state 12

    (31) expression -> INT .

    ADD             reduce using rule 31 (expression -> INT .)
    SUBTRACT        reduce using rule 31 (expression -> INT .)
    MULTIPLY        reduce using rule 31 (expression -> INT .)
    DIVIDE          reduce using rule 31 (expression -> INT .)
    EXP             reduce using rule 31 (expression -> INT .)
    EQUALCOMP       reduce using rule 31 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 31 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 31 (expression -> INT .)
    GREATER_THAN    reduce using rule 31 (expression -> INT .)
    LESS_THAN       reduce using rule 31 (expression -> INT .)
    NOTEQUAL        reduce using rule 31 (expression -> INT .)
    AND             reduce using rule 31 (expression -> INT .)
    OR              reduce using rule 31 (expression -> INT .)
    NOT             reduce using rule 31 (expression -> INT .)
    INT             reduce using rule 31 (expression -> INT .)
    FLOAT           reduce using rule 31 (expression -> INT .)
    IDENTIFIER      reduce using rule 31 (expression -> INT .)
    INTTYPE         reduce using rule 31 (expression -> INT .)
    FLOATTYPE       reduce using rule 31 (expression -> INT .)
    CHARTYPE        reduce using rule 31 (expression -> INT .)
    STRINGTYPE      reduce using rule 31 (expression -> INT .)
    IF              reduce using rule 31 (expression -> INT .)
    WHILE           reduce using rule 31 (expression -> INT .)
    FOR             reduce using rule 31 (expression -> INT .)
    VOID            reduce using rule 31 (expression -> INT .)
    PRINT           reduce using rule 31 (expression -> INT .)
    $end            reduce using rule 31 (expression -> INT .)
    RPAREN          reduce using rule 31 (expression -> INT .)
    SEMICOLON       reduce using rule 31 (expression -> INT .)
    RBRACE          reduce using rule 31 (expression -> INT .)


state 13

    (32) expression -> FLOAT .

    ADD             reduce using rule 32 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 32 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 32 (expression -> FLOAT .)
    DIVIDE          reduce using rule 32 (expression -> FLOAT .)
    EXP             reduce using rule 32 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 32 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 32 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 32 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 32 (expression -> FLOAT .)
    AND             reduce using rule 32 (expression -> FLOAT .)
    OR              reduce using rule 32 (expression -> FLOAT .)
    NOT             reduce using rule 32 (expression -> FLOAT .)
    INT             reduce using rule 32 (expression -> FLOAT .)
    FLOAT           reduce using rule 32 (expression -> FLOAT .)
    IDENTIFIER      reduce using rule 32 (expression -> FLOAT .)
    INTTYPE         reduce using rule 32 (expression -> FLOAT .)
    FLOATTYPE       reduce using rule 32 (expression -> FLOAT .)
    CHARTYPE        reduce using rule 32 (expression -> FLOAT .)
    STRINGTYPE      reduce using rule 32 (expression -> FLOAT .)
    IF              reduce using rule 32 (expression -> FLOAT .)
    WHILE           reduce using rule 32 (expression -> FLOAT .)
    FOR             reduce using rule 32 (expression -> FLOAT .)
    VOID            reduce using rule 32 (expression -> FLOAT .)
    PRINT           reduce using rule 32 (expression -> FLOAT .)
    $end            reduce using rule 32 (expression -> FLOAT .)
    RPAREN          reduce using rule 32 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 32 (expression -> FLOAT .)
    RBRACE          reduce using rule 32 (expression -> FLOAT .)


state 14

    (47) expression -> IDENTIFIER .

    ADD             reduce using rule 47 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 47 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 47 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 47 (expression -> IDENTIFIER .)
    EXP             reduce using rule 47 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 47 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 47 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 47 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 47 (expression -> IDENTIFIER .)
    AND             reduce using rule 47 (expression -> IDENTIFIER .)
    OR              reduce using rule 47 (expression -> IDENTIFIER .)
    NOT             reduce using rule 47 (expression -> IDENTIFIER .)
    INT             reduce using rule 47 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 47 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 47 (expression -> IDENTIFIER .)
    INTTYPE         reduce using rule 47 (expression -> IDENTIFIER .)
    FLOATTYPE       reduce using rule 47 (expression -> IDENTIFIER .)
    CHARTYPE        reduce using rule 47 (expression -> IDENTIFIER .)
    STRINGTYPE      reduce using rule 47 (expression -> IDENTIFIER .)
    IF              reduce using rule 47 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 47 (expression -> IDENTIFIER .)
    FOR             reduce using rule 47 (expression -> IDENTIFIER .)
    VOID            reduce using rule 47 (expression -> IDENTIFIER .)
    PRINT           reduce using rule 47 (expression -> IDENTIFIER .)
    $end            reduce using rule 47 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 47 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 47 (expression -> IDENTIFIER .)


state 15

    (10) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (11) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (39) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 16

    (12) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (14) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (41) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 48


state 17

    (13) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (40) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 49


state 18

    (15) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (42) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 50


state 19

    (33) if_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement

    LPAREN          shift and go to state 51


state 20

    (37) while_statement -> WHILE . LPAREN expression RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 52


state 21

    (38) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 53


state 22

    (43) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 54


state 23

    (44) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE

    IDENTIFIER      shift and go to state 55


state 24

    (16) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 56


state 25

    (1) ka -> expression ka .

    $end            reduce using rule 1 (ka -> expression ka .)


state 26

    (17) expression -> expression ADD . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 57

state 27

    (18) expression -> expression SUBTRACT . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 58

state 28

    (19) expression -> expression MULTIPLY . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 59

state 29

    (20) expression -> expression DIVIDE . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 60

state 30

    (21) expression -> expression EXP . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 61

state 31

    (22) expression -> expression EQUALCOMP . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 62

state 32

    (23) expression -> expression GREATER_THAN_EQUAL . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 63

state 33

    (24) expression -> expression LESS_THAN_EQUAL . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 64

state 34

    (25) expression -> expression GREATER_THAN . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 65

state 35

    (26) expression -> expression LESS_THAN . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 66

state 36

    (27) expression -> expression NOTEQUAL . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 67

state 37

    (29) expression -> expression AND . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 68

state 38

    (30) expression -> expression OR . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 69

state 39

    (2) ka -> assign ka .

    $end            reduce using rule 2 (ka -> assign ka .)


state 40

    (3) ka -> if_statement ka .

    $end            reduce using rule 3 (ka -> if_statement ka .)


state 41

    (4) ka -> if_else_statement ka .

    $end            reduce using rule 4 (ka -> if_else_statement ka .)


state 42

    (5) ka -> while_statement ka .

    $end            reduce using rule 5 (ka -> while_statement ka .)


state 43

    (6) ka -> for_statement ka .

    $end            reduce using rule 6 (ka -> for_statement ka .)


state 44

    (7) ka -> function_statement ka .

    $end            reduce using rule 7 (ka -> function_statement ka .)


state 45

    (8) ka -> print ka .

    $end            reduce using rule 8 (ka -> print ka .)


state 46

    (28) expression -> NOT expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    NOT             reduce using rule 28 (expression -> NOT expression .)
    INT             reduce using rule 28 (expression -> NOT expression .)
    FLOAT           reduce using rule 28 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 28 (expression -> NOT expression .)
    INTTYPE         reduce using rule 28 (expression -> NOT expression .)
    FLOATTYPE       reduce using rule 28 (expression -> NOT expression .)
    CHARTYPE        reduce using rule 28 (expression -> NOT expression .)
    STRINGTYPE      reduce using rule 28 (expression -> NOT expression .)
    IF              reduce using rule 28 (expression -> NOT expression .)
    WHILE           reduce using rule 28 (expression -> NOT expression .)
    FOR             reduce using rule 28 (expression -> NOT expression .)
    VOID            reduce using rule 28 (expression -> NOT expression .)
    PRINT           reduce using rule 28 (expression -> NOT expression .)
    $end            reduce using rule 28 (expression -> NOT expression .)
    RPAREN          reduce using rule 28 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 28 (expression -> NOT expression .)
    RBRACE          reduce using rule 28 (expression -> NOT expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38

  ! ADD             [ reduce using rule 28 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 28 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 28 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 28 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 28 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 28 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 28 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 28 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 28 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 28 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 28 (expression -> NOT expression .) ]


state 47

    (10) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (11) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (39) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 70
    LPAREN          reduce using rule 39 (type_identifier -> INTTYPE IDENTIFIER .)


state 48

    (12) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (14) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (41) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 71
    LPAREN          reduce using rule 41 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 49

    (13) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (40) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 72
    LPAREN          reduce using rule 40 (type_identifier -> CHARTYPE IDENTIFIER .)


state 50

    (15) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (42) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 73
    LPAREN          reduce using rule 42 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 51

    (33) if_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 74

state 52

    (37) while_statement -> WHILE LPAREN . expression RPAREN LBRACE expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 75

state 53

    (38) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 77
    FLOATTYPE       shift and go to state 78
    CHARTYPE        shift and go to state 79
    STRINGTYPE      shift and go to state 80

    assign                         shift and go to state 76

state 54

    (43) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE expression RBRACE
    (45) function_input -> . type_identifier COMMA function_input
    (46) function_input -> . type_identifier
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 83
    CHARTYPE        shift and go to state 84
    FLOATTYPE       shift and go to state 85
    STRINGTYPE      shift and go to state 86

    type_identifier                shift and go to state 81
    function_input                 shift and go to state 82

state 55

    (44) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 87


state 56

    (16) print -> PRINT LPAREN . expression RPAREN
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 88

state 57

    (17) expression -> expression ADD expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    ADD             reduce using rule 17 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 17 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 17 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 17 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 17 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 17 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 17 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 17 (expression -> expression ADD expression .)
    AND             reduce using rule 17 (expression -> expression ADD expression .)
    OR              reduce using rule 17 (expression -> expression ADD expression .)
    NOT             reduce using rule 17 (expression -> expression ADD expression .)
    INT             reduce using rule 17 (expression -> expression ADD expression .)
    FLOAT           reduce using rule 17 (expression -> expression ADD expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression ADD expression .)
    INTTYPE         reduce using rule 17 (expression -> expression ADD expression .)
    FLOATTYPE       reduce using rule 17 (expression -> expression ADD expression .)
    CHARTYPE        reduce using rule 17 (expression -> expression ADD expression .)
    STRINGTYPE      reduce using rule 17 (expression -> expression ADD expression .)
    IF              reduce using rule 17 (expression -> expression ADD expression .)
    WHILE           reduce using rule 17 (expression -> expression ADD expression .)
    FOR             reduce using rule 17 (expression -> expression ADD expression .)
    VOID            reduce using rule 17 (expression -> expression ADD expression .)
    PRINT           reduce using rule 17 (expression -> expression ADD expression .)
    $end            reduce using rule 17 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 17 (expression -> expression ADD expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression ADD expression .)
    RBRACE          reduce using rule 17 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! MULTIPLY        [ reduce using rule 17 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 17 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 17 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUBTRACT        [ shift and go to state 27 ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 58

    (18) expression -> expression SUBTRACT expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    ADD             reduce using rule 18 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 18 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 18 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 18 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 18 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 18 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 18 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 18 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 18 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 18 (expression -> expression SUBTRACT expression .)
    NOT             reduce using rule 18 (expression -> expression SUBTRACT expression .)
    INT             reduce using rule 18 (expression -> expression SUBTRACT expression .)
    FLOAT           reduce using rule 18 (expression -> expression SUBTRACT expression .)
    IDENTIFIER      reduce using rule 18 (expression -> expression SUBTRACT expression .)
    INTTYPE         reduce using rule 18 (expression -> expression SUBTRACT expression .)
    FLOATTYPE       reduce using rule 18 (expression -> expression SUBTRACT expression .)
    CHARTYPE        reduce using rule 18 (expression -> expression SUBTRACT expression .)
    STRINGTYPE      reduce using rule 18 (expression -> expression SUBTRACT expression .)
    IF              reduce using rule 18 (expression -> expression SUBTRACT expression .)
    WHILE           reduce using rule 18 (expression -> expression SUBTRACT expression .)
    FOR             reduce using rule 18 (expression -> expression SUBTRACT expression .)
    VOID            reduce using rule 18 (expression -> expression SUBTRACT expression .)
    PRINT           reduce using rule 18 (expression -> expression SUBTRACT expression .)
    $end            reduce using rule 18 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 18 (expression -> expression SUBTRACT expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression SUBTRACT expression .)
    RBRACE          reduce using rule 18 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! MULTIPLY        [ reduce using rule 18 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 18 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 18 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUBTRACT        [ shift and go to state 27 ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 59

    (19) expression -> expression MULTIPLY expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    ADD             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 19 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 19 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 19 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 19 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 19 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 19 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 19 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 19 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 19 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 19 (expression -> expression MULTIPLY expression .)
    NOT             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    INT             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    FLOAT           reduce using rule 19 (expression -> expression MULTIPLY expression .)
    IDENTIFIER      reduce using rule 19 (expression -> expression MULTIPLY expression .)
    INTTYPE         reduce using rule 19 (expression -> expression MULTIPLY expression .)
    FLOATTYPE       reduce using rule 19 (expression -> expression MULTIPLY expression .)
    CHARTYPE        reduce using rule 19 (expression -> expression MULTIPLY expression .)
    STRINGTYPE      reduce using rule 19 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 19 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 19 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 19 (expression -> expression MULTIPLY expression .)
    VOID            reduce using rule 19 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 19 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 19 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 19 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 19 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 26 ]
  ! SUBTRACT        [ shift and go to state 27 ]
  ! MULTIPLY        [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 60

    (20) expression -> expression DIVIDE expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    ADD             reduce using rule 20 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 20 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 20 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 20 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 20 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 20 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 20 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 20 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 20 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 20 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 20 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 20 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 20 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 20 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 20 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 20 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression DIVIDE expression .)
    INTTYPE         reduce using rule 20 (expression -> expression DIVIDE expression .)
    FLOATTYPE       reduce using rule 20 (expression -> expression DIVIDE expression .)
    CHARTYPE        reduce using rule 20 (expression -> expression DIVIDE expression .)
    STRINGTYPE      reduce using rule 20 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 20 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 20 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 20 (expression -> expression DIVIDE expression .)
    VOID            reduce using rule 20 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 20 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 20 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 20 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 20 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 20 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 26 ]
  ! SUBTRACT        [ shift and go to state 27 ]
  ! MULTIPLY        [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 61

    (21) expression -> expression EXP expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    ADD             reduce using rule 21 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 21 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 21 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 21 (expression -> expression EXP expression .)
    EXP             reduce using rule 21 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 21 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 21 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 21 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 21 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 21 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 21 (expression -> expression EXP expression .)
    AND             reduce using rule 21 (expression -> expression EXP expression .)
    OR              reduce using rule 21 (expression -> expression EXP expression .)
    NOT             reduce using rule 21 (expression -> expression EXP expression .)
    INT             reduce using rule 21 (expression -> expression EXP expression .)
    FLOAT           reduce using rule 21 (expression -> expression EXP expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression EXP expression .)
    INTTYPE         reduce using rule 21 (expression -> expression EXP expression .)
    FLOATTYPE       reduce using rule 21 (expression -> expression EXP expression .)
    CHARTYPE        reduce using rule 21 (expression -> expression EXP expression .)
    STRINGTYPE      reduce using rule 21 (expression -> expression EXP expression .)
    IF              reduce using rule 21 (expression -> expression EXP expression .)
    WHILE           reduce using rule 21 (expression -> expression EXP expression .)
    FOR             reduce using rule 21 (expression -> expression EXP expression .)
    VOID            reduce using rule 21 (expression -> expression EXP expression .)
    PRINT           reduce using rule 21 (expression -> expression EXP expression .)
    $end            reduce using rule 21 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 21 (expression -> expression EXP expression .)
    SEMICOLON       reduce using rule 21 (expression -> expression EXP expression .)
    RBRACE          reduce using rule 21 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 26 ]
  ! SUBTRACT        [ shift and go to state 27 ]
  ! MULTIPLY        [ shift and go to state 28 ]
  ! DIVIDE          [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 62

    (22) expression -> expression EQUALCOMP expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    NOT             reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    INT             reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    FLOAT           reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    INTTYPE         reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    FLOATTYPE       reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    CHARTYPE        reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    STRINGTYPE      reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    IF              reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    WHILE           reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    FOR             reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    VOID            reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    PRINT           reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    $end            reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    SEMICOLON       reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    RBRACE          reduce using rule 22 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 22 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 22 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 22 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 22 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 63

    (23) expression -> expression GREATER_THAN_EQUAL expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT             reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    INT             reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    FLOAT           reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    INTTYPE         reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    FLOATTYPE       reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    CHARTYPE        reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    STRINGTYPE      reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    IF              reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    WHILE           reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    FOR             reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    VOID            reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    PRINT           reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    $end            reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    RBRACE          reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 23 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 64

    (24) expression -> expression LESS_THAN_EQUAL expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT             reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    INT             reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    FLOAT           reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    INTTYPE         reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    FLOATTYPE       reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    CHARTYPE        reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    STRINGTYPE      reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    IF              reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    WHILE           reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    FOR             reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    VOID            reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    PRINT           reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    $end            reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    RBRACE          reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 24 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 65

    (25) expression -> expression GREATER_THAN expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    NOT             reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    INT             reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    FLOAT           reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    INTTYPE         reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    FLOATTYPE       reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    CHARTYPE        reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    STRINGTYPE      reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    VOID            reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    RBRACE          reduce using rule 25 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 25 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 25 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 25 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 25 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 66

    (26) expression -> expression LESS_THAN expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 26 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 26 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 26 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 26 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 26 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 26 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 26 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 26 (expression -> expression LESS_THAN expression .)
    NOT             reduce using rule 26 (expression -> expression LESS_THAN expression .)
    INT             reduce using rule 26 (expression -> expression LESS_THAN expression .)
    FLOAT           reduce using rule 26 (expression -> expression LESS_THAN expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression LESS_THAN expression .)
    INTTYPE         reduce using rule 26 (expression -> expression LESS_THAN expression .)
    FLOATTYPE       reduce using rule 26 (expression -> expression LESS_THAN expression .)
    CHARTYPE        reduce using rule 26 (expression -> expression LESS_THAN expression .)
    STRINGTYPE      reduce using rule 26 (expression -> expression LESS_THAN expression .)
    IF              reduce using rule 26 (expression -> expression LESS_THAN expression .)
    WHILE           reduce using rule 26 (expression -> expression LESS_THAN expression .)
    FOR             reduce using rule 26 (expression -> expression LESS_THAN expression .)
    VOID            reduce using rule 26 (expression -> expression LESS_THAN expression .)
    PRINT           reduce using rule 26 (expression -> expression LESS_THAN expression .)
    $end            reduce using rule 26 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 26 (expression -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression LESS_THAN expression .)
    RBRACE          reduce using rule 26 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 26 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 26 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 26 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 26 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 67

    (27) expression -> expression NOTEQUAL expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    EQUALCOMP       reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    NOT             reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    INT             reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    FLOAT           reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    INTTYPE         reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    FLOATTYPE       reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    CHARTYPE        reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    STRINGTYPE      reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    IF              reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    WHILE           reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    FOR             reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    VOID            reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    PRINT           reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30

  ! ADD             [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 31 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 32 ]
  ! LESS_THAN_EQUAL [ shift and go to state 33 ]
  ! GREATER_THAN    [ shift and go to state 34 ]
  ! LESS_THAN       [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 68

    (29) expression -> expression AND expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    NOT             reduce using rule 29 (expression -> expression AND expression .)
    INT             reduce using rule 29 (expression -> expression AND expression .)
    FLOAT           reduce using rule 29 (expression -> expression AND expression .)
    IDENTIFIER      reduce using rule 29 (expression -> expression AND expression .)
    INTTYPE         reduce using rule 29 (expression -> expression AND expression .)
    FLOATTYPE       reduce using rule 29 (expression -> expression AND expression .)
    CHARTYPE        reduce using rule 29 (expression -> expression AND expression .)
    STRINGTYPE      reduce using rule 29 (expression -> expression AND expression .)
    IF              reduce using rule 29 (expression -> expression AND expression .)
    WHILE           reduce using rule 29 (expression -> expression AND expression .)
    FOR             reduce using rule 29 (expression -> expression AND expression .)
    VOID            reduce using rule 29 (expression -> expression AND expression .)
    PRINT           reduce using rule 29 (expression -> expression AND expression .)
    $end            reduce using rule 29 (expression -> expression AND expression .)
    RPAREN          reduce using rule 29 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 29 (expression -> expression AND expression .)
    RBRACE          reduce using rule 29 (expression -> expression AND expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38

  ! ADD             [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression AND expression .) ]


state 69

    (30) expression -> expression OR expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    NOT             reduce using rule 30 (expression -> expression OR expression .)
    INT             reduce using rule 30 (expression -> expression OR expression .)
    FLOAT           reduce using rule 30 (expression -> expression OR expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression OR expression .)
    INTTYPE         reduce using rule 30 (expression -> expression OR expression .)
    FLOATTYPE       reduce using rule 30 (expression -> expression OR expression .)
    CHARTYPE        reduce using rule 30 (expression -> expression OR expression .)
    STRINGTYPE      reduce using rule 30 (expression -> expression OR expression .)
    IF              reduce using rule 30 (expression -> expression OR expression .)
    WHILE           reduce using rule 30 (expression -> expression OR expression .)
    FOR             reduce using rule 30 (expression -> expression OR expression .)
    VOID            reduce using rule 30 (expression -> expression OR expression .)
    PRINT           reduce using rule 30 (expression -> expression OR expression .)
    $end            reduce using rule 30 (expression -> expression OR expression .)
    RPAREN          reduce using rule 30 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 30 (expression -> expression OR expression .)
    RBRACE          reduce using rule 30 (expression -> expression OR expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38

  ! ADD             [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression OR expression .) ]


state 70

    (10) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (11) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    INT             shift and go to state 89
    NOT             shift and go to state 11
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 90

state 71

    (12) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (14) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    FLOAT           shift and go to state 92
    NOT             shift and go to state 11
    INT             shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 91

state 72

    (13) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 93


state 73

    (15) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 94


state 74

    (33) if_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE empty
    (34) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE if_statement
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RPAREN          shift and go to state 95
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 75

    (37) while_statement -> WHILE LPAREN expression . RPAREN LBRACE expression RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RPAREN          shift and go to state 96
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 76

    (38) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE

    SEMICOLON       shift and go to state 97


state 77

    (10) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (11) assign -> INTTYPE . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 98


state 78

    (12) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (14) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT

    IDENTIFIER      shift and go to state 99


state 79

    (13) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR

    IDENTIFIER      shift and go to state 100


state 80

    (15) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING

    IDENTIFIER      shift and go to state 101


state 81

    (45) function_input -> type_identifier . COMMA function_input
    (46) function_input -> type_identifier .

    COMMA           shift and go to state 102
    RPAREN          reduce using rule 46 (function_input -> type_identifier .)


state 82

    (43) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 103


state 83

    (39) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 104


state 84

    (40) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 105


state 85

    (41) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 106


state 86

    (42) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 107


state 87

    (44) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE expression RBRACE
    (45) function_input -> . type_identifier COMMA function_input
    (46) function_input -> . type_identifier
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 83
    CHARTYPE        shift and go to state 84
    FLOATTYPE       shift and go to state 85
    STRINGTYPE      shift and go to state 86

    function_input                 shift and go to state 108
    type_identifier                shift and go to state 81

state 88

    (16) print -> PRINT LPAREN expression . RPAREN
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RPAREN          shift and go to state 109
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 89

    (10) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (31) expression -> INT .

  ! reduce/reduce conflict for NOT resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for INT resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for IF resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for VOID resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for PRINT resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for $end resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    NOT             reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    INT             reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    FLOAT           reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    IDENTIFIER      reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    INTTYPE         reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    FLOATTYPE       reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    CHARTYPE        reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    STRINGTYPE      reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    IF              reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    WHILE           reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    FOR             reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    VOID            reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    PRINT           reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    $end            reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 10 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 31 (expression -> INT .)
    SUBTRACT        reduce using rule 31 (expression -> INT .)
    MULTIPLY        reduce using rule 31 (expression -> INT .)
    DIVIDE          reduce using rule 31 (expression -> INT .)
    EXP             reduce using rule 31 (expression -> INT .)
    EQUALCOMP       reduce using rule 31 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 31 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 31 (expression -> INT .)
    GREATER_THAN    reduce using rule 31 (expression -> INT .)
    LESS_THAN       reduce using rule 31 (expression -> INT .)
    NOTEQUAL        reduce using rule 31 (expression -> INT .)
    AND             reduce using rule 31 (expression -> INT .)
    OR              reduce using rule 31 (expression -> INT .)

  ! NOT             [ reduce using rule 31 (expression -> INT .) ]
  ! INT             [ reduce using rule 31 (expression -> INT .) ]
  ! FLOAT           [ reduce using rule 31 (expression -> INT .) ]
  ! IDENTIFIER      [ reduce using rule 31 (expression -> INT .) ]
  ! INTTYPE         [ reduce using rule 31 (expression -> INT .) ]
  ! FLOATTYPE       [ reduce using rule 31 (expression -> INT .) ]
  ! CHARTYPE        [ reduce using rule 31 (expression -> INT .) ]
  ! STRINGTYPE      [ reduce using rule 31 (expression -> INT .) ]
  ! IF              [ reduce using rule 31 (expression -> INT .) ]
  ! WHILE           [ reduce using rule 31 (expression -> INT .) ]
  ! FOR             [ reduce using rule 31 (expression -> INT .) ]
  ! VOID            [ reduce using rule 31 (expression -> INT .) ]
  ! PRINT           [ reduce using rule 31 (expression -> INT .) ]
  ! $end            [ reduce using rule 31 (expression -> INT .) ]
  ! SEMICOLON       [ reduce using rule 31 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 31 (expression -> INT .) ]


state 90

    (11) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    NOT             reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    INT             reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    INTTYPE         reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    FLOATTYPE       reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    CHARTYPE        reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    STRINGTYPE      reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    IF              reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    VOID            reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    $end            reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    SEMICOLON       reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 11 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 91

    (12) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    NOT             reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    INT             reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    INTTYPE         reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    FLOATTYPE       reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    CHARTYPE        reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    STRINGTYPE      reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    IF              reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    VOID            reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    $end            reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    SEMICOLON       reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 12 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 92

    (14) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (32) expression -> FLOAT .

  ! reduce/reduce conflict for NOT resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for INT resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for VOID resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for PRINT resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for $end resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    NOT             reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    INT             reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    FLOAT           reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    IDENTIFIER      reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    INTTYPE         reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    FLOATTYPE       reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    CHARTYPE        reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    STRINGTYPE      reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    IF              reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    WHILE           reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    FOR             reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    VOID            reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    PRINT           reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    $end            reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 14 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 32 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 32 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 32 (expression -> FLOAT .)
    DIVIDE          reduce using rule 32 (expression -> FLOAT .)
    EXP             reduce using rule 32 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 32 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 32 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 32 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 32 (expression -> FLOAT .)
    AND             reduce using rule 32 (expression -> FLOAT .)
    OR              reduce using rule 32 (expression -> FLOAT .)

  ! NOT             [ reduce using rule 32 (expression -> FLOAT .) ]
  ! INT             [ reduce using rule 32 (expression -> FLOAT .) ]
  ! FLOAT           [ reduce using rule 32 (expression -> FLOAT .) ]
  ! IDENTIFIER      [ reduce using rule 32 (expression -> FLOAT .) ]
  ! INTTYPE         [ reduce using rule 32 (expression -> FLOAT .) ]
  ! FLOATTYPE       [ reduce using rule 32 (expression -> FLOAT .) ]
  ! CHARTYPE        [ reduce using rule 32 (expression -> FLOAT .) ]
  ! STRINGTYPE      [ reduce using rule 32 (expression -> FLOAT .) ]
  ! IF              [ reduce using rule 32 (expression -> FLOAT .) ]
  ! WHILE           [ reduce using rule 32 (expression -> FLOAT .) ]
  ! FOR             [ reduce using rule 32 (expression -> FLOAT .) ]
  ! VOID            [ reduce using rule 32 (expression -> FLOAT .) ]
  ! PRINT           [ reduce using rule 32 (expression -> FLOAT .) ]
  ! $end            [ reduce using rule 32 (expression -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 32 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 32 (expression -> FLOAT .) ]


state 93

    (13) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    NOT             reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    INT             reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    FLOAT           reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    IDENTIFIER      reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    INTTYPE         reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    FLOATTYPE       reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    CHARTYPE        reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    STRINGTYPE      reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    IF              reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    WHILE           reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    FOR             reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    VOID            reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    PRINT           reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    $end            reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    SEMICOLON       reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 13 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 94

    (15) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    NOT             reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    INT             reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    FLOAT           reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    IDENTIFIER      reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    INTTYPE         reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    FLOATTYPE       reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    CHARTYPE        reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    STRINGTYPE      reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    IF              reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    WHILE           reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    FOR             reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    VOID            reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    PRINT           reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    $end            reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    SEMICOLON       reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 15 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 95

    (33) if_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE empty
    (34) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE if_statement

    LBRACE          shift and go to state 110


state 96

    (37) while_statement -> WHILE LPAREN expression RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 111


state 97

    (38) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 112

state 98

    (10) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (11) assign -> INTTYPE IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 70


state 99

    (12) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (14) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT

    EQUAL           shift and go to state 71


state 100

    (13) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR

    EQUAL           shift and go to state 72


state 101

    (15) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING

    EQUAL           shift and go to state 73


state 102

    (45) function_input -> type_identifier COMMA . function_input
    (45) function_input -> . type_identifier COMMA function_input
    (46) function_input -> . type_identifier
    (39) type_identifier -> . INTTYPE IDENTIFIER
    (40) type_identifier -> . CHARTYPE IDENTIFIER
    (41) type_identifier -> . FLOATTYPE IDENTIFIER
    (42) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 83
    CHARTYPE        shift and go to state 84
    FLOATTYPE       shift and go to state 85
    STRINGTYPE      shift and go to state 86

    type_identifier                shift and go to state 81
    function_input                 shift and go to state 113

state 103

    (43) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 114


state 104

    (39) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 39 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 39 (type_identifier -> INTTYPE IDENTIFIER .)


state 105

    (40) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 40 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 40 (type_identifier -> CHARTYPE IDENTIFIER .)


state 106

    (41) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 41 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 41 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 107

    (42) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 42 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 42 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 108

    (44) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 115


state 109

    (16) print -> PRINT LPAREN expression RPAREN .

    NOT             reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    INT             reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    FLOAT           reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    INTTYPE         reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    FLOATTYPE       reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    CHARTYPE        reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    STRINGTYPE      reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    VOID            reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 16 (print -> PRINT LPAREN expression RPAREN .)


state 110

    (33) if_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE empty
    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE if_statement
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 116

state 111

    (37) while_statement -> WHILE LPAREN expression RPAREN LBRACE . expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 117

state 112

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE expression RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    SEMICOLON       shift and go to state 118
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 113

    (45) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 45 (function_input -> type_identifier COMMA function_input .)


state 114

    (43) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 119

state 115

    (44) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 120


state 116

    (33) if_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE empty
    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE if_statement
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 121
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 117

    (37) while_statement -> WHILE LPAREN expression RPAREN LBRACE expression . RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 122
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 118

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE expression RBRACE
    (10) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (11) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (12) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (13) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (14) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (15) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 77
    FLOATTYPE       shift and go to state 78
    CHARTYPE        shift and go to state 79
    STRINGTYPE      shift and go to state 80

    assign                         shift and go to state 123

state 119

    (43) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression . RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 124
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 120

    (44) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 125

state 121

    (33) if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . empty
    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE if_statement
    (48) empty -> .

    ELSE            shift and go to state 127
    NOT             reduce using rule 48 (empty -> .)
    INT             reduce using rule 48 (empty -> .)
    FLOAT           reduce using rule 48 (empty -> .)
    IDENTIFIER      reduce using rule 48 (empty -> .)
    INTTYPE         reduce using rule 48 (empty -> .)
    FLOATTYPE       reduce using rule 48 (empty -> .)
    CHARTYPE        reduce using rule 48 (empty -> .)
    STRINGTYPE      reduce using rule 48 (empty -> .)
    IF              reduce using rule 48 (empty -> .)
    WHILE           reduce using rule 48 (empty -> .)
    FOR             reduce using rule 48 (empty -> .)
    VOID            reduce using rule 48 (empty -> .)
    PRINT           reduce using rule 48 (empty -> .)
    $end            reduce using rule 48 (empty -> .)

    empty                          shift and go to state 126

state 122

    (37) while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .

    NOT             reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    INT             reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    FLOAT           reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    IDENTIFIER      reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    INTTYPE         reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    FLOATTYPE       reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    CHARTYPE        reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    STRINGTYPE      reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    IF              reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    WHILE           reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    FOR             reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    VOID            reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    PRINT           reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 37 (while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE .)


state 123

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 128


state 124

    (43) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .

    NOT             reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    INT             reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FLOAT           reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    IDENTIFIER      reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    INTTYPE         reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FLOATTYPE       reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    CHARTYPE        reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    STRINGTYPE      reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    IF              reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    WHILE           reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FOR             reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    VOID            reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    PRINT           reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 43 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE .)


state 125

    (44) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression . RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 129
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 126

    (33) if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .

    NOT             reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    INT             reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    FLOAT           reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    IDENTIFIER      reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    INTTYPE         reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    FLOATTYPE       reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    CHARTYPE        reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    STRINGTYPE      reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    IF              reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    WHILE           reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    FOR             reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    VOID            reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    PRINT           reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)
    $end            reduce using rule 33 (if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty .)


state 127

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE . LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE . if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE . if_statement
    (34) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (33) if_statement -> . IF LPAREN expression RPAREN LBRACE expression RBRACE empty

    LBRACE          shift and go to state 131
    IF              shift and go to state 130

    if_else_statement              shift and go to state 132
    if_statement                   shift and go to state 133

state 128

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 134


state 129

    (44) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .

    NOT             reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    INT             reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FLOAT           reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    IDENTIFIER      reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    INTTYPE         reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FLOATTYPE       reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    CHARTYPE        reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    STRINGTYPE      reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    IF              reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    WHILE           reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    FOR             reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    VOID            reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    PRINT           reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 44 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE .)


state 130

    (34) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (33) if_statement -> IF . LPAREN expression RPAREN LBRACE expression RBRACE empty

    LPAREN          shift and go to state 135


state 131

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE . expression RBRACE empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 136

state 132

    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .

    NOT             reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    INT             reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    IF              reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)
    $end            reduce using rule 35 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement .)


state 133

    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .

    NOT             reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    INT             reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    IF              reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    WHILE           reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    FOR             reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    VOID            reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    PRINT           reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)
    $end            reduce using rule 36 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement .)


state 134

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . expression RBRACE
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 137

state 135

    (34) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE if_statement
    (33) if_statement -> IF LPAREN . expression RPAREN LBRACE expression RBRACE empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 138

state 136

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression . RBRACE empty
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 139
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 137

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression . RBRACE
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 140
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 138

    (34) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE if_statement
    (33) if_statement -> IF LPAREN expression . RPAREN LBRACE expression RBRACE empty
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RPAREN          shift and go to state 141
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 139

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE . empty
    (48) empty -> .

    NOT             reduce using rule 48 (empty -> .)
    INT             reduce using rule 48 (empty -> .)
    FLOAT           reduce using rule 48 (empty -> .)
    IDENTIFIER      reduce using rule 48 (empty -> .)
    INTTYPE         reduce using rule 48 (empty -> .)
    FLOATTYPE       reduce using rule 48 (empty -> .)
    CHARTYPE        reduce using rule 48 (empty -> .)
    STRINGTYPE      reduce using rule 48 (empty -> .)
    IF              reduce using rule 48 (empty -> .)
    WHILE           reduce using rule 48 (empty -> .)
    FOR             reduce using rule 48 (empty -> .)
    VOID            reduce using rule 48 (empty -> .)
    PRINT           reduce using rule 48 (empty -> .)
    $end            reduce using rule 48 (empty -> .)

    empty                          shift and go to state 142

state 140

    (38) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .

    NOT             reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    INT             reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    FLOAT           reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    IDENTIFIER      reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    INTTYPE         reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    FLOATTYPE       reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    CHARTYPE        reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    STRINGTYPE      reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    IF              reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    WHILE           reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    FOR             reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    VOID            reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    PRINT           reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 38 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE .)


state 141

    (34) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE if_statement
    (33) if_statement -> IF LPAREN expression RPAREN . LBRACE expression RBRACE empty

    LBRACE          shift and go to state 143


state 142

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .

    NOT             reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    INT             reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    FLOAT           reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    IDENTIFIER      reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    INTTYPE         reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    FLOATTYPE       reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    CHARTYPE        reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    STRINGTYPE      reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    IF              reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    WHILE           reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    FOR             reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    VOID            reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    PRINT           reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)
    $end            reduce using rule 34 (if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty .)


state 143

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE if_statement
    (33) if_statement -> IF LPAREN expression RPAREN LBRACE . expression RBRACE empty
    (17) expression -> . expression ADD expression
    (18) expression -> . expression SUBTRACT expression
    (19) expression -> . expression MULTIPLY expression
    (20) expression -> . expression DIVIDE expression
    (21) expression -> . expression EXP expression
    (22) expression -> . expression EQUALCOMP expression
    (23) expression -> . expression GREATER_THAN_EQUAL expression
    (24) expression -> . expression LESS_THAN_EQUAL expression
    (25) expression -> . expression GREATER_THAN expression
    (26) expression -> . expression LESS_THAN expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . NOT expression
    (29) expression -> . expression AND expression
    (30) expression -> . expression OR expression
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (47) expression -> . IDENTIFIER

    NOT             shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 144

state 144

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE if_statement
    (33) if_statement -> IF LPAREN expression RPAREN LBRACE expression . RBRACE empty
    (17) expression -> expression . ADD expression
    (18) expression -> expression . SUBTRACT expression
    (19) expression -> expression . MULTIPLY expression
    (20) expression -> expression . DIVIDE expression
    (21) expression -> expression . EXP expression
    (22) expression -> expression . EQUALCOMP expression
    (23) expression -> expression . GREATER_THAN_EQUAL expression
    (24) expression -> expression . LESS_THAN_EQUAL expression
    (25) expression -> expression . GREATER_THAN expression
    (26) expression -> expression . LESS_THAN expression
    (27) expression -> expression . NOTEQUAL expression
    (29) expression -> expression . AND expression
    (30) expression -> expression . OR expression

    RBRACE          shift and go to state 145
    ADD             shift and go to state 26
    SUBTRACT        shift and go to state 27
    MULTIPLY        shift and go to state 28
    DIVIDE          shift and go to state 29
    EXP             shift and go to state 30
    EQUALCOMP       shift and go to state 31
    GREATER_THAN_EQUAL shift and go to state 32
    LESS_THAN_EQUAL shift and go to state 33
    GREATER_THAN    shift and go to state 34
    LESS_THAN       shift and go to state 35
    NOTEQUAL        shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 145

    (34) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE LBRACE expression RBRACE empty
    (35) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE if_else_statement
    (36) if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE if_statement
    (33) if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE . empty
    (48) empty -> .

    ELSE            shift and go to state 127
    NOT             reduce using rule 48 (empty -> .)
    INT             reduce using rule 48 (empty -> .)
    FLOAT           reduce using rule 48 (empty -> .)
    IDENTIFIER      reduce using rule 48 (empty -> .)
    INTTYPE         reduce using rule 48 (empty -> .)
    FLOATTYPE       reduce using rule 48 (empty -> .)
    CHARTYPE        reduce using rule 48 (empty -> .)
    STRINGTYPE      reduce using rule 48 (empty -> .)
    IF              reduce using rule 48 (empty -> .)
    WHILE           reduce using rule 48 (empty -> .)
    FOR             reduce using rule 48 (empty -> .)
    VOID            reduce using rule 48 (empty -> .)
    PRINT           reduce using rule 48 (empty -> .)
    $end            reduce using rule 48 (empty -> .)

    empty                          shift and go to state 126
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 46 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 46 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for EXP in state 46 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for ADD in state 68 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for EXP in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for ADD in state 69 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for EXP in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: reduce/reduce conflict in state 89 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 89
WARNING: reduce/reduce conflict in state 92 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 92
