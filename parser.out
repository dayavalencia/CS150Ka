Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ka
Rule 1     ka -> expression SEMICOLON ka
Rule 2     ka -> assign SEMICOLON ka
Rule 3     ka -> print SEMICOLON ka
Rule 4     ka -> input SEMICOLON ka
Rule 5     ka -> if_statement ka
Rule 6     ka -> if_else_statement ka
Rule 7     ka -> while_statement ka
Rule 8     ka -> for_statement ka
Rule 9     ka -> function_statement ka
Rule 10    ka -> comment ka
Rule 11    ka -> empty
Rule 12    legal -> expression SEMICOLON legal
Rule 13    legal -> assign SEMICOLON legal
Rule 14    legal -> print SEMICOLON legal
Rule 15    legal -> input SEMICOLON legal
Rule 16    legal -> return SEMICOLON legal
Rule 17    legal -> if_statement legal
Rule 18    legal -> if_else_statement legal
Rule 19    legal -> while_statement legal
Rule 20    legal -> for_statement legal
Rule 21    legal -> empty
Rule 22    comment -> COMMENT
Rule 23    assign -> INTTYPE IDENTIFIER EQUAL INT
Rule 24    assign -> INTTYPE IDENTIFIER EQUAL expression
Rule 25    assign -> FLOATTYPE IDENTIFIER EQUAL expression
Rule 26    assign -> CHARTYPE IDENTIFIER EQUAL CHAR
Rule 27    assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT
Rule 28    assign -> STRINGTYPE IDENTIFIER EQUAL STRING
Rule 29    print -> PRINT LPAREN expression RPAREN
Rule 30    input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN
Rule 31    return -> RETURN expression
Rule 32    return -> RETURN IDENTIFIER
Rule 33    expression -> expression ADD expression
Rule 34    expression -> expression SUBTRACT expression
Rule 35    expression -> expression MULTIPLY expression
Rule 36    expression -> expression DIVIDE expression
Rule 37    expression -> expression EXP expression
Rule 38    expression -> expression EQUALCOMP expression
Rule 39    expression -> expression GREATER_THAN_EQUAL expression
Rule 40    expression -> expression LESS_THAN_EQUAL expression
Rule 41    expression -> expression GREATER_THAN expression
Rule 42    expression -> expression LESS_THAN expression
Rule 43    expression -> expression NOTEQUAL expression
Rule 44    expression -> NOT expression
Rule 45    expression -> expression AND expression
Rule 46    expression -> expression OR expression
Rule 47    expression -> INT
Rule 48    expression -> FLOAT
Rule 49    expression -> CONTINUE
Rule 50    expression -> BREAK
Rule 51    if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE
Rule 52    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
Rule 53    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
Rule 54    if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
Rule 55    while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE
Rule 56    for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
Rule 57    type_identifier -> INTTYPE IDENTIFIER
Rule 58    type_identifier -> CHARTYPE IDENTIFIER
Rule 59    type_identifier -> FLOATTYPE IDENTIFIER
Rule 60    type_identifier -> STRINGTYPE IDENTIFIER
Rule 61    function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 62    function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
Rule 63    function_input -> type_identifier COMMA function_input
Rule 64    function_input -> type_identifier
Rule 65    expression -> IDENTIFIER
Rule 66    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 33
AND                  : 45
BREAK                : 50
CHAR                 : 26
CHARTYPE             : 26 58
COMMA                : 63
COMMENT              : 22
CONTINUE             : 49
DIVIDE               : 36
ELSE                 : 52 53 54
EQUAL                : 23 24 25 26 27 28 30
EQUALCOMP            : 38
EXP                  : 37
FLOAT                : 27 48
FLOATTYPE            : 25 27 59
FOR                  : 56
GREATER_THAN         : 41
GREATER_THAN_EQUAL   : 39
IDENTIFIER           : 23 24 25 26 27 28 30 32 57 58 59 60 62 65
IF                   : 51 52 53 54
INPUT                : 30
INT                  : 23 47
INTTYPE              : 23 24 57
LBRACE               : 51 52 52 53 54 55 56 61 62
LESS_THAN            : 42
LESS_THAN_EQUAL      : 40
LPAREN               : 29 30 51 52 53 54 55 56 61 62
MULTIPLY             : 35
NOT                  : 44
NOTEQUAL             : 43
OR                   : 46
PRINT                : 29
RBRACE               : 51 52 52 53 54 55 56 61 62
RETURN               : 31 32
RPAREN               : 29 30 51 52 53 54 55 56 61 62
SEMICOLON            : 1 2 3 4 12 13 14 15 16 56 56
STRING               : 28
STRINGTYPE           : 28 60
SUBTRACT             : 34
VOID                 : 62
WHILE                : 55
error                : 

Nonterminals, with rules where they appear

assign               : 2 13 56 56
comment              : 10
empty                : 11 21
expression           : 1 12 24 25 29 31 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 45 45 46 46 51 52 53 54 55 56
for_statement        : 8 20
function_input       : 61 62 63
function_statement   : 9
if_else_statement    : 6 18 53
if_statement         : 5 17 54
input                : 4 15
ka                   : 1 2 3 4 5 6 7 8 9 10 0
legal                : 12 13 14 15 16 17 18 19 20 51 52 52 53 54 55 56 61 62
print                : 3 14
return               : 16
type_identifier      : 61 63 64
while_statement      : 7 19

Parsing method: LALR

state 0

    (0) S' -> . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    ka                             shift and go to state 1
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 1

    (0) S' -> ka .



state 2

    (1) ka -> expression . SEMICOLON ka
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       shift and go to state 30
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 3

    (2) ka -> assign . SEMICOLON ka

    SEMICOLON       shift and go to state 44


state 4

    (3) ka -> print . SEMICOLON ka

    SEMICOLON       shift and go to state 45


state 5

    (4) ka -> input . SEMICOLON ka

    SEMICOLON       shift and go to state 46


state 6

    (5) ka -> if_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    if_statement                   shift and go to state 6
    ka                             shift and go to state 47
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 7

    (6) ka -> if_else_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    if_else_statement              shift and go to state 7
    ka                             shift and go to state 48
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 8

    (7) ka -> while_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    while_statement                shift and go to state 8
    ka                             shift and go to state 49
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 9

    (8) ka -> for_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    for_statement                  shift and go to state 9
    ka                             shift and go to state 50
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 10

    (9) ka -> function_statement . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    function_statement             shift and go to state 10
    ka                             shift and go to state 51
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 11

    (10) ka -> comment . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    comment                        shift and go to state 11
    ka                             shift and go to state 52
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 12

    (11) ka -> empty .

    $end            reduce using rule 11 (ka -> empty .)


state 13

    (44) expression -> NOT . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 53

state 14

    (47) expression -> INT .

    SEMICOLON       reduce using rule 47 (expression -> INT .)
    ADD             reduce using rule 47 (expression -> INT .)
    SUBTRACT        reduce using rule 47 (expression -> INT .)
    MULTIPLY        reduce using rule 47 (expression -> INT .)
    DIVIDE          reduce using rule 47 (expression -> INT .)
    EXP             reduce using rule 47 (expression -> INT .)
    EQUALCOMP       reduce using rule 47 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> INT .)
    GREATER_THAN    reduce using rule 47 (expression -> INT .)
    LESS_THAN       reduce using rule 47 (expression -> INT .)
    NOTEQUAL        reduce using rule 47 (expression -> INT .)
    AND             reduce using rule 47 (expression -> INT .)
    OR              reduce using rule 47 (expression -> INT .)
    RPAREN          reduce using rule 47 (expression -> INT .)


state 15

    (48) expression -> FLOAT .

    SEMICOLON       reduce using rule 48 (expression -> FLOAT .)
    ADD             reduce using rule 48 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 48 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 48 (expression -> FLOAT .)
    DIVIDE          reduce using rule 48 (expression -> FLOAT .)
    EXP             reduce using rule 48 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 48 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 48 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 48 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 48 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 48 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 48 (expression -> FLOAT .)
    AND             reduce using rule 48 (expression -> FLOAT .)
    OR              reduce using rule 48 (expression -> FLOAT .)
    RPAREN          reduce using rule 48 (expression -> FLOAT .)


state 16

    (49) expression -> CONTINUE .

    SEMICOLON       reduce using rule 49 (expression -> CONTINUE .)
    ADD             reduce using rule 49 (expression -> CONTINUE .)
    SUBTRACT        reduce using rule 49 (expression -> CONTINUE .)
    MULTIPLY        reduce using rule 49 (expression -> CONTINUE .)
    DIVIDE          reduce using rule 49 (expression -> CONTINUE .)
    EXP             reduce using rule 49 (expression -> CONTINUE .)
    EQUALCOMP       reduce using rule 49 (expression -> CONTINUE .)
    GREATER_THAN_EQUAL reduce using rule 49 (expression -> CONTINUE .)
    LESS_THAN_EQUAL reduce using rule 49 (expression -> CONTINUE .)
    GREATER_THAN    reduce using rule 49 (expression -> CONTINUE .)
    LESS_THAN       reduce using rule 49 (expression -> CONTINUE .)
    NOTEQUAL        reduce using rule 49 (expression -> CONTINUE .)
    AND             reduce using rule 49 (expression -> CONTINUE .)
    OR              reduce using rule 49 (expression -> CONTINUE .)
    RPAREN          reduce using rule 49 (expression -> CONTINUE .)


state 17

    (50) expression -> BREAK .

    SEMICOLON       reduce using rule 50 (expression -> BREAK .)
    ADD             reduce using rule 50 (expression -> BREAK .)
    SUBTRACT        reduce using rule 50 (expression -> BREAK .)
    MULTIPLY        reduce using rule 50 (expression -> BREAK .)
    DIVIDE          reduce using rule 50 (expression -> BREAK .)
    EXP             reduce using rule 50 (expression -> BREAK .)
    EQUALCOMP       reduce using rule 50 (expression -> BREAK .)
    GREATER_THAN_EQUAL reduce using rule 50 (expression -> BREAK .)
    LESS_THAN_EQUAL reduce using rule 50 (expression -> BREAK .)
    GREATER_THAN    reduce using rule 50 (expression -> BREAK .)
    LESS_THAN       reduce using rule 50 (expression -> BREAK .)
    NOTEQUAL        reduce using rule 50 (expression -> BREAK .)
    AND             reduce using rule 50 (expression -> BREAK .)
    OR              reduce using rule 50 (expression -> BREAK .)
    RPAREN          reduce using rule 50 (expression -> BREAK .)


state 18

    (65) expression -> IDENTIFIER .
    (30) input -> IDENTIFIER . EQUAL INPUT LPAREN RPAREN

    SEMICOLON       reduce using rule 65 (expression -> IDENTIFIER .)
    ADD             reduce using rule 65 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 65 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 65 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (expression -> IDENTIFIER .)
    EXP             reduce using rule 65 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 65 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 65 (expression -> IDENTIFIER .)
    AND             reduce using rule 65 (expression -> IDENTIFIER .)
    OR              reduce using rule 65 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 55


state 19

    (23) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (24) assign -> INTTYPE . IDENTIFIER EQUAL expression
    (57) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 20

    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT
    (59) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 21

    (26) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR
    (58) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 22

    (28) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING
    (60) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 59


state 23

    (29) print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 60


state 24

    (51) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement

    LPAREN          shift and go to state 61


state 25

    (55) while_statement -> WHILE . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 62


state 26

    (56) for_statement -> FOR . LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 63


state 27

    (61) function_statement -> type_identifier . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 64


state 28

    (62) function_statement -> VOID . IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE

    IDENTIFIER      shift and go to state 65


state 29

    (22) comment -> COMMENT .

    NOT             reduce using rule 22 (comment -> COMMENT .)
    INT             reduce using rule 22 (comment -> COMMENT .)
    FLOAT           reduce using rule 22 (comment -> COMMENT .)
    CONTINUE        reduce using rule 22 (comment -> COMMENT .)
    BREAK           reduce using rule 22 (comment -> COMMENT .)
    IDENTIFIER      reduce using rule 22 (comment -> COMMENT .)
    INTTYPE         reduce using rule 22 (comment -> COMMENT .)
    FLOATTYPE       reduce using rule 22 (comment -> COMMENT .)
    CHARTYPE        reduce using rule 22 (comment -> COMMENT .)
    STRINGTYPE      reduce using rule 22 (comment -> COMMENT .)
    PRINT           reduce using rule 22 (comment -> COMMENT .)
    IF              reduce using rule 22 (comment -> COMMENT .)
    WHILE           reduce using rule 22 (comment -> COMMENT .)
    FOR             reduce using rule 22 (comment -> COMMENT .)
    VOID            reduce using rule 22 (comment -> COMMENT .)
    COMMENT         reduce using rule 22 (comment -> COMMENT .)
    $end            reduce using rule 22 (comment -> COMMENT .)


state 30

    (1) ka -> expression SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    expression                     shift and go to state 2
    ka                             shift and go to state 66
    assign                         shift and go to state 3
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 31

    (33) expression -> expression ADD . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 67

state 32

    (34) expression -> expression SUBTRACT . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 68

state 33

    (35) expression -> expression MULTIPLY . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 69

state 34

    (36) expression -> expression DIVIDE . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 70

state 35

    (37) expression -> expression EXP . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 71

state 36

    (38) expression -> expression EQUALCOMP . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 72

state 37

    (39) expression -> expression GREATER_THAN_EQUAL . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 73

state 38

    (40) expression -> expression LESS_THAN_EQUAL . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 74

state 39

    (41) expression -> expression GREATER_THAN . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 75

state 40

    (42) expression -> expression LESS_THAN . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 76

state 41

    (43) expression -> expression NOTEQUAL . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 77

state 42

    (45) expression -> expression AND . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 78

state 43

    (46) expression -> expression OR . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 79

state 44

    (2) ka -> assign SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    assign                         shift and go to state 3
    ka                             shift and go to state 80
    expression                     shift and go to state 2
    print                          shift and go to state 4
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 45

    (3) ka -> print SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    print                          shift and go to state 4
    ka                             shift and go to state 81
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    input                          shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 46

    (4) ka -> input SEMICOLON . ka
    (1) ka -> . expression SEMICOLON ka
    (2) ka -> . assign SEMICOLON ka
    (3) ka -> . print SEMICOLON ka
    (4) ka -> . input SEMICOLON ka
    (5) ka -> . if_statement ka
    (6) ka -> . if_else_statement ka
    (7) ka -> . while_statement ka
    (8) ka -> . for_statement ka
    (9) ka -> . function_statement ka
    (10) ka -> . comment ka
    (11) ka -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (61) function_statement -> . type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE
    (62) function_statement -> . VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE
    (22) comment -> . COMMENT
    (66) empty -> .
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 19
    FLOATTYPE       shift and go to state 20
    CHARTYPE        shift and go to state 21
    STRINGTYPE      shift and go to state 22
    PRINT           shift and go to state 23
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    VOID            shift and go to state 28
    COMMENT         shift and go to state 29
    $end            reduce using rule 66 (empty -> .)

    input                          shift and go to state 5
    ka                             shift and go to state 82
    expression                     shift and go to state 2
    assign                         shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    function_statement             shift and go to state 10
    comment                        shift and go to state 11
    empty                          shift and go to state 12
    type_identifier                shift and go to state 27

state 47

    (5) ka -> if_statement ka .

    $end            reduce using rule 5 (ka -> if_statement ka .)


state 48

    (6) ka -> if_else_statement ka .

    $end            reduce using rule 6 (ka -> if_else_statement ka .)


state 49

    (7) ka -> while_statement ka .

    $end            reduce using rule 7 (ka -> while_statement ka .)


state 50

    (8) ka -> for_statement ka .

    $end            reduce using rule 8 (ka -> for_statement ka .)


state 51

    (9) ka -> function_statement ka .

    $end            reduce using rule 9 (ka -> function_statement ka .)


state 52

    (10) ka -> comment ka .

    $end            reduce using rule 10 (ka -> comment ka .)


state 53

    (44) expression -> NOT expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 44 (expression -> NOT expression .)
    RPAREN          reduce using rule 44 (expression -> NOT expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! ADD             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! SUBTRACT        [ reduce using rule 44 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! EQUALCOMP       [ reduce using rule 44 (expression -> NOT expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 44 (expression -> NOT expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 44 (expression -> NOT expression .) ]
  ! GREATER_THAN    [ reduce using rule 44 (expression -> NOT expression .) ]
  ! LESS_THAN       [ reduce using rule 44 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 44 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 44 (expression -> NOT expression .) ]


state 54

    (65) expression -> IDENTIFIER .

    ADD             reduce using rule 65 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 65 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 65 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (expression -> IDENTIFIER .)
    EXP             reduce using rule 65 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 65 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 65 (expression -> IDENTIFIER .)
    AND             reduce using rule 65 (expression -> IDENTIFIER .)
    OR              reduce using rule 65 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 65 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (expression -> IDENTIFIER .)


state 55

    (30) input -> IDENTIFIER EQUAL . INPUT LPAREN RPAREN

    INPUT           shift and go to state 83


state 56

    (23) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (24) assign -> INTTYPE IDENTIFIER . EQUAL expression
    (57) type_identifier -> INTTYPE IDENTIFIER .

    EQUAL           shift and go to state 84
    LPAREN          reduce using rule 57 (type_identifier -> INTTYPE IDENTIFIER .)


state 57

    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT
    (59) type_identifier -> FLOATTYPE IDENTIFIER .

    EQUAL           shift and go to state 85
    LPAREN          reduce using rule 59 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 58

    (26) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR
    (58) type_identifier -> CHARTYPE IDENTIFIER .

    EQUAL           shift and go to state 86
    LPAREN          reduce using rule 58 (type_identifier -> CHARTYPE IDENTIFIER .)


state 59

    (28) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING
    (60) type_identifier -> STRINGTYPE IDENTIFIER .

    EQUAL           shift and go to state 87
    LPAREN          reduce using rule 60 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 60

    (29) print -> PRINT LPAREN . expression RPAREN
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 88

state 61

    (51) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 89

state 62

    (55) while_statement -> WHILE LPAREN . expression RPAREN LBRACE legal RBRACE
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 90

state 63

    (56) for_statement -> FOR LPAREN . assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95

    assign                         shift and go to state 91

state 64

    (61) function_statement -> type_identifier LPAREN . function_input RPAREN LBRACE legal RBRACE
    (63) function_input -> . type_identifier COMMA function_input
    (64) function_input -> . type_identifier
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    type_identifier                shift and go to state 96
    function_input                 shift and go to state 97

state 65

    (62) function_statement -> VOID IDENTIFIER . LPAREN function_input RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 102


state 66

    (1) ka -> expression SEMICOLON ka .

    $end            reduce using rule 1 (ka -> expression SEMICOLON ka .)


state 67

    (33) expression -> expression ADD expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression ADD expression .)
    ADD             reduce using rule 33 (expression -> expression ADD expression .)
    SUBTRACT        reduce using rule 33 (expression -> expression ADD expression .)
    EQUALCOMP       reduce using rule 33 (expression -> expression ADD expression .)
    GREATER_THAN_EQUAL reduce using rule 33 (expression -> expression ADD expression .)
    LESS_THAN_EQUAL reduce using rule 33 (expression -> expression ADD expression .)
    GREATER_THAN    reduce using rule 33 (expression -> expression ADD expression .)
    LESS_THAN       reduce using rule 33 (expression -> expression ADD expression .)
    NOTEQUAL        reduce using rule 33 (expression -> expression ADD expression .)
    AND             reduce using rule 33 (expression -> expression ADD expression .)
    OR              reduce using rule 33 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 33 (expression -> expression ADD expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! MULTIPLY        [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! EXP             [ reduce using rule 33 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 31 ]
  ! SUBTRACT        [ shift and go to state 32 ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 68

    (34) expression -> expression SUBTRACT expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression SUBTRACT expression .)
    ADD             reduce using rule 34 (expression -> expression SUBTRACT expression .)
    SUBTRACT        reduce using rule 34 (expression -> expression SUBTRACT expression .)
    EQUALCOMP       reduce using rule 34 (expression -> expression SUBTRACT expression .)
    GREATER_THAN_EQUAL reduce using rule 34 (expression -> expression SUBTRACT expression .)
    LESS_THAN_EQUAL reduce using rule 34 (expression -> expression SUBTRACT expression .)
    GREATER_THAN    reduce using rule 34 (expression -> expression SUBTRACT expression .)
    LESS_THAN       reduce using rule 34 (expression -> expression SUBTRACT expression .)
    NOTEQUAL        reduce using rule 34 (expression -> expression SUBTRACT expression .)
    AND             reduce using rule 34 (expression -> expression SUBTRACT expression .)
    OR              reduce using rule 34 (expression -> expression SUBTRACT expression .)
    RPAREN          reduce using rule 34 (expression -> expression SUBTRACT expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! MULTIPLY        [ reduce using rule 34 (expression -> expression SUBTRACT expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression SUBTRACT expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> expression SUBTRACT expression .) ]
  ! ADD             [ shift and go to state 31 ]
  ! SUBTRACT        [ shift and go to state 32 ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 69

    (35) expression -> expression MULTIPLY expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 35 (expression -> expression MULTIPLY expression .)
    ADD             reduce using rule 35 (expression -> expression MULTIPLY expression .)
    SUBTRACT        reduce using rule 35 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 35 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 35 (expression -> expression MULTIPLY expression .)
    EXP             reduce using rule 35 (expression -> expression MULTIPLY expression .)
    EQUALCOMP       reduce using rule 35 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_EQUAL reduce using rule 35 (expression -> expression MULTIPLY expression .)
    LESS_THAN_EQUAL reduce using rule 35 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 35 (expression -> expression MULTIPLY expression .)
    NOTEQUAL        reduce using rule 35 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 35 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 35 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 35 (expression -> expression MULTIPLY expression .)

  ! ADD             [ shift and go to state 31 ]
  ! SUBTRACT        [ shift and go to state 32 ]
  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! EXP             [ shift and go to state 35 ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 70

    (36) expression -> expression DIVIDE expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 36 (expression -> expression DIVIDE expression .)
    ADD             reduce using rule 36 (expression -> expression DIVIDE expression .)
    SUBTRACT        reduce using rule 36 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 36 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 36 (expression -> expression DIVIDE expression .)
    EXP             reduce using rule 36 (expression -> expression DIVIDE expression .)
    EQUALCOMP       reduce using rule 36 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 36 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 36 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 36 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 36 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 36 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 36 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 36 (expression -> expression DIVIDE expression .)

  ! ADD             [ shift and go to state 31 ]
  ! SUBTRACT        [ shift and go to state 32 ]
  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! EXP             [ shift and go to state 35 ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 71

    (37) expression -> expression EXP expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 37 (expression -> expression EXP expression .)
    ADD             reduce using rule 37 (expression -> expression EXP expression .)
    SUBTRACT        reduce using rule 37 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 37 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 37 (expression -> expression EXP expression .)
    EXP             reduce using rule 37 (expression -> expression EXP expression .)
    EQUALCOMP       reduce using rule 37 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 37 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 37 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 37 (expression -> expression EXP expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression EXP expression .)
    AND             reduce using rule 37 (expression -> expression EXP expression .)
    OR              reduce using rule 37 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 37 (expression -> expression EXP expression .)

  ! ADD             [ shift and go to state 31 ]
  ! SUBTRACT        [ shift and go to state 32 ]
  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! EXP             [ shift and go to state 35 ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 72

    (38) expression -> expression EQUALCOMP expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    EQUALCOMP       reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN_EQUAL reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    LESS_THAN_EQUAL reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    LESS_THAN       reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    AND             reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    OR              reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    RPAREN          reduce using rule 38 (expression -> expression EQUALCOMP expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 38 (expression -> expression EQUALCOMP expression .) ]
  ! SUBTRACT        [ reduce using rule 38 (expression -> expression EQUALCOMP expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression EQUALCOMP expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression EQUALCOMP expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> expression EQUALCOMP expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 73

    (39) expression -> expression GREATER_THAN_EQUAL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 39 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 74

    (40) expression -> expression LESS_THAN_EQUAL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUALCOMP       reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    NOTEQUAL        reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 40 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 75

    (41) expression -> expression GREATER_THAN expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    EQUALCOMP       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    NOTEQUAL        reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 76

    (42) expression -> expression LESS_THAN expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    EQUALCOMP       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 42 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    NOTEQUAL        reduce using rule 42 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 42 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 42 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 42 (expression -> expression LESS_THAN expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! SUBTRACT        [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 77

    (43) expression -> expression NOTEQUAL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    EQUALCOMP       reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    LESS_THAN       reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 43 (expression -> expression NOTEQUAL expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35

  ! ADD             [ reduce using rule 43 (expression -> expression NOTEQUAL expression .) ]
  ! SUBTRACT        [ reduce using rule 43 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression NOTEQUAL expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALCOMP       [ shift and go to state 36 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 37 ]
  ! LESS_THAN_EQUAL [ shift and go to state 38 ]
  ! GREATER_THAN    [ shift and go to state 39 ]
  ! LESS_THAN       [ shift and go to state 40 ]
  ! NOTEQUAL        [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 78

    (45) expression -> expression AND expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 45 (expression -> expression AND expression .)
    RPAREN          reduce using rule 45 (expression -> expression AND expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! ADD             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! SUBTRACT        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! EQUALCOMP       [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression AND expression .) ]


state 79

    (46) expression -> expression OR expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for EQUALCOMP resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 46 (expression -> expression OR expression .)
    RPAREN          reduce using rule 46 (expression -> expression OR expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43

  ! ADD             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! SUBTRACT        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! EQUALCOMP       [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression OR expression .) ]


state 80

    (2) ka -> assign SEMICOLON ka .

    $end            reduce using rule 2 (ka -> assign SEMICOLON ka .)


state 81

    (3) ka -> print SEMICOLON ka .

    $end            reduce using rule 3 (ka -> print SEMICOLON ka .)


state 82

    (4) ka -> input SEMICOLON ka .

    $end            reduce using rule 4 (ka -> input SEMICOLON ka .)


state 83

    (30) input -> IDENTIFIER EQUAL INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 103


state 84

    (23) assign -> INTTYPE IDENTIFIER EQUAL . INT
    (24) assign -> INTTYPE IDENTIFIER EQUAL . expression
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    INT             shift and go to state 104
    NOT             shift and go to state 13
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 105

state 85

    (25) assign -> FLOATTYPE IDENTIFIER EQUAL . expression
    (27) assign -> FLOATTYPE IDENTIFIER EQUAL . FLOAT
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    FLOAT           shift and go to state 107
    NOT             shift and go to state 13
    INT             shift and go to state 14
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 106

state 86

    (26) assign -> CHARTYPE IDENTIFIER EQUAL . CHAR

    CHAR            shift and go to state 108


state 87

    (28) assign -> STRINGTYPE IDENTIFIER EQUAL . STRING

    STRING          shift and go to state 109


state 88

    (29) print -> PRINT LPAREN expression . RPAREN
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    RPAREN          shift and go to state 110
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 89

    (51) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    RPAREN          shift and go to state 111
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 90

    (55) while_statement -> WHILE LPAREN expression . RPAREN LBRACE legal RBRACE
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    RPAREN          shift and go to state 112
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 91

    (56) for_statement -> FOR LPAREN assign . SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE

    SEMICOLON       shift and go to state 113


state 92

    (23) assign -> INTTYPE . IDENTIFIER EQUAL INT
    (24) assign -> INTTYPE . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 114


state 93

    (25) assign -> FLOATTYPE . IDENTIFIER EQUAL expression
    (27) assign -> FLOATTYPE . IDENTIFIER EQUAL FLOAT

    IDENTIFIER      shift and go to state 115


state 94

    (26) assign -> CHARTYPE . IDENTIFIER EQUAL CHAR

    IDENTIFIER      shift and go to state 116


state 95

    (28) assign -> STRINGTYPE . IDENTIFIER EQUAL STRING

    IDENTIFIER      shift and go to state 117


state 96

    (63) function_input -> type_identifier . COMMA function_input
    (64) function_input -> type_identifier .

    COMMA           shift and go to state 118
    RPAREN          reduce using rule 64 (function_input -> type_identifier .)


state 97

    (61) function_statement -> type_identifier LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 119


state 98

    (57) type_identifier -> INTTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 120


state 99

    (58) type_identifier -> CHARTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 121


state 100

    (59) type_identifier -> FLOATTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 122


state 101

    (60) type_identifier -> STRINGTYPE . IDENTIFIER

    IDENTIFIER      shift and go to state 123


state 102

    (62) function_statement -> VOID IDENTIFIER LPAREN . function_input RPAREN LBRACE legal RBRACE
    (63) function_input -> . type_identifier COMMA function_input
    (64) function_input -> . type_identifier
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    function_input                 shift and go to state 124
    type_identifier                shift and go to state 96

state 103

    (30) input -> IDENTIFIER EQUAL INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 125


state 104

    (23) assign -> INTTYPE IDENTIFIER EQUAL INT .
    (47) expression -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    SEMICOLON       reduce using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    RPAREN          reduce using rule 23 (assign -> INTTYPE IDENTIFIER EQUAL INT .)
    ADD             reduce using rule 47 (expression -> INT .)
    SUBTRACT        reduce using rule 47 (expression -> INT .)
    MULTIPLY        reduce using rule 47 (expression -> INT .)
    DIVIDE          reduce using rule 47 (expression -> INT .)
    EXP             reduce using rule 47 (expression -> INT .)
    EQUALCOMP       reduce using rule 47 (expression -> INT .)
    GREATER_THAN_EQUAL reduce using rule 47 (expression -> INT .)
    LESS_THAN_EQUAL reduce using rule 47 (expression -> INT .)
    GREATER_THAN    reduce using rule 47 (expression -> INT .)
    LESS_THAN       reduce using rule 47 (expression -> INT .)
    NOTEQUAL        reduce using rule 47 (expression -> INT .)
    AND             reduce using rule 47 (expression -> INT .)
    OR              reduce using rule 47 (expression -> INT .)

  ! SEMICOLON       [ reduce using rule 47 (expression -> INT .) ]
  ! RPAREN          [ reduce using rule 47 (expression -> INT .) ]


state 105

    (24) assign -> INTTYPE IDENTIFIER EQUAL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 24 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 24 (assign -> INTTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 106

    (25) assign -> FLOATTYPE IDENTIFIER EQUAL expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    RPAREN          reduce using rule 25 (assign -> FLOATTYPE IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 107

    (27) assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .
    (48) expression -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    SEMICOLON       reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    RPAREN          reduce using rule 27 (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT .)
    ADD             reduce using rule 48 (expression -> FLOAT .)
    SUBTRACT        reduce using rule 48 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 48 (expression -> FLOAT .)
    DIVIDE          reduce using rule 48 (expression -> FLOAT .)
    EXP             reduce using rule 48 (expression -> FLOAT .)
    EQUALCOMP       reduce using rule 48 (expression -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 48 (expression -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 48 (expression -> FLOAT .)
    GREATER_THAN    reduce using rule 48 (expression -> FLOAT .)
    LESS_THAN       reduce using rule 48 (expression -> FLOAT .)
    NOTEQUAL        reduce using rule 48 (expression -> FLOAT .)
    AND             reduce using rule 48 (expression -> FLOAT .)
    OR              reduce using rule 48 (expression -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 48 (expression -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 48 (expression -> FLOAT .) ]


state 108

    (26) assign -> CHARTYPE IDENTIFIER EQUAL CHAR .

    SEMICOLON       reduce using rule 26 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)
    RPAREN          reduce using rule 26 (assign -> CHARTYPE IDENTIFIER EQUAL CHAR .)


state 109

    (28) assign -> STRINGTYPE IDENTIFIER EQUAL STRING .

    SEMICOLON       reduce using rule 28 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)
    RPAREN          reduce using rule 28 (assign -> STRINGTYPE IDENTIFIER EQUAL STRING .)


state 110

    (29) print -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 29 (print -> PRINT LPAREN expression RPAREN .)


state 111

    (51) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE
    (52) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement

    LBRACE          shift and go to state 126


state 112

    (55) while_statement -> WHILE LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 127


state 113

    (56) for_statement -> FOR LPAREN assign SEMICOLON . expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 128

state 114

    (23) assign -> INTTYPE IDENTIFIER . EQUAL INT
    (24) assign -> INTTYPE IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 84


state 115

    (25) assign -> FLOATTYPE IDENTIFIER . EQUAL expression
    (27) assign -> FLOATTYPE IDENTIFIER . EQUAL FLOAT

    EQUAL           shift and go to state 85


state 116

    (26) assign -> CHARTYPE IDENTIFIER . EQUAL CHAR

    EQUAL           shift and go to state 86


state 117

    (28) assign -> STRINGTYPE IDENTIFIER . EQUAL STRING

    EQUAL           shift and go to state 87


state 118

    (63) function_input -> type_identifier COMMA . function_input
    (63) function_input -> . type_identifier COMMA function_input
    (64) function_input -> . type_identifier
    (57) type_identifier -> . INTTYPE IDENTIFIER
    (58) type_identifier -> . CHARTYPE IDENTIFIER
    (59) type_identifier -> . FLOATTYPE IDENTIFIER
    (60) type_identifier -> . STRINGTYPE IDENTIFIER

    INTTYPE         shift and go to state 98
    CHARTYPE        shift and go to state 99
    FLOATTYPE       shift and go to state 100
    STRINGTYPE      shift and go to state 101

    type_identifier                shift and go to state 96
    function_input                 shift and go to state 129

state 119

    (61) function_statement -> type_identifier LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 130


state 120

    (57) type_identifier -> INTTYPE IDENTIFIER .

    COMMA           reduce using rule 57 (type_identifier -> INTTYPE IDENTIFIER .)
    RPAREN          reduce using rule 57 (type_identifier -> INTTYPE IDENTIFIER .)


state 121

    (58) type_identifier -> CHARTYPE IDENTIFIER .

    COMMA           reduce using rule 58 (type_identifier -> CHARTYPE IDENTIFIER .)
    RPAREN          reduce using rule 58 (type_identifier -> CHARTYPE IDENTIFIER .)


state 122

    (59) type_identifier -> FLOATTYPE IDENTIFIER .

    COMMA           reduce using rule 59 (type_identifier -> FLOATTYPE IDENTIFIER .)
    RPAREN          reduce using rule 59 (type_identifier -> FLOATTYPE IDENTIFIER .)


state 123

    (60) type_identifier -> STRINGTYPE IDENTIFIER .

    COMMA           reduce using rule 60 (type_identifier -> STRINGTYPE IDENTIFIER .)
    RPAREN          reduce using rule 60 (type_identifier -> STRINGTYPE IDENTIFIER .)


state 124

    (62) function_statement -> VOID IDENTIFIER LPAREN function_input . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 131


state 125

    (30) input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .

    SEMICOLON       reduce using rule 30 (input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN .)


state 126

    (51) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    expression                     shift and go to state 132
    legal                          shift and go to state 133
    if_else_statement              shift and go to state 134
    if_statement                   shift and go to state 135
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 127

    (55) while_statement -> WHILE LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    expression                     shift and go to state 132
    legal                          shift and go to state 144
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 128

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression . SEMICOLON assign RPAREN LBRACE legal RBRACE
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       shift and go to state 145
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 129

    (63) function_input -> type_identifier COMMA function_input .

    RPAREN          reduce using rule 63 (function_input -> type_identifier COMMA function_input .)


state 130

    (61) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    legal                          shift and go to state 146
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 131

    (62) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 147


state 132

    (12) legal -> expression . SEMICOLON legal
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       shift and go to state 148
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 133

    (51) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE
    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement

    RBRACE          shift and go to state 149


state 134

    (18) legal -> if_else_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    if_else_statement              shift and go to state 134
    legal                          shift and go to state 150
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 135

    (17) legal -> if_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    if_statement                   shift and go to state 135
    legal                          shift and go to state 151
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 136

    (13) legal -> assign . SEMICOLON legal

    SEMICOLON       shift and go to state 152


state 137

    (14) legal -> print . SEMICOLON legal

    SEMICOLON       shift and go to state 153


state 138

    (15) legal -> input . SEMICOLON legal

    SEMICOLON       shift and go to state 154


state 139

    (16) legal -> return . SEMICOLON legal

    SEMICOLON       shift and go to state 155


state 140

    (19) legal -> while_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    while_statement                shift and go to state 140
    legal                          shift and go to state 156
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 141

    (20) legal -> for_statement . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    for_statement                  shift and go to state 141
    legal                          shift and go to state 157
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    empty                          shift and go to state 142

state 142

    (21) legal -> empty .

    RBRACE          reduce using rule 21 (legal -> empty .)


state 143

    (31) return -> RETURN . expression
    (32) return -> RETURN . IDENTIFIER
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 159
    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17

    expression                     shift and go to state 158

state 144

    (55) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 160


state 145

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON . assign RPAREN LBRACE legal RBRACE
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING

    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95

    assign                         shift and go to state 161

state 146

    (61) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 162


state 147

    (62) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    legal                          shift and go to state 163
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 148

    (12) legal -> expression SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    expression                     shift and go to state 132
    legal                          shift and go to state 164
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 149

    (51) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .
    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement

    NOT             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    ELSE            shift and go to state 165


state 150

    (18) legal -> if_else_statement legal .

    RBRACE          reduce using rule 18 (legal -> if_else_statement legal .)


state 151

    (17) legal -> if_statement legal .

    RBRACE          reduce using rule 17 (legal -> if_statement legal .)


state 152

    (13) legal -> assign SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    assign                         shift and go to state 136
    legal                          shift and go to state 166
    expression                     shift and go to state 132
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 153

    (14) legal -> print SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    print                          shift and go to state 137
    legal                          shift and go to state 167
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 154

    (15) legal -> input SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    input                          shift and go to state 138
    legal                          shift and go to state 168
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 155

    (16) legal -> return SEMICOLON . legal
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    return                         shift and go to state 139
    legal                          shift and go to state 169
    expression                     shift and go to state 132
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 156

    (19) legal -> while_statement legal .

    RBRACE          reduce using rule 19 (legal -> while_statement legal .)


state 157

    (20) legal -> for_statement legal .

    RBRACE          reduce using rule 20 (legal -> for_statement legal .)


state 158

    (31) return -> RETURN expression .
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    SEMICOLON       reduce using rule 31 (return -> RETURN expression .)
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 159

    (32) return -> RETURN IDENTIFIER .
    (65) expression -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (return -> RETURN IDENTIFIER .)
    SEMICOLON       reduce using rule 32 (return -> RETURN IDENTIFIER .)
    ADD             reduce using rule 65 (expression -> IDENTIFIER .)
    SUBTRACT        reduce using rule 65 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 65 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (expression -> IDENTIFIER .)
    EXP             reduce using rule 65 (expression -> IDENTIFIER .)
    EQUALCOMP       reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 65 (expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 65 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 65 (expression -> IDENTIFIER .)
    AND             reduce using rule 65 (expression -> IDENTIFIER .)
    OR              reduce using rule 65 (expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 65 (expression -> IDENTIFIER .) ]


state 160

    (55) while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 55 (while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE .)


state 161

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign . RPAREN LBRACE legal RBRACE

    RPAREN          shift and go to state 170


state 162

    (61) function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 61 (function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 163

    (62) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 171


state 164

    (12) legal -> expression SEMICOLON legal .

    RBRACE          reduce using rule 12 (legal -> expression SEMICOLON legal .)


state 165

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE . if_statement
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE

    LBRACE          shift and go to state 173
    IF              shift and go to state 172

    if_else_statement              shift and go to state 174
    if_statement                   shift and go to state 175

state 166

    (13) legal -> assign SEMICOLON legal .

    RBRACE          reduce using rule 13 (legal -> assign SEMICOLON legal .)


state 167

    (14) legal -> print SEMICOLON legal .

    RBRACE          reduce using rule 14 (legal -> print SEMICOLON legal .)


state 168

    (15) legal -> input SEMICOLON legal .

    RBRACE          reduce using rule 15 (legal -> input SEMICOLON legal .)


state 169

    (16) legal -> return SEMICOLON legal .

    RBRACE          reduce using rule 16 (legal -> return SEMICOLON legal .)


state 170

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 176


state 171

    (62) function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 62 (function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE .)


state 172

    (52) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (51) if_statement -> IF . LPAREN expression RPAREN LBRACE legal RBRACE

    LPAREN          shift and go to state 177


state 173

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    expression                     shift and go to state 132
    legal                          shift and go to state 178
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 174

    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .

    NOT             reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INT             reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOAT           reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CONTINUE        reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    BREAK           reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IDENTIFIER      reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    INTTYPE         reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FLOATTYPE       reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    CHARTYPE        reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    STRINGTYPE      reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    PRINT           reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    IF              reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    WHILE           reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    FOR             reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    VOID            reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    COMMENT         reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    $end            reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RETURN          reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)
    RBRACE          reduce using rule 53 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement .)


state 175

    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .

    NOT             reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INT             reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOAT           reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CONTINUE        reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    BREAK           reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IDENTIFIER      reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    INTTYPE         reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FLOATTYPE       reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    CHARTYPE        reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    STRINGTYPE      reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    PRINT           reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    IF              reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    WHILE           reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    FOR             reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    VOID            reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    COMMENT         reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    $end            reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RETURN          reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)
    RBRACE          reduce using rule 54 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement .)


state 176

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    assign                         shift and go to state 136
    expression                     shift and go to state 132
    legal                          shift and go to state 179
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    if_statement                   shift and go to state 135
    if_else_statement              shift and go to state 134
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 177

    (52) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (51) if_statement -> IF LPAREN . expression RPAREN LBRACE legal RBRACE
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 54

    expression                     shift and go to state 180

state 178

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal . RBRACE

    RBRACE          shift and go to state 181


state 179

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 182


state 180

    (52) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE ELSE if_statement
    (51) if_statement -> IF LPAREN expression . RPAREN LBRACE legal RBRACE
    (33) expression -> expression . ADD expression
    (34) expression -> expression . SUBTRACT expression
    (35) expression -> expression . MULTIPLY expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . EQUALCOMP expression
    (39) expression -> expression . GREATER_THAN_EQUAL expression
    (40) expression -> expression . LESS_THAN_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOTEQUAL expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression

    RPAREN          shift and go to state 183
    ADD             shift and go to state 31
    SUBTRACT        shift and go to state 32
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    EXP             shift and go to state 35
    EQUALCOMP       shift and go to state 36
    GREATER_THAN_EQUAL shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    LESS_THAN       shift and go to state 40
    NOTEQUAL        shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43


state 181

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .

    NOT             reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INT             reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOAT           reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    BREAK           reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    PRINT           reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    IF              reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    WHILE           reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    FOR             reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    VOID            reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    COMMENT         reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    $end            reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RETURN          reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)
    RBRACE          reduce using rule 52 (if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE .)


state 182

    (56) for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .

    NOT             reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 56 (for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE .)


state 183

    (52) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE ELSE if_statement
    (51) if_statement -> IF LPAREN expression RPAREN . LBRACE legal RBRACE

    LBRACE          shift and go to state 184


state 184

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE ELSE if_statement
    (51) if_statement -> IF LPAREN expression RPAREN LBRACE . legal RBRACE
    (12) legal -> . expression SEMICOLON legal
    (13) legal -> . assign SEMICOLON legal
    (14) legal -> . print SEMICOLON legal
    (15) legal -> . input SEMICOLON legal
    (16) legal -> . return SEMICOLON legal
    (17) legal -> . if_statement legal
    (18) legal -> . if_else_statement legal
    (19) legal -> . while_statement legal
    (20) legal -> . for_statement legal
    (21) legal -> . empty
    (33) expression -> . expression ADD expression
    (34) expression -> . expression SUBTRACT expression
    (35) expression -> . expression MULTIPLY expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression EQUALCOMP expression
    (39) expression -> . expression GREATER_THAN_EQUAL expression
    (40) expression -> . expression LESS_THAN_EQUAL expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOTEQUAL expression
    (44) expression -> . NOT expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . CONTINUE
    (50) expression -> . BREAK
    (65) expression -> . IDENTIFIER
    (23) assign -> . INTTYPE IDENTIFIER EQUAL INT
    (24) assign -> . INTTYPE IDENTIFIER EQUAL expression
    (25) assign -> . FLOATTYPE IDENTIFIER EQUAL expression
    (26) assign -> . CHARTYPE IDENTIFIER EQUAL CHAR
    (27) assign -> . FLOATTYPE IDENTIFIER EQUAL FLOAT
    (28) assign -> . STRINGTYPE IDENTIFIER EQUAL STRING
    (29) print -> . PRINT LPAREN expression RPAREN
    (30) input -> . IDENTIFIER EQUAL INPUT LPAREN RPAREN
    (31) return -> . RETURN expression
    (32) return -> . RETURN IDENTIFIER
    (51) if_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE
    (52) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement
    (54) if_else_statement -> . IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement
    (55) while_statement -> . WHILE LPAREN expression RPAREN LBRACE legal RBRACE
    (56) for_statement -> . FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE
    (66) empty -> .

    NOT             shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    IDENTIFIER      shift and go to state 18
    INTTYPE         shift and go to state 92
    FLOATTYPE       shift and go to state 93
    CHARTYPE        shift and go to state 94
    STRINGTYPE      shift and go to state 95
    PRINT           shift and go to state 23
    RETURN          shift and go to state 143
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    RBRACE          reduce using rule 66 (empty -> .)

    expression                     shift and go to state 132
    legal                          shift and go to state 185
    if_else_statement              shift and go to state 134
    if_statement                   shift and go to state 135
    assign                         shift and go to state 136
    print                          shift and go to state 137
    input                          shift and go to state 138
    return                         shift and go to state 139
    while_statement                shift and go to state 140
    for_statement                  shift and go to state 141
    empty                          shift and go to state 142

state 185

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE ELSE if_statement
    (51) if_statement -> IF LPAREN expression RPAREN LBRACE legal . RBRACE

    RBRACE          shift and go to state 186


state 186

    (52) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE LBRACE legal RBRACE
    (53) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_else_statement
    (54) if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE . ELSE if_statement
    (51) if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .

    ELSE            shift and go to state 165
    NOT             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INT             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOAT           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CONTINUE        reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    BREAK           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IDENTIFIER      reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    INTTYPE         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FLOATTYPE       reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    CHARTYPE        reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    STRINGTYPE      reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    PRINT           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    IF              reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    WHILE           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    FOR             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    VOID            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    COMMENT         reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    $end            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RETURN          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)
    RBRACE          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 53 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 53 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for EXP in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 53 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for AND in state 53 resolved as shift
WARNING: shift/reduce conflict for OR in state 53 resolved as shift
WARNING: shift/reduce conflict for ADD in state 78 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 78 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for EXP in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 78 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for ADD in state 79 resolved as shift
WARNING: shift/reduce conflict for SUBTRACT in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for EXP in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUALCOMP in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: reduce/reduce conflict in state 104 resolved using rule (assign -> INTTYPE IDENTIFIER EQUAL INT)
WARNING: rejected rule (expression -> INT) in state 104
WARNING: reduce/reduce conflict in state 107 resolved using rule (assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT)
WARNING: rejected rule (expression -> FLOAT) in state 107
WARNING: reduce/reduce conflict in state 159 resolved using rule (return -> RETURN IDENTIFIER)
WARNING: rejected rule (expression -> IDENTIFIER) in state 159
