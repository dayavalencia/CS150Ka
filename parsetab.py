
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression ka\n       | assign ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | print ka\n       | empty\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT LPAREN expression RPAREN\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE empty\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE expression RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[11,11,11,11,11,11,11,11,11,11,-31,-32,-33,-34,-49,11,11,11,11,11,11,11,11,11,11,11,11,11,-28,11,11,11,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,11,11,-10,-11,-12,-14,-13,-15,11,-16,11,11,11,11,-50,-39,-45,-35,-46,11,-37,-38,11,11,-50,-40,-36,11,-50,]),'INT':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[12,12,12,12,12,12,12,12,12,12,-31,-32,-33,-34,-49,12,12,12,12,12,12,12,12,12,12,12,12,12,-28,12,12,12,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,91,12,-10,-11,-12,-14,-13,-15,12,-16,12,12,12,12,-50,-39,-45,-35,-46,12,-37,-38,12,12,-50,-40,-36,12,-50,]),'FLOAT':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[13,13,13,13,13,13,13,13,13,13,-31,-32,-33,-34,-49,13,13,13,13,13,13,13,13,13,13,13,13,13,-28,13,13,13,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,13,94,-10,-11,-12,-14,-13,-15,13,-16,13,13,13,13,-50,-39,-45,-35,-46,13,-37,-38,13,13,-50,-40,-36,13,-50,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[14,14,14,14,14,14,14,14,14,14,-31,-32,-33,-34,-49,14,14,14,14,14,14,14,14,14,14,14,14,14,-28,14,14,14,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,14,14,-10,-11,-12,-14,-13,-15,14,-16,14,14,14,14,-50,-39,-45,-35,-46,14,-37,-38,14,14,-50,-40,-36,14,-50,]),'BREAK':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[15,15,15,15,15,15,15,15,15,15,-31,-32,-33,-34,-49,15,15,15,15,15,15,15,15,15,15,15,15,15,-28,15,15,15,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,15,15,-10,-11,-12,-14,-13,-15,15,-16,15,15,15,15,-50,-39,-45,-35,-46,15,-37,-38,15,15,-50,-40,-36,15,-50,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,25,28,29,30,31,32,33,34,35,36,37,38,39,40,48,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,80,81,82,85,86,87,88,91,92,93,94,95,96,99,111,112,113,116,122,123,124,126,128,131,133,134,135,136,137,141,142,144,145,147,],[16,16,16,16,16,16,16,16,16,16,-31,-32,-33,-34,-49,49,50,51,52,57,16,16,16,16,16,16,16,16,16,16,16,16,16,-28,16,16,16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,16,16,100,101,102,103,106,107,108,109,-10,-11,-12,-14,-13,-15,16,-16,16,16,16,16,-50,-39,-45,-35,-46,16,-37,-38,16,16,-50,-40,-36,16,-50,]),'INTTYPE':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,89,91,92,93,94,95,96,104,111,120,123,124,126,128,131,134,135,141,142,144,147,],[17,17,17,17,17,17,17,17,17,-31,-32,-33,-34,-49,-28,79,85,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,85,-10,-11,-12,-14,-13,-15,85,-16,79,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'FLOATTYPE':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,89,91,92,93,94,95,96,104,111,120,123,124,126,128,131,134,135,141,142,144,147,],[18,18,18,18,18,18,18,18,18,-31,-32,-33,-34,-49,-28,80,87,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,87,-10,-11,-12,-14,-13,-15,87,-16,80,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'CHARTYPE':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,89,91,92,93,94,95,96,104,111,120,123,124,126,128,131,134,135,141,142,144,147,],[19,19,19,19,19,19,19,19,19,-31,-32,-33,-34,-49,-28,81,86,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,86,-10,-11,-12,-14,-13,-15,86,-16,81,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'STRINGTYPE':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,89,91,92,93,94,95,96,104,111,120,123,124,126,128,131,134,135,141,142,144,147,],[20,20,20,20,20,20,20,20,20,-31,-32,-33,-34,-49,-28,82,88,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,88,-10,-11,-12,-14,-13,-15,88,-16,82,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'IF':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,129,131,134,135,141,142,144,147,],[21,21,21,21,21,21,21,21,21,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,132,-46,-37,-38,-50,-40,-36,-50,]),'WHILE':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,131,134,135,141,142,144,147,],[22,22,22,22,22,22,22,22,22,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'FOR':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,131,134,135,141,142,144,147,],[23,23,23,23,23,23,23,23,23,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'VOID':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,131,134,135,141,142,144,147,],[25,25,25,25,25,25,25,25,25,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'PRINT':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,131,134,135,141,142,144,147,],[26,26,26,26,26,26,26,26,26,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,27,41,42,43,44,45,46,47,48,59,60,61,62,63,64,65,66,67,68,69,70,71,91,92,93,94,95,96,111,123,124,126,128,131,134,135,141,142,144,147,],[-50,0,-50,-50,-50,-50,-50,-50,-50,-50,-9,-31,-32,-33,-34,-49,-1,-2,-3,-4,-5,-6,-7,-8,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,-10,-11,-12,-14,-13,-15,-16,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'ADD':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[28,-31,-32,-33,-34,-49,28,-17,-18,-19,-20,-21,28,28,28,28,28,28,28,28,28,28,28,-31,28,28,-32,28,28,28,28,28,28,28,28,28,]),'SUBTRACT':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[29,-31,-32,-33,-34,-49,29,-17,-18,-19,-20,-21,29,29,29,29,29,29,29,29,29,29,29,-31,29,29,-32,29,29,29,29,29,29,29,29,29,]),'MULTIPLY':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[30,-31,-32,-33,-34,-49,30,30,30,-19,-20,-21,30,30,30,30,30,30,30,30,30,30,30,-31,30,30,-32,30,30,30,30,30,30,30,30,30,]),'DIVIDE':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[31,-31,-32,-33,-34,-49,31,31,31,-19,-20,-21,31,31,31,31,31,31,31,31,31,31,31,-31,31,31,-32,31,31,31,31,31,31,31,31,31,]),'EXP':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[32,-31,-32,-33,-34,-49,32,32,32,-19,-20,-21,32,32,32,32,32,32,32,32,32,32,32,-31,32,32,-32,32,32,32,32,32,32,32,32,32,]),'EQUALCOMP':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[33,-31,-32,-33,-34,-49,33,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,33,33,33,33,33,-31,33,33,-32,33,33,33,33,33,33,33,33,33,]),'GREATER_THAN_EQUAL':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[34,-31,-32,-33,-34,-49,34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,34,34,34,34,34,-31,34,34,-32,34,34,34,34,34,34,34,34,34,]),'LESS_THAN_EQUAL':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[35,-31,-32,-33,-34,-49,35,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,35,35,35,35,35,-31,35,35,-32,35,35,35,35,35,35,35,35,35,]),'GREATER_THAN':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[36,-31,-32,-33,-34,-49,36,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,36,36,36,36,36,-31,36,36,-32,36,36,36,36,36,36,36,36,36,]),'LESS_THAN':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[37,-31,-32,-33,-34,-49,37,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,37,37,37,37,37,-31,37,37,-32,37,37,37,37,37,37,37,37,37,]),'NOTEQUAL':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[38,-31,-32,-33,-34,-49,38,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,38,38,38,38,38,-31,38,38,-32,38,38,38,38,38,38,38,38,38,]),'AND':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[39,-31,-32,-33,-34,-49,39,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,39,39,39,39,39,-31,39,39,-32,39,39,39,39,39,39,39,39,39,]),'OR':([2,12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,91,92,93,94,114,118,119,121,127,138,139,140,146,],[40,-31,-32,-33,-34,-49,40,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,40,40,40,40,40,-31,40,40,-32,40,40,40,40,40,40,40,40,40,]),'RPAREN':([12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,83,84,90,91,92,93,94,95,96,106,107,108,109,110,115,125,140,],[-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,97,98,-48,105,111,-10,-11,-12,-14,-13,-15,-41,-42,-43,-44,117,-47,130,143,]),'SEMICOLON':([12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,78,91,92,93,94,95,96,114,],[-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,99,-10,-11,-12,-14,-13,-15,120,]),'RBRACE':([12,13,14,15,16,48,59,60,61,62,63,64,65,66,67,68,69,70,71,118,119,121,127,138,139,146,],[-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,123,124,126,131,141,142,147,]),'LPAREN':([21,22,23,24,26,49,50,51,52,57,132,],[53,54,55,56,58,-41,-43,-42,-44,89,137,]),'EQUAL':([49,50,51,52,100,101,102,103,],[72,73,74,75,72,73,74,75,]),'CHAR':([74,],[95,]),'STRING':([75,],[96,]),'COMMA':([83,106,107,108,109,],[104,-41,-42,-43,-44,]),'LBRACE':([97,98,105,117,129,130,143,],[112,113,116,122,133,136,145,]),'ELSE':([123,147,],[129,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,2,3,4,5,6,7,8,9,],[1,27,41,42,43,44,45,46,47,]),'expression':([0,2,3,4,5,6,7,8,9,11,28,29,30,31,32,33,34,35,36,37,38,39,40,53,54,58,72,73,99,112,113,116,122,133,136,137,145,],[2,2,2,2,2,2,2,2,2,48,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,90,92,93,114,118,119,121,127,138,139,140,146,]),'assign':([0,2,3,4,5,6,7,8,9,55,120,],[3,3,3,3,3,3,3,3,3,78,125,]),'if_statement':([0,2,3,4,5,6,7,8,9,129,],[4,4,4,4,4,4,4,4,4,135,]),'if_else_statement':([0,2,3,4,5,6,7,8,9,129,],[5,5,5,5,5,5,5,5,5,134,]),'while_statement':([0,2,3,4,5,6,7,8,9,],[6,6,6,6,6,6,6,6,6,]),'for_statement':([0,2,3,4,5,6,7,8,9,],[7,7,7,7,7,7,7,7,7,]),'function_statement':([0,2,3,4,5,6,7,8,9,],[8,8,8,8,8,8,8,8,8,]),'print':([0,2,3,4,5,6,7,8,9,],[9,9,9,9,9,9,9,9,9,]),'empty':([0,2,3,4,5,6,7,8,9,123,141,147,],[10,10,10,10,10,10,10,10,10,128,144,128,]),'type_identifier':([0,2,3,4,5,6,7,8,9,56,89,104,],[24,24,24,24,24,24,24,24,24,83,83,83,]),'function_input':([56,89,104,],[84,110,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression ka','ka',2,'p_ka','ka.py',177),
  ('ka -> assign ka','ka',2,'p_ka','ka.py',178),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',179),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',180),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',181),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',182),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',183),
  ('ka -> print ka','ka',2,'p_ka','ka.py',184),
  ('ka -> empty','ka',1,'p_ka','ka.py',185),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',193),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',194),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',195),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',196),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',197),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',198),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',205),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',212),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',213),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',214),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',215),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',216),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',234),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',235),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',236),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',237),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',238),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',239),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',259),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',267),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',268),
  ('expression -> INT','expression',1,'p_int_float','ka.py',279),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',280),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',287),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',288),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty','if_statement',8,'p_expression_if','ka.py',295),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty','if_else_statement',12,'p_expression_if_else','ka.py',302),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',303),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',304),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE','while_statement',7,'p_while_statement','ka.py',319),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE','for_statement',11,'p_for_statement','ka.py',326),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',333),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',334),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',335),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',336),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE','function_statement',7,'p_function','ka.py',342),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE','function_statement',8,'p_function','ka.py',343),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',353),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',354),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',364),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',371),
]
