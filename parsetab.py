
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | empty\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT LPAREN expression RPAREN\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE empty\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE expression RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-50,-39,-45,-35,-46,11,-37,-38,11,11,-50,-40,-36,11,-50,]),'INT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,94,12,12,12,12,12,12,-50,-39,-45,-35,-46,12,-37,-38,12,12,-50,-40,-36,12,-50,]),'FLOAT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,97,13,13,13,13,13,-50,-39,-45,-35,-46,13,-37,-38,13,13,-50,-40,-36,13,-50,]),'CONTINUE':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-50,-39,-45,-35,-46,14,-37,-38,14,14,-50,-40,-36,14,-50,]),'BREAK':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-50,-39,-45,-35,-46,15,-37,-38,15,15,-50,-40,-36,15,-50,]),'IDENTIFIER':([0,5,6,7,8,9,11,17,18,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,83,84,85,86,89,90,91,92,103,115,116,119,125,126,127,129,131,134,136,137,138,139,140,144,145,147,148,150,],[16,16,16,16,16,16,16,49,50,51,52,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,104,105,106,107,110,111,112,113,16,16,16,16,16,-50,-39,-45,-35,-46,16,-37,-38,16,16,-50,-40,-36,16,-50,]),'INTTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,123,126,127,129,131,134,137,138,144,145,147,150,],[17,17,17,17,17,17,17,17,17,83,89,89,89,83,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'FLOATTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,123,126,127,129,131,134,137,138,144,145,147,150,],[18,18,18,18,18,18,18,18,18,84,91,91,91,84,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'CHARTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,123,126,127,129,131,134,137,138,144,145,147,150,],[19,19,19,19,19,19,19,19,19,85,90,90,90,85,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'STRINGTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,123,126,127,129,131,134,137,138,144,145,147,150,],[20,20,20,20,20,20,20,20,20,86,92,92,92,86,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'PRINT':([0,5,6,7,8,9,27,41,42,126,127,129,131,134,137,138,144,145,147,150,],[21,21,21,21,21,21,21,21,21,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'IF':([0,5,6,7,8,9,27,41,42,126,127,129,131,132,134,137,138,144,145,147,150,],[22,22,22,22,22,22,22,22,22,-50,-39,-45,-35,135,-46,-37,-38,-50,-40,-36,-50,]),'WHILE':([0,5,6,7,8,9,27,41,42,126,127,129,131,134,137,138,144,145,147,150,],[23,23,23,23,23,23,23,23,23,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'FOR':([0,5,6,7,8,9,27,41,42,126,127,129,131,134,137,138,144,145,147,150,],[24,24,24,24,24,24,24,24,24,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'VOID':([0,5,6,7,8,9,27,41,42,126,127,129,131,134,137,138,144,145,147,150,],[26,26,26,26,26,26,26,26,26,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'$end':([0,1,5,6,7,8,9,10,27,41,42,43,44,45,46,47,59,73,74,126,127,129,131,134,137,138,144,145,147,150,],[-50,0,-50,-50,-50,-50,-50,-9,-50,-50,-50,-4,-5,-6,-7,-8,-1,-2,-3,-50,-39,-45,-35,-46,-37,-38,-50,-40,-36,-50,]),'SEMICOLON':([2,3,4,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,82,94,95,96,97,98,99,100,117,],[27,41,42,-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,103,-10,-11,-12,-14,-13,-15,-16,123,]),'ADD':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[28,-31,-32,-33,-34,-49,28,-17,-18,-19,-20,-21,28,28,28,28,28,28,28,28,28,28,28,-31,28,28,-32,28,28,28,28,28,28,28,28,28,]),'SUBTRACT':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[29,-31,-32,-33,-34,-49,29,-17,-18,-19,-20,-21,29,29,29,29,29,29,29,29,29,29,29,-31,29,29,-32,29,29,29,29,29,29,29,29,29,]),'MULTIPLY':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[30,-31,-32,-33,-34,-49,30,30,30,-19,-20,-21,30,30,30,30,30,30,30,30,30,30,30,-31,30,30,-32,30,30,30,30,30,30,30,30,30,]),'DIVIDE':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[31,-31,-32,-33,-34,-49,31,31,31,-19,-20,-21,31,31,31,31,31,31,31,31,31,31,31,-31,31,31,-32,31,31,31,31,31,31,31,31,31,]),'EXP':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[32,-31,-32,-33,-34,-49,32,32,32,-19,-20,-21,32,32,32,32,32,32,32,32,32,32,32,-31,32,32,-32,32,32,32,32,32,32,32,32,32,]),'EQUALCOMP':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[33,-31,-32,-33,-34,-49,33,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,33,33,33,33,33,-31,33,33,-32,33,33,33,33,33,33,33,33,33,]),'GREATER_THAN_EQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[34,-31,-32,-33,-34,-49,34,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,34,34,34,34,34,-31,34,34,-32,34,34,34,34,34,34,34,34,34,]),'LESS_THAN_EQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[35,-31,-32,-33,-34,-49,35,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,35,35,35,35,35,-31,35,35,-32,35,35,35,35,35,35,35,35,35,]),'GREATER_THAN':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[36,-31,-32,-33,-34,-49,36,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,36,36,36,36,36,-31,36,36,-32,36,36,36,36,36,36,36,36,36,]),'LESS_THAN':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[37,-31,-32,-33,-34,-49,37,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,37,37,37,37,37,-31,37,37,-32,37,37,37,37,37,37,37,37,37,]),'NOTEQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[38,-31,-32,-33,-34,-49,38,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,38,38,38,38,38,-31,38,38,-32,38,38,38,38,38,38,38,38,38,]),'AND':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[39,-31,-32,-33,-34,-49,39,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,39,39,39,39,39,-31,39,39,-32,39,39,39,39,39,39,39,39,39,]),'OR':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,122,124,130,141,142,143,149,],[40,-31,-32,-33,-34,-49,40,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,40,40,40,40,40,-31,40,40,-32,40,40,40,40,40,40,40,40,40,]),'RPAREN':([12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,87,88,94,95,96,97,98,99,110,111,112,113,114,118,128,143,],[-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,100,101,102,-48,109,-10,-11,-12,-14,-13,-15,-41,-42,-43,-44,120,-47,133,146,]),'RBRACE':([12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,121,122,124,130,141,142,149,],[-31,-32,-33,-34,-49,-28,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-30,126,127,129,134,144,145,150,]),'LPAREN':([21,22,23,24,25,49,50,51,52,58,135,],[53,54,55,56,57,-41,-43,-42,-44,93,140,]),'EQUAL':([49,50,51,52,104,105,106,107,],[75,76,77,78,75,76,77,78,]),'CHAR':([77,],[98,]),'STRING':([78,],[99,]),'COMMA':([87,110,111,112,113,],[108,-41,-42,-43,-44,]),'LBRACE':([101,102,109,120,132,133,146,],[115,116,119,125,136,139,148,]),'ELSE':([126,150,],[132,132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,5,6,7,8,9,27,41,42,],[1,43,44,45,46,47,59,73,74,]),'expression':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,125,136,139,140,148,],[2,2,2,2,2,2,48,2,60,61,62,63,64,65,66,67,68,69,70,71,72,2,2,79,80,81,95,96,117,121,122,124,130,141,142,143,149,]),'assign':([0,5,6,7,8,9,27,41,42,56,123,],[3,3,3,3,3,3,3,3,3,82,128,]),'print':([0,5,6,7,8,9,27,41,42,],[4,4,4,4,4,4,4,4,4,]),'if_statement':([0,5,6,7,8,9,27,41,42,132,],[5,5,5,5,5,5,5,5,5,138,]),'if_else_statement':([0,5,6,7,8,9,27,41,42,132,],[6,6,6,6,6,6,6,6,6,137,]),'while_statement':([0,5,6,7,8,9,27,41,42,],[7,7,7,7,7,7,7,7,7,]),'for_statement':([0,5,6,7,8,9,27,41,42,],[8,8,8,8,8,8,8,8,8,]),'function_statement':([0,5,6,7,8,9,27,41,42,],[9,9,9,9,9,9,9,9,9,]),'empty':([0,5,6,7,8,9,27,41,42,126,144,150,],[10,10,10,10,10,10,10,10,10,131,147,131,]),'type_identifier':([0,5,6,7,8,9,27,41,42,57,93,108,],[25,25,25,25,25,25,25,25,25,87,87,87,]),'function_input':([57,93,108,],[88,114,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',183),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',184),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',185),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',186),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',187),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',188),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',189),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',190),
  ('ka -> empty','ka',1,'p_ka','ka.py',191),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',199),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',200),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',201),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',202),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',203),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',204),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',211),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',218),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',219),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',220),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',221),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',222),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',240),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',241),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',242),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',243),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',244),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',245),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',265),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',273),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',274),
  ('expression -> INT','expression',1,'p_int_float','ka.py',285),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',286),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',293),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',294),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty','if_statement',8,'p_expression_if','ka.py',301),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty','if_else_statement',12,'p_expression_if_else','ka.py',308),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',309),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',310),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE','while_statement',7,'p_while_statement','ka.py',325),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE expression RBRACE','for_statement',11,'p_for_statement','ka.py',332),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',339),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',340),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',341),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',342),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE expression RBRACE','function_statement',7,'p_function','ka.py',348),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE expression RBRACE','function_statement',8,'p_function','ka.py',349),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',359),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',360),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',370),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',377),
]
