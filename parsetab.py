
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | empty\n    \n    legal : expression SEMICOLON legal\n       | assign SEMICOLON legal\n       | print SEMICOLON legal\n       | if_statement legal\n       | if_else_statement legal\n       | while_statement legal\n       | for_statement legal\n       | empty\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT LPAREN expression RPAREN\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-43,11,11,-47,-53,-54,11,-45,-46,11,11,-44,-48,11,-43,]),'INT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,94,12,12,12,12,12,12,12,12,12,12,12,-43,12,12,-47,-53,-54,12,-45,-46,12,12,-44,-48,12,-43,]),'FLOAT':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,97,13,13,13,13,13,13,13,13,13,13,-43,13,13,-47,-53,-54,13,-45,-46,13,13,-44,-48,13,-43,]),'CONTINUE':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-43,14,14,-47,-53,-54,14,-45,-46,14,14,-44,-48,14,-43,]),'BREAK':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-43,15,15,-47,-53,-54,15,-45,-46,15,15,-44,-48,15,-43,]),'IDENTIFIER':([0,5,6,7,8,9,11,17,18,19,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,83,84,85,86,89,90,91,92,103,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,157,161,162,164,166,],[16,16,16,16,16,16,16,49,50,51,52,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,104,105,106,107,110,111,112,113,16,16,16,16,16,16,16,16,16,16,-43,16,16,-47,-53,-54,16,-45,-46,16,16,-44,-48,16,-43,]),'INTTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,115,116,119,123,124,127,128,131,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[17,17,17,17,17,17,17,17,17,83,89,89,89,83,83,83,83,83,83,83,83,83,83,-43,83,83,-47,-53,-54,83,-45,-46,83,-44,-48,83,-43,]),'FLOATTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,115,116,119,123,124,127,128,131,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[18,18,18,18,18,18,18,18,18,84,91,91,91,84,84,84,84,84,84,84,84,84,84,-43,84,84,-47,-53,-54,84,-45,-46,84,-44,-48,84,-43,]),'CHARTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,115,116,119,123,124,127,128,131,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[19,19,19,19,19,19,19,19,19,85,90,90,90,85,85,85,85,85,85,85,85,85,85,-43,85,85,-47,-53,-54,85,-45,-46,85,-44,-48,85,-43,]),'STRINGTYPE':([0,5,6,7,8,9,27,41,42,56,57,93,108,115,116,119,123,124,127,128,131,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[20,20,20,20,20,20,20,20,20,86,92,92,92,86,86,86,86,86,86,86,86,86,86,-43,86,86,-47,-53,-54,86,-45,-46,86,-44,-48,86,-43,]),'PRINT':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-43,21,21,-47,-53,-54,21,-45,-46,21,-44,-48,21,-43,]),'IF':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,135,138,139,142,144,147,151,153,154,155,156,161,162,164,166,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-43,22,22,-47,-53,152,-54,22,-45,-46,22,-44,-48,22,-43,]),'WHILE':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-43,23,23,-47,-53,-54,23,-45,-46,23,-44,-48,23,-43,]),'FOR':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,135,138,139,142,144,151,153,154,155,156,161,162,164,166,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-43,24,24,-47,-53,-54,24,-45,-46,24,-44,-48,24,-43,]),'VOID':([0,5,6,7,8,9,27,41,42,135,142,144,151,154,155,161,162,166,],[26,26,26,26,26,26,26,26,26,-43,-47,-53,-54,-45,-46,-44,-48,-43,]),'$end':([0,1,5,6,7,8,9,10,27,41,42,43,44,45,46,47,59,73,74,135,142,144,151,154,155,161,162,166,],[-58,0,-58,-58,-58,-58,-58,-9,-58,-58,-58,-4,-5,-6,-7,-8,-1,-2,-3,-43,-47,-53,-54,-45,-46,-44,-48,-43,]),'SEMICOLON':([2,3,4,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,82,94,95,96,97,98,99,100,117,121,125,126,],[27,41,42,-39,-40,-41,-42,-57,-36,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,103,-18,-19,-20,-22,-21,-23,-24,131,134,138,139,]),'ADD':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[28,-39,-40,-41,-42,-57,28,-25,-26,-27,-28,-29,28,28,28,28,28,28,28,28,28,28,28,-39,28,28,-40,28,28,28,]),'SUBTRACT':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[29,-39,-40,-41,-42,-57,29,-25,-26,-27,-28,-29,29,29,29,29,29,29,29,29,29,29,29,-39,29,29,-40,29,29,29,]),'MULTIPLY':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[30,-39,-40,-41,-42,-57,30,30,30,-27,-28,-29,30,30,30,30,30,30,30,30,30,30,30,-39,30,30,-40,30,30,30,]),'DIVIDE':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[31,-39,-40,-41,-42,-57,31,31,31,-27,-28,-29,31,31,31,31,31,31,31,31,31,31,31,-39,31,31,-40,31,31,31,]),'EXP':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[32,-39,-40,-41,-42,-57,32,32,32,-27,-28,-29,32,32,32,32,32,32,32,32,32,32,32,-39,32,32,-40,32,32,32,]),'EQUALCOMP':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[33,-39,-40,-41,-42,-57,33,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,33,33,33,33,33,-39,33,33,-40,33,33,33,]),'GREATER_THAN_EQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[34,-39,-40,-41,-42,-57,34,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,34,34,34,34,34,-39,34,34,-40,34,34,34,]),'LESS_THAN_EQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[35,-39,-40,-41,-42,-57,35,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,35,35,35,35,35,-39,35,35,-40,35,35,35,]),'GREATER_THAN':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[36,-39,-40,-41,-42,-57,36,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,36,36,36,36,36,-39,36,36,-40,36,36,36,]),'LESS_THAN':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[37,-39,-40,-41,-42,-57,37,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,37,37,37,37,37,-39,37,37,-40,37,37,37,]),'NOTEQUAL':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[38,-39,-40,-41,-42,-57,38,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,38,38,38,38,38,-39,38,38,-40,38,38,38,]),'AND':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[39,-39,-40,-41,-42,-57,39,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,39,39,39,39,39,-39,39,39,-40,39,39,39,]),'OR':([2,12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,94,95,96,97,117,121,160,],[40,-39,-40,-41,-42,-57,40,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,40,40,40,40,40,-39,40,40,-40,40,40,40,]),'RPAREN':([12,13,14,15,16,48,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,87,88,94,95,96,97,98,99,110,111,112,113,114,118,143,160,],[-39,-40,-41,-42,-57,-36,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,100,101,102,-56,109,-18,-19,-20,-22,-21,-23,-49,-50,-51,-52,120,-55,150,163,]),'LPAREN':([21,22,23,24,25,49,50,51,52,58,152,],[53,54,55,56,57,-49,-51,-50,-52,93,157,]),'EQUAL':([49,50,51,52,104,105,106,107,],[75,76,77,78,75,76,77,78,]),'CHAR':([77,],[98,]),'STRING':([78,],[99,]),'COMMA':([87,110,111,112,113,],[108,-49,-50,-51,-52,]),'LBRACE':([101,102,109,120,147,150,163,],[115,116,119,133,153,156,164,]),'RBRACE':([115,116,119,122,123,124,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,145,146,148,149,153,154,155,156,158,159,161,162,164,165,166,],[-58,-58,-58,135,-58,-58,-58,-58,-17,142,144,-58,-58,-43,-14,-13,-58,-58,-15,-16,-47,151,-10,-11,-12,-58,-45,-46,-58,161,162,-44,-48,-58,166,-43,]),'ELSE':([135,166,],[147,147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,5,6,7,8,9,27,41,42,],[1,43,44,45,46,47,59,73,74,]),'expression':([0,5,6,7,8,9,11,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,53,54,55,75,76,103,115,116,119,123,124,127,128,133,134,138,139,153,156,157,164,],[2,2,2,2,2,2,48,2,60,61,62,63,64,65,66,67,68,69,70,71,72,2,2,79,80,81,95,96,117,121,121,121,121,121,121,121,121,121,121,121,121,121,160,121,]),'assign':([0,5,6,7,8,9,27,41,42,56,115,116,119,123,124,127,128,131,133,134,138,139,153,156,164,],[3,3,3,3,3,3,3,3,3,82,125,125,125,125,125,125,125,143,125,125,125,125,125,125,125,]),'print':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,153,156,164,],[4,4,4,4,4,4,4,4,4,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'if_statement':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,147,153,156,164,],[5,5,5,5,5,5,5,5,5,124,124,124,124,124,124,124,124,124,124,124,155,124,124,124,]),'if_else_statement':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,147,153,156,164,],[6,6,6,6,6,6,6,6,6,123,123,123,123,123,123,123,123,123,123,123,154,123,123,123,]),'while_statement':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,153,156,164,],[7,7,7,7,7,7,7,7,7,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'for_statement':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,153,156,164,],[8,8,8,8,8,8,8,8,8,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'function_statement':([0,5,6,7,8,9,27,41,42,],[9,9,9,9,9,9,9,9,9,]),'empty':([0,5,6,7,8,9,27,41,42,115,116,119,123,124,127,128,133,134,138,139,153,156,164,],[10,10,10,10,10,10,10,10,10,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'type_identifier':([0,5,6,7,8,9,27,41,42,57,93,108,],[25,25,25,25,25,25,25,25,25,87,87,87,]),'function_input':([57,93,108,],[88,114,118,]),'legal':([115,116,119,123,124,127,128,133,134,138,139,153,156,164,],[122,130,132,136,137,140,141,145,146,148,149,158,159,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',183),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',184),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',185),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',186),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',187),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',188),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',189),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',190),
  ('ka -> empty','ka',1,'p_ka','ka.py',191),
  ('legal -> expression SEMICOLON legal','legal',3,'p_legal','ka.py',199),
  ('legal -> assign SEMICOLON legal','legal',3,'p_legal','ka.py',200),
  ('legal -> print SEMICOLON legal','legal',3,'p_legal','ka.py',201),
  ('legal -> if_statement legal','legal',2,'p_legal','ka.py',202),
  ('legal -> if_else_statement legal','legal',2,'p_legal','ka.py',203),
  ('legal -> while_statement legal','legal',2,'p_legal','ka.py',204),
  ('legal -> for_statement legal','legal',2,'p_legal','ka.py',205),
  ('legal -> empty','legal',1,'p_legal','ka.py',206),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',220),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',221),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',222),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',223),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',224),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',225),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',232),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',239),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',240),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',241),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',242),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',243),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',261),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',262),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',263),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',264),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',265),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',266),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',286),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',294),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',295),
  ('expression -> INT','expression',1,'p_int_float','ka.py',306),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',307),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',314),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',315),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE','if_statement',7,'p_expression_if','ka.py',322),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE','if_else_statement',11,'p_expression_if_else','ka.py',329),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',330),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',331),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE','while_statement',7,'p_while_statement','ka.py',346),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE','for_statement',11,'p_for_statement','ka.py',353),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',360),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',361),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',362),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',363),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',7,'p_function','ka.py',370),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',8,'p_function','ka.py',371),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',381),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',382),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',392),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',399),
]
