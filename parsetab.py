
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | return SEMICOLON ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | comment ka\n       | empty\n    \n    legal : expression SEMICOLON legal\n       | assign SEMICOLON legal\n       | print SEMICOLON legal\n       | if_statement legal\n       | if_else_statement legal\n       | while_statement legal\n       | for_statement legal\n       | empty\n    \n    comment : COMMENT\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT LPAREN expression RPAREN\n  \n  return : RETURN expression\n         | RETURN IDENTIFIER\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,6,7,8,9,10,11,13,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[13,13,13,13,13,13,13,13,13,-20,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-48,13,13,-52,-58,-59,13,-50,-51,13,13,-49,-53,13,-48,]),'INT':([0,6,7,8,9,10,11,13,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[14,14,14,14,14,14,14,14,14,-20,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,103,14,14,14,14,14,14,14,14,14,14,14,-48,14,14,-52,-58,-59,14,-50,-51,14,14,-49,-53,14,-48,]),'FLOAT':([0,6,7,8,9,10,11,13,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[15,15,15,15,15,15,15,15,15,-20,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,106,15,15,15,15,15,15,15,15,15,15,-48,15,15,-52,-58,-59,15,-50,-51,15,15,-49,-53,15,-48,]),'CONTINUE':([0,6,7,8,9,10,11,13,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[16,16,16,16,16,16,16,16,16,-20,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-48,16,16,-52,-58,-59,16,-50,-51,16,16,-49,-53,16,-48,]),'BREAK':([0,6,7,8,9,10,11,13,24,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[17,17,17,17,17,17,17,17,17,-20,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-48,17,17,-52,-58,-59,17,-50,-51,17,17,-49,-53,17,-48,]),'IDENTIFIER':([0,6,7,8,9,10,11,13,19,20,21,22,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,92,93,94,95,98,99,100,101,112,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,166,170,171,173,175,],[18,18,18,18,18,18,18,18,55,56,57,58,61,66,-20,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,113,114,115,116,119,120,121,122,18,18,18,18,18,18,18,18,18,18,-48,18,18,-52,-58,-59,18,-50,-51,18,18,-49,-53,18,-48,]),'INTTYPE':([0,6,7,8,9,10,11,30,31,45,46,47,64,65,102,117,124,125,128,132,133,136,137,140,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[19,19,19,19,19,19,19,-20,19,19,19,19,92,98,98,98,92,92,92,92,92,92,92,92,92,92,-48,92,92,-52,-58,-59,92,-50,-51,92,-49,-53,92,-48,]),'FLOATTYPE':([0,6,7,8,9,10,11,30,31,45,46,47,64,65,102,117,124,125,128,132,133,136,137,140,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[20,20,20,20,20,20,20,-20,20,20,20,20,93,100,100,100,93,93,93,93,93,93,93,93,93,93,-48,93,93,-52,-58,-59,93,-50,-51,93,-49,-53,93,-48,]),'CHARTYPE':([0,6,7,8,9,10,11,30,31,45,46,47,64,65,102,117,124,125,128,132,133,136,137,140,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[21,21,21,21,21,21,21,-20,21,21,21,21,94,99,99,99,94,94,94,94,94,94,94,94,94,94,-48,94,94,-52,-58,-59,94,-50,-51,94,-49,-53,94,-48,]),'STRINGTYPE':([0,6,7,8,9,10,11,30,31,45,46,47,64,65,102,117,124,125,128,132,133,136,137,140,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[22,22,22,22,22,22,22,-20,22,22,22,22,95,101,101,101,95,95,95,95,95,95,95,95,95,95,-48,95,95,-52,-58,-59,95,-50,-51,95,-49,-53,95,-48,]),'PRINT':([0,6,7,8,9,10,11,30,31,45,46,47,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[23,23,23,23,23,23,23,-20,23,23,23,23,23,23,23,23,23,23,23,23,23,-48,23,23,-52,-58,-59,23,-50,-51,23,-49,-53,23,-48,]),'RETURN':([0,6,7,8,9,10,11,30,31,45,46,47,144,151,153,160,163,164,170,171,175,],[24,24,24,24,24,24,24,-20,24,24,24,24,-48,-52,-58,-59,-50,-51,-49,-53,-48,]),'IF':([0,6,7,8,9,10,11,30,31,45,46,47,124,125,128,132,133,136,137,142,143,144,147,148,151,153,156,160,162,163,164,165,170,171,173,175,],[25,25,25,25,25,25,25,-20,25,25,25,25,25,25,25,25,25,25,25,25,25,-48,25,25,-52,-58,161,-59,25,-50,-51,25,-49,-53,25,-48,]),'WHILE':([0,6,7,8,9,10,11,30,31,45,46,47,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[26,26,26,26,26,26,26,-20,26,26,26,26,26,26,26,26,26,26,26,26,26,-48,26,26,-52,-58,-59,26,-50,-51,26,-49,-53,26,-48,]),'FOR':([0,6,7,8,9,10,11,30,31,45,46,47,124,125,128,132,133,136,137,142,143,144,147,148,151,153,160,162,163,164,165,170,171,173,175,],[27,27,27,27,27,27,27,-20,27,27,27,27,27,27,27,27,27,27,27,27,27,-48,27,27,-52,-58,-59,27,-50,-51,27,-49,-53,27,-48,]),'VOID':([0,6,7,8,9,10,11,30,31,45,46,47,144,151,153,160,163,164,170,171,175,],[29,29,29,29,29,29,29,-20,29,29,29,29,-48,-52,-58,-59,-50,-51,-49,-53,-48,]),'COMMENT':([0,6,7,8,9,10,11,30,31,45,46,47,144,151,153,160,163,164,170,171,175,],[30,30,30,30,30,30,30,-20,30,30,30,30,-48,-52,-58,-59,-50,-51,-49,-53,-48,]),'$end':([0,1,6,7,8,9,10,11,12,30,31,45,46,47,48,49,50,51,52,53,67,81,82,83,144,151,153,160,163,164,170,171,175,],[-63,0,-63,-63,-63,-63,-63,-63,-11,-20,-63,-63,-63,-63,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-48,-52,-58,-59,-50,-51,-49,-53,-48,]),'SEMICOLON':([2,3,4,5,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,91,103,104,105,106,107,108,109,126,130,134,135,],[31,45,46,47,-44,-45,-46,-47,-62,-41,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-42,-43,112,-21,-22,-23,-25,-24,-26,-27,140,143,147,148,]),'ADD':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[32,-44,-45,-46,-47,-62,32,32,-62,-30,-31,-32,-33,-34,32,32,32,32,32,32,32,32,32,32,32,-44,32,32,-45,32,32,32,]),'SUBTRACT':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[33,-44,-45,-46,-47,-62,33,33,-62,-30,-31,-32,-33,-34,33,33,33,33,33,33,33,33,33,33,33,-44,33,33,-45,33,33,33,]),'MULTIPLY':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[34,-44,-45,-46,-47,-62,34,34,-62,34,34,-32,-33,-34,34,34,34,34,34,34,34,34,34,34,34,-44,34,34,-45,34,34,34,]),'DIVIDE':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[35,-44,-45,-46,-47,-62,35,35,-62,35,35,-32,-33,-34,35,35,35,35,35,35,35,35,35,35,35,-44,35,35,-45,35,35,35,]),'EXP':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[36,-44,-45,-46,-47,-62,36,36,-62,36,36,-32,-33,-34,36,36,36,36,36,36,36,36,36,36,36,-44,36,36,-45,36,36,36,]),'EQUALCOMP':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[37,-44,-45,-46,-47,-62,37,37,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,37,37,37,37,37,-44,37,37,-45,37,37,37,]),'GREATER_THAN_EQUAL':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[38,-44,-45,-46,-47,-62,38,38,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,38,38,38,38,38,-44,38,38,-45,38,38,38,]),'LESS_THAN_EQUAL':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[39,-44,-45,-46,-47,-62,39,39,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,39,39,39,39,39,-44,39,39,-45,39,39,39,]),'GREATER_THAN':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[40,-44,-45,-46,-47,-62,40,40,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,40,40,40,40,40,-44,40,40,-45,40,40,40,]),'LESS_THAN':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[41,-44,-45,-46,-47,-62,41,41,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,41,41,41,41,41,-44,41,41,-45,41,41,41,]),'NOTEQUAL':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[42,-44,-45,-46,-47,-62,42,42,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,42,42,42,42,42,-44,42,42,-45,42,42,42,]),'AND':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[43,-44,-45,-46,-47,-62,43,43,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,43,43,43,43,43,-44,43,43,-45,43,43,43,]),'OR':([2,14,15,16,17,18,54,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,103,104,105,106,126,130,169,],[44,-44,-45,-46,-47,-62,44,44,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,44,44,44,44,44,-44,44,44,-45,44,44,44,]),'RPAREN':([14,15,16,17,18,54,68,69,70,71,72,73,74,75,76,77,78,79,80,88,89,90,96,97,103,104,105,106,107,108,119,120,121,122,123,127,152,169,],[-44,-45,-46,-47,-62,-41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-42,-43,109,110,111,-61,118,-21,-22,-23,-25,-24,-26,-54,-55,-56,-57,129,-60,159,172,]),'LPAREN':([23,25,26,27,28,55,56,57,58,66,161,],[59,62,63,64,65,-54,-56,-55,-57,102,166,]),'EQUAL':([55,56,57,58,113,114,115,116,],[84,85,86,87,84,85,86,87,]),'CHAR':([86,],[107,]),'STRING':([87,],[108,]),'COMMA':([96,119,120,121,122,],[117,-54,-55,-56,-57,]),'LBRACE':([110,111,118,129,156,159,172,],[124,125,128,142,162,165,173,]),'RBRACE':([124,125,128,131,132,133,136,137,138,139,141,142,143,144,145,146,147,148,149,150,151,154,155,157,158,162,163,164,165,167,168,170,171,173,174,175,],[-63,-63,-63,144,-63,-63,-63,-63,-19,151,153,-63,-63,-48,-16,-15,-63,-63,-17,-18,-52,160,-12,-13,-14,-63,-50,-51,-63,170,171,-49,-53,-63,175,-48,]),'ELSE':([144,175,],[156,156,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,6,7,8,9,10,11,31,45,46,47,],[1,48,49,50,51,52,53,67,81,82,83,]),'expression':([0,6,7,8,9,10,11,13,24,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,59,62,63,84,85,112,124,125,128,132,133,136,137,142,143,147,148,162,165,166,173,],[2,2,2,2,2,2,2,54,60,2,68,69,70,71,72,73,74,75,76,77,78,79,80,2,2,2,88,89,90,104,105,126,130,130,130,130,130,130,130,130,130,130,130,130,130,169,130,]),'assign':([0,6,7,8,9,10,11,31,45,46,47,64,124,125,128,132,133,136,137,140,142,143,147,148,162,165,173,],[3,3,3,3,3,3,3,3,3,3,3,91,134,134,134,134,134,134,134,152,134,134,134,134,134,134,134,]),'print':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,162,165,173,],[4,4,4,4,4,4,4,4,4,4,4,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'return':([0,6,7,8,9,10,11,31,45,46,47,],[5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,156,162,165,173,],[6,6,6,6,6,6,6,6,6,6,6,133,133,133,133,133,133,133,133,133,133,133,164,133,133,133,]),'if_else_statement':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,156,162,165,173,],[7,7,7,7,7,7,7,7,7,7,7,132,132,132,132,132,132,132,132,132,132,132,163,132,132,132,]),'while_statement':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,162,165,173,],[8,8,8,8,8,8,8,8,8,8,8,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'for_statement':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,162,165,173,],[9,9,9,9,9,9,9,9,9,9,9,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'function_statement':([0,6,7,8,9,10,11,31,45,46,47,],[10,10,10,10,10,10,10,10,10,10,10,]),'comment':([0,6,7,8,9,10,11,31,45,46,47,],[11,11,11,11,11,11,11,11,11,11,11,]),'empty':([0,6,7,8,9,10,11,31,45,46,47,124,125,128,132,133,136,137,142,143,147,148,162,165,173,],[12,12,12,12,12,12,12,12,12,12,12,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'type_identifier':([0,6,7,8,9,10,11,31,45,46,47,65,102,117,],[28,28,28,28,28,28,28,28,28,28,28,96,96,96,]),'function_input':([65,102,117,],[97,123,127,]),'legal':([124,125,128,132,133,136,137,142,143,147,148,162,165,173,],[131,139,141,145,146,149,150,154,155,157,158,167,168,174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',189),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',190),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',191),
  ('ka -> return SEMICOLON ka','ka',3,'p_ka','ka.py',192),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',193),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',194),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',195),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',196),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',197),
  ('ka -> comment ka','ka',2,'p_ka','ka.py',198),
  ('ka -> empty','ka',1,'p_ka','ka.py',199),
  ('legal -> expression SEMICOLON legal','legal',3,'p_legal','ka.py',207),
  ('legal -> assign SEMICOLON legal','legal',3,'p_legal','ka.py',208),
  ('legal -> print SEMICOLON legal','legal',3,'p_legal','ka.py',209),
  ('legal -> if_statement legal','legal',2,'p_legal','ka.py',210),
  ('legal -> if_else_statement legal','legal',2,'p_legal','ka.py',211),
  ('legal -> while_statement legal','legal',2,'p_legal','ka.py',212),
  ('legal -> for_statement legal','legal',2,'p_legal','ka.py',213),
  ('legal -> empty','legal',1,'p_legal','ka.py',214),
  ('comment -> COMMENT','comment',1,'p_comment','ka.py',228),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',235),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',236),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',237),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',238),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',239),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',240),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',247),
  ('return -> RETURN expression','return',2,'p_return','ka.py',254),
  ('return -> RETURN IDENTIFIER','return',2,'p_return','ka.py',255),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',262),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',263),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',264),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',265),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',266),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',284),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',285),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',286),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',287),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',288),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',289),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',309),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',317),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',318),
  ('expression -> INT','expression',1,'p_int_float','ka.py',329),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',330),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',337),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',338),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE','if_statement',7,'p_expression_if','ka.py',345),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE','if_else_statement',11,'p_expression_if_else','ka.py',352),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',353),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',354),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE','while_statement',7,'p_while_statement','ka.py',369),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE','for_statement',11,'p_for_statement','ka.py',376),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',383),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',384),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',385),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',386),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',7,'p_function','ka.py',393),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',8,'p_function','ka.py',394),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',404),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',405),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',415),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',422),
]
