
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign ka\n       | if_statement ka\n       | if_else_statement ka\n       | print ka\n       | empty\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT expression\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE empty\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,3,4,5,6,8,9,10,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,36,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,67,69,70,73,74,75,76,79,81,82,84,],[8,8,8,8,8,8,-26,-27,-32,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-23,8,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,8,-33,-28,8,-30,-31,8,-33,-29,8,-33,]),'INT':([0,3,4,5,6,8,9,10,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,36,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,64,65,67,69,70,73,74,75,76,79,81,82,84,],[9,9,9,9,9,9,-26,-27,-32,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-23,9,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,62,-7,-8,-9,-10,9,-33,-28,9,-30,-31,9,-33,-29,9,-33,]),'FLOAT':([0,3,4,5,6,8,9,10,11,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,36,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,59,62,63,64,65,67,69,70,73,74,75,76,79,81,82,84,],[10,10,10,10,10,10,-26,-27,-32,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-23,10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,64,-7,-8,-9,-10,10,-33,-28,10,-30,-31,10,-33,-29,10,-33,]),'IDENTIFIER':([0,3,4,5,6,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,36,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,67,69,70,73,74,75,76,79,81,82,84,],[11,11,11,11,11,11,-26,-27,-32,37,38,39,40,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-23,11,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,11,-33,-28,11,-30,-31,11,-33,-29,11,-33,]),'INTTYPE':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[12,12,12,12,12,-26,-27,-32,12,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'CHARTYPE':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[13,13,13,13,13,-26,-27,-32,13,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'FLOATTYPE':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[14,14,14,14,14,-26,-27,-32,14,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'STRINGTYPE':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[15,15,15,15,15,-26,-27,-32,15,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'IF':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,71,74,75,79,81,84,],[16,16,16,16,16,-26,-27,-32,16,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,72,-30,-31,-33,-29,-33,]),'PRINT':([0,3,4,5,6,9,10,11,18,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[17,17,17,17,17,-26,-27,-32,17,-23,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'$end':([0,1,3,4,5,6,7,9,10,11,18,32,33,34,35,36,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,64,65,69,70,74,75,79,81,84,],[-33,0,-33,-33,-33,-33,-6,-26,-27,-32,-33,-2,-3,-4,-5,-23,-11,-1,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,-7,-8,-9,-10,-33,-28,-30,-31,-33,-29,-33,]),'SEMICOLON':([2,9,10,11,36,44,45,46,47,48,49,50,51,52,53,54,55,56,],[18,-26,-27,-32,-23,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'ADD':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[19,-26,-27,-32,19,19,-12,-13,-14,-15,-16,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'SUBTRACT':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[20,-26,-27,-32,20,20,-12,-13,-14,-15,-16,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'MULTIPLY':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[21,-26,-27,-32,21,21,21,21,-14,-15,-16,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'DIVIDE':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[22,-26,-27,-32,22,22,22,22,-14,-15,-16,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'EXP':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[23,-26,-27,-32,23,23,23,23,-14,-15,-16,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'EQUALCOMP':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[24,-26,-27,-32,24,24,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,24,24,24,24,24,24,24,]),'GREATER_THAN_EQUAL':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[25,-26,-27,-32,25,25,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,25,25,25,25,25,25,25,]),'LESS_THAN_EQUAL':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[26,-26,-27,-32,26,26,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,26,26,26,26,26,26,26,]),'GREATER_THAN':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[27,-26,-27,-32,27,27,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,27,27,27,27,27,27,27,]),'LESS_THAN':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[28,-26,-27,-32,28,28,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,28,28,28,28,28,28,28,]),'NOTEQUAL':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[29,-26,-27,-32,29,29,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,29,29,29,29,29,29,29,]),'AND':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[30,-26,-27,-32,30,30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,30,30,30,30,30,30,30,]),'OR':([2,9,10,11,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,],[31,-26,-27,-32,31,31,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,31,31,31,31,31,31,31,]),'RPAREN':([9,10,11,36,44,45,46,47,48,49,50,51,52,53,54,55,56,61,78,],[-26,-27,-32,-23,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,66,80,]),'RBRACE':([9,10,11,36,44,45,46,47,48,49,50,51,52,53,54,55,56,68,77,83,],[-26,-27,-32,-23,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,69,79,84,]),'LPAREN':([16,72,],[41,76,]),'EQUAL':([37,38,39,40,],[57,58,59,60,]),'CHAR':([58,],[63,]),'STRING':([60,],[65,]),'LBRACE':([66,71,80,],[67,73,82,]),'ELSE':([69,84,],[71,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,3,4,5,6,18,],[1,32,33,34,35,43,]),'expression':([0,3,4,5,6,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,41,67,73,76,82,],[2,2,2,2,2,36,42,2,44,45,46,47,48,49,50,51,52,53,54,55,56,61,68,77,78,83,]),'assign':([0,3,4,5,6,18,],[3,3,3,3,3,3,]),'if_statement':([0,3,4,5,6,18,71,],[4,4,4,4,4,4,75,]),'if_else_statement':([0,3,4,5,6,18,71,],[5,5,5,5,5,5,74,]),'print':([0,3,4,5,6,18,],[6,6,6,6,6,6,]),'empty':([0,3,4,5,6,18,69,79,84,],[7,7,7,7,7,7,70,81,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',166),
  ('ka -> assign ka','ka',2,'p_ka','ka.py',167),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',168),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',169),
  ('ka -> print ka','ka',2,'p_ka','ka.py',170),
  ('ka -> empty','ka',1,'p_ka','ka.py',171),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',179),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',180),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',181),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',182),
  ('print -> PRINT expression','print',2,'p_print','ka.py',189),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',196),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',197),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',198),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',199),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',200),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',218),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',219),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',220),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',221),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',222),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',223),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',243),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',251),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',252),
  ('expression -> INT','expression',1,'p_int_float','ka.py',263),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',264),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE empty','if_statement',8,'p_expression_if','ka.py',271),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE empty','if_else_statement',12,'p_expression_if_else','ka.py',278),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',279),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',280),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',295),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',302),
]
