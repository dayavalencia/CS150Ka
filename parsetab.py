
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | input SEMICOLON ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | comment ka\n       | empty\n    \n    legal : expression SEMICOLON legal\n       | assign SEMICOLON legal\n       | print SEMICOLON legal\n       | input SEMICOLON legal\n       | return SEMICOLON legal\n       | if_statement legal\n       | if_else_statement legal\n       | while_statement legal\n       | for_statement legal\n       | empty\n    \n    comment : COMMENT\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n    \n  print : PRINT LPAREN expression RPAREN\n  \n  input : IDENTIFIER EQUAL INPUT LPAREN RPAREN\n  \n  return : RETURN expression\n         | RETURN IDENTIFIER\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[13,13,13,13,13,13,13,13,-22,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-51,13,13,13,13,-55,-61,-62,13,-53,-54,13,13,-52,-56,13,-51,]),'INT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[14,14,14,14,14,14,14,14,-22,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,104,14,14,14,14,14,14,14,14,14,14,14,14,-51,14,14,14,14,-55,-61,-62,14,-53,-54,14,14,-52,-56,14,-51,]),'FLOAT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[15,15,15,15,15,15,15,15,-22,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,107,15,15,15,15,15,15,15,15,15,15,15,-51,15,15,15,15,-55,-61,-62,15,-53,-54,15,15,-52,-56,15,-51,]),'CONTINUE':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[16,16,16,16,16,16,16,16,-22,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-51,16,16,16,16,-55,-61,-62,16,-53,-54,16,16,-52,-56,16,-51,]),'BREAK':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[17,17,17,17,17,17,17,17,-22,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-51,17,17,17,17,-55,-61,-62,17,-53,-54,17,17,-52,-56,17,-51,]),'IDENTIFIER':([0,6,7,8,9,10,11,13,19,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,92,93,94,95,98,99,100,101,113,126,127,130,134,135,140,141,143,147,148,149,152,153,154,155,160,162,171,173,174,175,176,177,181,182,184,186,],[18,18,18,18,18,18,18,54,56,57,58,59,65,-22,18,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,18,54,54,54,54,54,114,115,116,117,120,121,122,123,54,18,18,18,18,18,18,18,159,18,18,-51,18,18,18,18,-55,-61,-62,18,-53,-54,18,54,-52,-56,18,-51,]),'INTTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,102,118,126,127,130,134,135,140,141,145,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[19,19,19,19,19,19,19,-22,19,19,19,19,92,98,98,98,92,92,92,92,92,92,92,92,92,92,-51,92,92,92,92,-55,-61,-62,92,-53,-54,92,-52,-56,92,-51,]),'FLOATTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,102,118,126,127,130,134,135,140,141,145,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[20,20,20,20,20,20,20,-22,20,20,20,20,93,100,100,100,93,93,93,93,93,93,93,93,93,93,-51,93,93,93,93,-55,-61,-62,93,-53,-54,93,-52,-56,93,-51,]),'CHARTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,102,118,126,127,130,134,135,140,141,145,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[21,21,21,21,21,21,21,-22,21,21,21,21,94,99,99,99,94,94,94,94,94,94,94,94,94,94,-51,94,94,94,94,-55,-61,-62,94,-53,-54,94,-52,-56,94,-51,]),'STRINGTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,102,118,126,127,130,134,135,140,141,145,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[22,22,22,22,22,22,22,-22,22,22,22,22,95,101,101,101,95,95,95,95,95,95,95,95,95,95,-51,95,95,95,95,-55,-61,-62,95,-53,-54,95,-52,-56,95,-51,]),'PRINT':([0,6,7,8,9,10,11,29,30,44,45,46,126,127,130,134,135,140,141,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[23,23,23,23,23,23,23,-22,23,23,23,23,23,23,23,23,23,23,23,23,23,-51,23,23,23,23,-55,-61,-62,23,-53,-54,23,-52,-56,23,-51,]),'IF':([0,6,7,8,9,10,11,29,30,44,45,46,126,127,130,134,135,140,141,147,148,149,152,153,154,155,160,162,165,171,173,174,175,176,181,182,184,186,],[24,24,24,24,24,24,24,-22,24,24,24,24,24,24,24,24,24,24,24,24,24,-51,24,24,24,24,-55,-61,172,-62,24,-53,-54,24,-52,-56,24,-51,]),'WHILE':([0,6,7,8,9,10,11,29,30,44,45,46,126,127,130,134,135,140,141,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[25,25,25,25,25,25,25,-22,25,25,25,25,25,25,25,25,25,25,25,25,25,-51,25,25,25,25,-55,-61,-62,25,-53,-54,25,-52,-56,25,-51,]),'FOR':([0,6,7,8,9,10,11,29,30,44,45,46,126,127,130,134,135,140,141,147,148,149,152,153,154,155,160,162,171,173,174,175,176,181,182,184,186,],[26,26,26,26,26,26,26,-22,26,26,26,26,26,26,26,26,26,26,26,26,26,-51,26,26,26,26,-55,-61,-62,26,-53,-54,26,-52,-56,26,-51,]),'VOID':([0,6,7,8,9,10,11,29,30,44,45,46,149,160,162,171,174,175,181,182,186,],[28,28,28,28,28,28,28,-22,28,28,28,28,-51,-55,-61,-62,-53,-54,-52,-56,-51,]),'COMMENT':([0,6,7,8,9,10,11,29,30,44,45,46,149,160,162,171,174,175,181,182,186,],[29,29,29,29,29,29,29,-22,29,29,29,29,-51,-55,-61,-62,-53,-54,-52,-56,-51,]),'$end':([0,1,6,7,8,9,10,11,12,29,30,44,45,46,47,48,49,50,51,52,66,80,81,82,149,160,162,171,174,175,181,182,186,],[-66,0,-66,-66,-66,-66,-66,-66,-11,-22,-66,-66,-66,-66,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-51,-55,-61,-62,-53,-54,-52,-56,-51,]),'SEMICOLON':([2,3,4,5,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,91,104,105,106,107,108,109,110,125,128,132,136,137,138,139,158,159,],[30,44,45,46,-47,-48,-49,-50,-65,-44,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,113,-23,-24,-25,-27,-26,-28,-29,-30,145,148,152,153,154,155,-31,-32,]),'ADD':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[31,-47,-48,-49,-50,-65,31,-65,-33,-34,-35,-36,-37,31,31,31,31,31,31,31,31,31,31,31,-47,31,31,-48,31,31,31,-65,31,]),'SUBTRACT':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[32,-47,-48,-49,-50,-65,32,-65,-33,-34,-35,-36,-37,32,32,32,32,32,32,32,32,32,32,32,-47,32,32,-48,32,32,32,-65,32,]),'MULTIPLY':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[33,-47,-48,-49,-50,-65,33,-65,33,33,-35,-36,-37,33,33,33,33,33,33,33,33,33,33,33,-47,33,33,-48,33,33,33,-65,33,]),'DIVIDE':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[34,-47,-48,-49,-50,-65,34,-65,34,34,-35,-36,-37,34,34,34,34,34,34,34,34,34,34,34,-47,34,34,-48,34,34,34,-65,34,]),'EXP':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[35,-47,-48,-49,-50,-65,35,-65,35,35,-35,-36,-37,35,35,35,35,35,35,35,35,35,35,35,-47,35,35,-48,35,35,35,-65,35,]),'EQUALCOMP':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[36,-47,-48,-49,-50,-65,36,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,36,36,36,36,36,-47,36,36,-48,36,36,36,-65,36,]),'GREATER_THAN_EQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[37,-47,-48,-49,-50,-65,37,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,37,37,37,37,37,-47,37,37,-48,37,37,37,-65,37,]),'LESS_THAN_EQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[38,-47,-48,-49,-50,-65,38,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,38,38,38,38,38,-47,38,38,-48,38,38,38,-65,38,]),'GREATER_THAN':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[39,-47,-48,-49,-50,-65,39,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,39,39,39,39,39,-47,39,39,-48,39,39,39,-65,39,]),'LESS_THAN':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[40,-47,-48,-49,-50,-65,40,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,40,40,40,40,40,-47,40,40,-48,40,40,40,-65,40,]),'NOTEQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[41,-47,-48,-49,-50,-65,41,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,41,41,41,41,41,-47,41,41,-48,41,41,41,-65,41,]),'AND':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[42,-47,-48,-49,-50,-65,42,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,42,42,42,42,42,-47,42,42,-48,42,42,42,-65,42,]),'OR':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,104,105,106,107,128,132,158,159,180,],[43,-47,-48,-49,-50,-65,43,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,43,43,43,43,43,-47,43,43,-48,43,43,43,-65,43,]),'RPAREN':([14,15,16,17,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,96,97,103,104,105,106,107,108,109,120,121,122,123,124,129,161,180,],[-47,-48,-49,-50,-44,-65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,110,111,112,-64,119,125,-23,-24,-25,-27,-26,-28,-57,-58,-59,-60,131,-63,170,183,]),'EQUAL':([18,56,57,58,59,114,115,116,117,],[55,84,85,86,87,84,85,86,87,]),'LPAREN':([23,24,25,26,27,56,57,58,59,65,83,172,],[60,61,62,63,64,-57,-59,-58,-60,102,103,177,]),'INPUT':([55,],[83,]),'CHAR':([86,],[108,]),'STRING':([87,],[109,]),'COMMA':([96,120,121,122,123,],[118,-57,-58,-59,-60,]),'LBRACE':([111,112,119,131,165,170,183,],[126,127,130,147,173,176,184,]),'RETURN':([126,127,130,134,135,140,141,147,148,149,152,153,154,155,160,173,174,175,176,181,182,184,186,],[143,143,143,143,143,143,143,143,143,-51,143,143,143,143,-55,143,-53,-54,143,-52,-56,143,-51,]),'RBRACE':([126,127,130,133,134,135,140,141,142,144,146,147,148,149,150,151,152,153,154,155,156,157,160,163,164,166,167,168,169,173,174,175,176,178,179,181,182,184,185,186,],[-66,-66,-66,149,-66,-66,-66,-66,-21,160,162,-66,-66,-51,-18,-17,-66,-66,-66,-66,-19,-20,-55,171,-12,-13,-14,-15,-16,-66,-53,-54,-66,181,182,-52,-56,-66,186,-51,]),'ELSE':([149,186,],[165,165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,6,7,8,9,10,11,30,44,45,46,],[1,47,48,49,50,51,52,66,80,81,82,]),'expression':([0,6,7,8,9,10,11,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,113,126,127,130,134,135,140,141,143,147,148,152,153,154,155,173,176,177,184,],[2,2,2,2,2,2,2,53,2,67,68,69,70,71,72,73,74,75,76,77,78,79,2,2,2,88,89,90,105,106,128,132,132,132,132,132,132,132,158,132,132,132,132,132,132,132,132,180,132,]),'assign':([0,6,7,8,9,10,11,30,44,45,46,63,126,127,130,134,135,140,141,145,147,148,152,153,154,155,173,176,184,],[3,3,3,3,3,3,3,3,3,3,3,91,136,136,136,136,136,136,136,161,136,136,136,136,136,136,136,136,136,]),'print':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[4,4,4,4,4,4,4,4,4,4,4,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'input':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[5,5,5,5,5,5,5,5,5,5,5,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'if_statement':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,165,173,176,184,],[6,6,6,6,6,6,6,6,6,6,6,135,135,135,135,135,135,135,135,135,135,135,135,135,175,135,135,135,]),'if_else_statement':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,165,173,176,184,],[7,7,7,7,7,7,7,7,7,7,7,134,134,134,134,134,134,134,134,134,134,134,134,134,174,134,134,134,]),'while_statement':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[8,8,8,8,8,8,8,8,8,8,8,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'for_statement':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[9,9,9,9,9,9,9,9,9,9,9,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'function_statement':([0,6,7,8,9,10,11,30,44,45,46,],[10,10,10,10,10,10,10,10,10,10,10,]),'comment':([0,6,7,8,9,10,11,30,44,45,46,],[11,11,11,11,11,11,11,11,11,11,11,]),'empty':([0,6,7,8,9,10,11,30,44,45,46,126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[12,12,12,12,12,12,12,12,12,12,12,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'type_identifier':([0,6,7,8,9,10,11,30,44,45,46,64,102,118,],[27,27,27,27,27,27,27,27,27,27,27,96,96,96,]),'function_input':([64,102,118,],[97,124,129,]),'legal':([126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[133,144,146,150,151,156,157,163,164,166,167,168,169,178,179,185,]),'return':([126,127,130,134,135,140,141,147,148,152,153,154,155,173,176,184,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',192),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',193),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',194),
  ('ka -> input SEMICOLON ka','ka',3,'p_ka','ka.py',195),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',196),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',197),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',198),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',199),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',200),
  ('ka -> comment ka','ka',2,'p_ka','ka.py',201),
  ('ka -> empty','ka',1,'p_ka','ka.py',202),
  ('legal -> expression SEMICOLON legal','legal',3,'p_legal','ka.py',210),
  ('legal -> assign SEMICOLON legal','legal',3,'p_legal','ka.py',211),
  ('legal -> print SEMICOLON legal','legal',3,'p_legal','ka.py',212),
  ('legal -> input SEMICOLON legal','legal',3,'p_legal','ka.py',213),
  ('legal -> return SEMICOLON legal','legal',3,'p_legal','ka.py',214),
  ('legal -> if_statement legal','legal',2,'p_legal','ka.py',215),
  ('legal -> if_else_statement legal','legal',2,'p_legal','ka.py',216),
  ('legal -> while_statement legal','legal',2,'p_legal','ka.py',217),
  ('legal -> for_statement legal','legal',2,'p_legal','ka.py',218),
  ('legal -> empty','legal',1,'p_legal','ka.py',219),
  ('comment -> COMMENT','comment',1,'p_comment','ka.py',233),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',240),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',241),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',242),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',243),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',244),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',245),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',252),
  ('input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN','input',5,'p_input','ka.py',259),
  ('return -> RETURN expression','return',2,'p_return','ka.py',266),
  ('return -> RETURN IDENTIFIER','return',2,'p_return','ka.py',267),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',274),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',275),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',276),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',277),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',278),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',296),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',297),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',298),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',299),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',300),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',301),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',321),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',329),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',330),
  ('expression -> INT','expression',1,'p_int_float','ka.py',341),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',342),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',349),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',350),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE','if_statement',7,'p_expression_if','ka.py',357),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE','if_else_statement',11,'p_expression_if_else','ka.py',364),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',365),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',366),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE','while_statement',7,'p_while_statement','ka.py',381),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE','for_statement',11,'p_for_statement','ka.py',388),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',395),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',396),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',397),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',398),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',7,'p_function','ka.py',405),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',8,'p_function','ka.py',406),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',416),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',417),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',427),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',434),
]
