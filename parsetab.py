
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | input SEMICOLON ka\n       | return SEMICOLON legal\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | comment ka\n       | empty\n    \n    legal : expression SEMICOLON legal\n       | assign SEMICOLON legal\n       | print SEMICOLON legal\n       | input SEMICOLON legal\n       | return SEMICOLON legal\n       | if_statement legal\n       | if_else_statement legal\n       | while_statement legal\n       | for_statement legal\n       | comment legal\n       | empty\n    \n    comment : COMMENT\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n           | INTTYPE IDENTIFIER\n           | FLOATTYPE IDENTIFIER\n           | CHARTYPE IDENTIFIER\n           | STRINGTYPE IDENTIFIER\n           | IDENTIFIER EQUAL expression\n    \n  print : PRINT LPAREN expression RPAREN\n        | PRINT LPAREN STRING RPAREN\n  \n  input : IDENTIFIER EQUAL INPUT LPAREN RPAREN\n  \n  return : RETURN expression\n         | RETURN INT\n         | RETURN IDENTIFIER\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n               | LPAREN expression RPAREN\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n                   | empty\n    \n    expression : IDENTIFIER LPAREN function_call_input RPAREN\n    \n    function_call_input : IDENTIFIER COMMA IDENTIFIER\n                        | IDENTIFIER COMMA expression\n                        | expression COMMA IDENTIFIER\n                        | expression COMMA expression\n                        | IDENTIFIER\n                        | expression\n                        | empty\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'LPAREN':([0,7,8,9,10,11,12,14,15,20,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,58,60,61,62,63,64,65,66,69,70,71,74,98,99,100,101,102,109,114,115,116,133,134,135,136,137,147,149,161,162,175,178,180,181,184,190,191,192,194,198,199,200,201,202,203,204,208,209,211,213,],[14,14,14,14,14,14,14,14,14,60,66,14,70,71,72,73,-24,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,60,14,14,-67,-69,-68,-70,14,60,14,14,132,14,14,14,14,14,60,150,14,14,14,14,14,14,14,14,14,14,14,60,60,14,14,14,14,-61,-65,-71,-72,204,14,-63,-64,14,14,-62,-66,14,-61,]),'NOT':([0,7,8,9,10,11,12,14,15,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[15,15,15,15,15,15,15,15,15,15,-24,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-61,-65,-71,-72,15,-63,-64,15,15,-62,-66,15,-61,]),'INT':([0,7,8,9,10,11,12,14,15,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[16,16,16,16,16,16,16,16,16,68,-24,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,151,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-61,-65,-71,-72,16,-63,-64,16,16,-62,-66,16,-61,]),'FLOAT':([0,7,8,9,10,11,12,14,15,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[17,17,17,17,17,17,17,17,17,17,-24,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,154,17,17,17,17,17,17,17,17,17,17,17,17,17,-61,-65,-71,-72,17,-63,-64,17,17,-62,-66,17,-61,]),'CONTINUE':([0,7,8,9,10,11,12,14,15,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[18,18,18,18,18,18,18,18,18,18,-24,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-61,-65,-71,-72,18,-63,-64,18,18,-62,-66,18,-61,]),'BREAK':([0,7,8,9,10,11,12,14,15,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[19,19,19,19,19,19,19,19,19,19,-24,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-61,-65,-71,-72,19,-63,-64,19,19,-62,-66,19,-61,]),'IDENTIFIER':([0,7,8,9,10,11,12,14,15,21,22,23,24,26,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,72,98,99,100,101,102,104,105,106,107,115,116,128,129,130,131,133,134,135,136,137,147,149,161,162,180,181,184,188,190,191,192,194,198,200,201,202,203,204,208,209,211,213,],[20,20,20,20,20,20,20,58,58,62,63,64,65,69,74,-24,20,58,58,58,58,58,58,58,58,58,58,58,58,58,20,20,20,20,109,58,58,58,58,124,20,20,20,20,20,143,144,145,146,58,58,165,166,167,168,20,20,20,20,20,175,178,58,58,20,20,20,124,20,-61,-65,-71,-72,20,-63,-64,20,58,-62,-66,20,-61,]),'INTTYPE':([0,7,8,9,10,11,12,32,33,47,48,49,50,72,73,98,99,100,101,102,132,133,134,135,136,137,163,180,181,184,188,190,191,192,194,198,200,201,202,203,208,209,211,213,],[21,21,21,21,21,21,21,-24,21,21,21,21,104,104,128,104,104,104,104,104,128,104,104,104,104,104,128,104,104,104,104,104,-61,-65,-71,-72,104,-63,-64,104,-62,-66,104,-61,]),'FLOATTYPE':([0,7,8,9,10,11,12,32,33,47,48,49,50,72,73,98,99,100,101,102,132,133,134,135,136,137,163,180,181,184,188,190,191,192,194,198,200,201,202,203,208,209,211,213,],[22,22,22,22,22,22,22,-24,22,22,22,22,105,105,130,105,105,105,105,105,130,105,105,105,105,105,130,105,105,105,105,105,-61,-65,-71,-72,105,-63,-64,105,-62,-66,105,-61,]),'CHARTYPE':([0,7,8,9,10,11,12,32,33,47,48,49,50,72,73,98,99,100,101,102,132,133,134,135,136,137,163,180,181,184,188,190,191,192,194,198,200,201,202,203,208,209,211,213,],[23,23,23,23,23,23,23,-24,23,23,23,23,106,106,129,106,106,106,106,106,129,106,106,106,106,106,129,106,106,106,106,106,-61,-65,-71,-72,106,-63,-64,106,-62,-66,106,-61,]),'STRINGTYPE':([0,7,8,9,10,11,12,32,33,47,48,49,50,72,73,98,99,100,101,102,132,133,134,135,136,137,163,180,181,184,188,190,191,192,194,198,200,201,202,203,208,209,211,213,],[24,24,24,24,24,24,24,-24,24,24,24,24,107,107,131,107,107,107,107,107,131,107,107,107,107,107,131,107,107,107,107,107,-61,-65,-71,-72,107,-63,-64,107,-62,-66,107,-61,]),'PRINT':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,198,200,201,202,203,208,209,211,213,],[25,25,25,25,25,25,25,-24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-61,-65,-71,-72,25,-63,-64,25,-62,-66,25,-61,]),'RETURN':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,198,200,201,202,203,208,209,211,213,],[26,26,26,26,26,26,26,-24,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-61,-65,-71,-72,26,-63,-64,26,-62,-66,26,-61,]),'IF':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,196,198,200,201,202,203,208,209,211,213,],[27,27,27,27,27,27,27,-24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-61,-65,-71,199,-72,27,-63,-64,27,-62,-66,27,-61,]),'WHILE':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,198,200,201,202,203,208,209,211,213,],[28,28,28,28,28,28,28,-24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-61,-65,-71,-72,28,-63,-64,28,-62,-66,28,-61,]),'FOR':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,198,200,201,202,203,208,209,211,213,],[29,29,29,29,29,29,29,-24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-61,-65,-71,-72,29,-63,-64,29,-62,-66,29,-61,]),'VOID':([0,7,8,9,10,11,12,32,33,47,48,49,191,192,194,198,201,202,208,209,213,],[31,31,31,31,31,31,31,-24,31,31,31,31,-61,-65,-71,-72,-63,-64,-62,-66,-61,]),'COMMENT':([0,7,8,9,10,11,12,32,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,191,192,194,198,200,201,202,203,208,209,211,213,],[32,32,32,32,32,32,32,-24,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-61,-65,-71,-72,32,-63,-64,32,-62,-66,32,-61,]),'$end':([0,1,7,8,9,10,11,12,13,32,33,47,48,49,50,51,52,53,54,55,56,75,89,90,91,93,98,99,100,101,102,103,133,134,135,136,137,138,139,140,141,142,170,171,172,173,174,191,192,194,198,201,202,208,209,213,],[-85,0,-85,-85,-85,-85,-85,-85,-12,-24,-85,-85,-85,-85,-85,-6,-7,-8,-9,-10,-11,-1,-2,-3,-4,-5,-85,-85,-85,-85,-85,-23,-85,-85,-85,-85,-85,-18,-19,-20,-21,-22,-17,-13,-14,-15,-16,-61,-65,-71,-72,-63,-64,-62,-66,-61,]),'SEMICOLON':([2,3,4,5,6,16,17,18,19,20,58,59,62,63,64,65,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,96,97,108,113,123,143,144,145,146,148,151,152,153,154,155,156,157,158,179,182,],[33,47,48,49,50,-57,-58,-59,-60,-84,-84,-54,-31,-32,-33,-34,-39,-40,-41,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,-55,-56,133,134,135,136,137,-47,-35,161,-31,-32,-33,-34,-76,-25,-26,-27,-29,-28,-30,-36,-37,-38,188,]),'ADD':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[34,-57,-58,-59,-60,-84,34,-84,34,34,-57,-84,-42,-43,-44,-45,-46,34,34,34,34,34,34,34,34,34,-47,-84,34,34,34,34,34,-76,-57,34,34,-58,-84,34,34,-84,34,34,]),'SUBTRACT':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[35,-57,-58,-59,-60,-84,35,-84,35,35,-57,-84,-42,-43,-44,-45,-46,35,35,35,35,35,35,35,35,35,-47,-84,35,35,35,35,35,-76,-57,35,35,-58,-84,35,35,-84,35,35,]),'MULTIPLY':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[36,-57,-58,-59,-60,-84,36,-84,36,36,-57,-84,36,36,-44,-45,-46,36,36,36,36,36,36,36,36,36,-47,-84,36,36,36,36,36,-76,-57,36,36,-58,-84,36,36,-84,36,36,]),'DIVIDE':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[37,-57,-58,-59,-60,-84,37,-84,37,37,-57,-84,37,37,-44,-45,-46,37,37,37,37,37,37,37,37,37,-47,-84,37,37,37,37,37,-76,-57,37,37,-58,-84,37,37,-84,37,37,]),'EXP':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[38,-57,-58,-59,-60,-84,38,-84,38,38,-57,-84,38,38,-44,-45,-46,38,38,38,38,38,38,38,38,38,-47,-84,38,38,38,38,38,-76,-57,38,38,-58,-84,38,38,-84,38,38,]),'EQUALCOMP':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[39,-57,-58,-59,-60,-84,39,-84,39,39,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,39,39,39,-47,-84,39,39,39,39,39,-76,-57,39,39,-58,-84,39,39,-84,39,39,]),'GREATER_THAN_EQUAL':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[40,-57,-58,-59,-60,-84,40,-84,40,40,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,40,40,40,-47,-84,40,40,40,40,40,-76,-57,40,40,-58,-84,40,40,-84,40,40,]),'LESS_THAN_EQUAL':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[41,-57,-58,-59,-60,-84,41,-84,41,41,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,41,41,41,-47,-84,41,41,41,41,41,-76,-57,41,41,-58,-84,41,41,-84,41,41,]),'GREATER_THAN':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[42,-57,-58,-59,-60,-84,42,-84,42,42,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,42,42,42,-47,-84,42,42,42,42,42,-76,-57,42,42,-58,-84,42,42,-84,42,42,]),'LESS_THAN':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[43,-57,-58,-59,-60,-84,43,-84,43,43,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,43,43,43,-47,-84,43,43,43,43,43,-76,-57,43,43,-58,-84,43,43,-84,43,43,]),'NOTEQUAL':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[44,-57,-58,-59,-60,-84,44,-84,44,44,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,44,44,44,-47,-84,44,44,44,44,44,-76,-57,44,44,-58,-84,44,44,-84,44,44,]),'AND':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[45,-57,-58,-59,-60,-84,45,-84,45,45,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,45,45,45,-47,-84,45,45,45,45,45,-76,-57,45,45,-58,-84,45,45,-84,45,45,]),'OR':([2,16,17,18,19,20,57,58,59,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,88,94,108,109,111,113,119,121,122,148,151,152,153,154,175,176,177,178,182,207,],[46,-57,-58,-59,-60,-84,46,-84,46,46,-57,-84,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,46,46,46,-47,-84,46,46,46,46,46,-76,-57,46,46,-58,-84,46,46,-84,46,46,]),'RPAREN':([16,17,18,19,57,58,59,60,73,76,77,78,79,80,81,82,83,84,85,86,87,88,108,109,110,111,112,113,119,120,121,122,125,126,127,132,143,144,145,146,148,150,151,152,153,154,155,156,163,165,166,167,168,169,175,176,177,178,183,193,207,],[-57,-58,-59,-60,108,-84,-54,-85,-85,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,-55,-56,-47,-81,148,-82,-83,-35,157,158,159,160,-74,164,-75,-85,-31,-32,-33,-34,-76,179,-25,-26,-27,-29,-28,-30,-85,-67,-68,-69,-70,185,-77,-78,-80,-79,-73,197,210,]),'COMMA':([16,17,18,19,58,59,76,77,78,79,80,81,82,83,84,85,86,87,88,108,109,111,125,148,165,166,167,168,],[-57,-58,-59,-60,-84,-54,-42,-43,-44,-45,-46,-48,-49,-50,-51,-52,-53,-55,-56,-47,147,149,163,-76,-67,-68,-69,-70,]),'EQUAL':([20,62,63,64,65,124,143,144,145,146,],[61,115,116,117,118,162,115,116,117,118,]),'RBRACE':([32,98,99,100,101,102,103,133,134,135,136,137,138,139,140,141,142,170,171,172,173,174,180,181,184,186,187,189,190,191,192,195,200,201,202,203,205,206,208,209,211,212,213,],[-24,-85,-85,-85,-85,-85,-23,-85,-85,-85,-85,-85,-18,-19,-20,-21,-22,-17,-13,-14,-15,-16,-85,-85,-85,191,192,194,-85,-61,-65,198,-85,-63,-64,-85,208,209,-62,-66,-85,213,-61,]),'INPUT':([61,],[114,]),'STRING':([66,118,],[120,156,]),'CHAR':([117,],[155,]),'LBRACE':([159,160,164,185,196,197,210,],[180,181,184,190,200,203,211,]),'ELSE':([191,213,],[196,196,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,7,8,9,10,11,12,33,47,48,49,],[1,51,52,53,54,55,56,75,89,90,91,]),'expression':([0,7,8,9,10,11,12,14,15,26,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,61,66,70,71,98,99,100,101,102,115,116,133,134,135,136,137,147,149,161,162,180,181,184,190,200,203,204,211,],[2,2,2,2,2,2,2,57,59,67,2,76,77,78,79,80,81,82,83,84,85,86,87,88,2,2,2,94,111,113,119,121,122,94,94,94,94,94,152,153,94,94,94,94,94,176,177,182,113,94,94,94,94,94,94,207,94,]),'assign':([0,7,8,9,10,11,12,33,47,48,49,50,72,98,99,100,101,102,133,134,135,136,137,180,181,184,188,190,200,203,211,],[3,3,3,3,3,3,3,3,3,3,3,95,123,95,95,95,95,95,95,95,95,95,95,95,95,95,193,95,95,95,95,]),'print':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[4,4,4,4,4,4,4,4,4,4,4,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'input':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[5,5,5,5,5,5,5,5,5,5,5,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'return':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[6,6,6,6,6,6,6,6,6,6,6,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'if_statement':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,196,200,203,211,],[7,7,7,7,7,7,7,7,7,7,7,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,202,98,98,98,]),'if_else_statement':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,196,200,203,211,],[8,8,8,8,8,8,8,8,8,8,8,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,201,99,99,99,]),'while_statement':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[9,9,9,9,9,9,9,9,9,9,9,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'for_statement':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[10,10,10,10,10,10,10,10,10,10,10,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'function_statement':([0,7,8,9,10,11,12,33,47,48,49,],[11,11,11,11,11,11,11,11,11,11,11,]),'comment':([0,7,8,9,10,11,12,33,47,48,49,50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[12,12,12,12,12,12,12,12,12,12,12,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'empty':([0,7,8,9,10,11,12,33,47,48,49,50,60,73,98,99,100,101,102,132,133,134,135,136,137,163,180,181,184,190,200,203,211,],[13,13,13,13,13,13,13,13,13,13,13,103,112,127,103,103,103,103,103,127,103,103,103,103,103,127,103,103,103,103,103,103,103,]),'type_identifier':([0,7,8,9,10,11,12,33,47,48,49,73,132,163,],[30,30,30,30,30,30,30,30,30,30,30,125,125,125,]),'legal':([50,98,99,100,101,102,133,134,135,136,137,180,181,184,190,200,203,211,],[93,138,139,140,141,142,170,171,172,173,174,186,187,189,195,205,206,212,]),'function_call_input':([60,],[110,]),'function_input':([73,132,163,],[126,169,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',193),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',194),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',195),
  ('ka -> input SEMICOLON ka','ka',3,'p_ka','ka.py',196),
  ('ka -> return SEMICOLON legal','ka',3,'p_ka','ka.py',197),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',198),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',199),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',200),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',201),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',202),
  ('ka -> comment ka','ka',2,'p_ka','ka.py',203),
  ('ka -> empty','ka',1,'p_ka','ka.py',204),
  ('legal -> expression SEMICOLON legal','legal',3,'p_legal','ka.py',221),
  ('legal -> assign SEMICOLON legal','legal',3,'p_legal','ka.py',222),
  ('legal -> print SEMICOLON legal','legal',3,'p_legal','ka.py',223),
  ('legal -> input SEMICOLON legal','legal',3,'p_legal','ka.py',224),
  ('legal -> return SEMICOLON legal','legal',3,'p_legal','ka.py',225),
  ('legal -> if_statement legal','legal',2,'p_legal','ka.py',226),
  ('legal -> if_else_statement legal','legal',2,'p_legal','ka.py',227),
  ('legal -> while_statement legal','legal',2,'p_legal','ka.py',228),
  ('legal -> for_statement legal','legal',2,'p_legal','ka.py',229),
  ('legal -> comment legal','legal',2,'p_legal','ka.py',230),
  ('legal -> empty','legal',1,'p_legal','ka.py',231),
  ('comment -> COMMENT','comment',1,'p_comment','ka.py',245),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',252),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',253),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',254),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',255),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',256),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',257),
  ('assign -> INTTYPE IDENTIFIER','assign',2,'p_assign','ka.py',258),
  ('assign -> FLOATTYPE IDENTIFIER','assign',2,'p_assign','ka.py',259),
  ('assign -> CHARTYPE IDENTIFIER','assign',2,'p_assign','ka.py',260),
  ('assign -> STRINGTYPE IDENTIFIER','assign',2,'p_assign','ka.py',261),
  ('assign -> IDENTIFIER EQUAL expression','assign',3,'p_assign','ka.py',262),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',276),
  ('print -> PRINT LPAREN STRING RPAREN','print',4,'p_print','ka.py',277),
  ('input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN','input',5,'p_input','ka.py',284),
  ('return -> RETURN expression','return',2,'p_return','ka.py',291),
  ('return -> RETURN INT','return',2,'p_return','ka.py',292),
  ('return -> RETURN IDENTIFIER','return',2,'p_return','ka.py',293),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',300),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',301),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',302),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',303),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',304),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_binary','ka.py',305),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',325),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',326),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',327),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',328),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',329),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',330),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',350),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',358),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',359),
  ('expression -> INT','expression',1,'p_int_float','ka.py',370),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',371),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',378),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',379),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE','if_statement',7,'p_expression_if','ka.py',386),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE','if_else_statement',11,'p_expression_if_else','ka.py',393),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',394),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',395),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE','while_statement',7,'p_while_statement','ka.py',410),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE','for_statement',11,'p_for_statement','ka.py',417),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',424),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',425),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',426),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',427),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',7,'p_function_statement','ka.py',434),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',8,'p_function_statement','ka.py',435),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',445),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',446),
  ('function_input -> empty','function_input',1,'p_function_input','ka.py',447),
  ('expression -> IDENTIFIER LPAREN function_call_input RPAREN','expression',4,'p_function_call','ka.py',457),
  ('function_call_input -> IDENTIFIER COMMA IDENTIFIER','function_call_input',3,'p_function__call_input','ka.py',464),
  ('function_call_input -> IDENTIFIER COMMA expression','function_call_input',3,'p_function__call_input','ka.py',465),
  ('function_call_input -> expression COMMA IDENTIFIER','function_call_input',3,'p_function__call_input','ka.py',466),
  ('function_call_input -> expression COMMA expression','function_call_input',3,'p_function__call_input','ka.py',467),
  ('function_call_input -> IDENTIFIER','function_call_input',1,'p_function__call_input','ka.py',468),
  ('function_call_input -> expression','function_call_input',1,'p_function__call_input','ka.py',469),
  ('function_call_input -> empty','function_call_input',1,'p_function__call_input','ka.py',470),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',480),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',487),
]
