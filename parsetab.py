
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALCOMPNOTEQUALGREATER_THAN_EQUALLESS_THAN_EQUALGREATER_THANLESS_THANleftADDSUBTRACTleftEXPMULTIPLYDIVIDEADD AND BREAK CHAR CHARTYPE COMMA COMMENT CONTINUE DIVIDE ELSE EQUAL EQUALCOMP EXP FLOAT FLOATTYPE FOR GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER IF INPUT INT INTTYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN MULTIPLY NOT NOTEQUAL OR PRINT RBRACE RETURN RPAREN SEMICOLON STRING STRINGTYPE SUBTRACT VOID WHILE\n    ka : expression SEMICOLON ka\n       | assign SEMICOLON ka\n       | print SEMICOLON ka\n       | input SEMICOLON ka\n       | if_statement ka\n       | if_else_statement ka\n       | while_statement ka\n       | for_statement ka\n       | function_statement ka\n       | comment ka\n       | empty\n    \n    legal : expression SEMICOLON legal\n       | assign SEMICOLON legal\n       | print SEMICOLON legal\n       | input SEMICOLON legal\n       | return SEMICOLON legal\n       | if_statement legal\n       | if_else_statement legal\n       | while_statement legal\n       | for_statement legal\n       | empty\n    \n    comment : COMMENT\n    \n    assign : INTTYPE IDENTIFIER EQUAL INT\n           | INTTYPE IDENTIFIER EQUAL expression\n           | FLOATTYPE IDENTIFIER EQUAL expression\n           | CHARTYPE IDENTIFIER EQUAL CHAR\n           | FLOATTYPE IDENTIFIER EQUAL FLOAT\n           | STRINGTYPE IDENTIFIER EQUAL STRING\n           | INTTYPE IDENTIFIER\n           | FLOATTYPE IDENTIFIER\n           | CHARTYPE IDENTIFIER\n           | STRINGTYPE IDENTIFIER\n    \n  print : PRINT LPAREN expression RPAREN\n  \n  input : IDENTIFIER EQUAL INPUT LPAREN RPAREN\n  \n  return : RETURN expression\n         | RETURN IDENTIFIER\n  \n    expression : expression ADD expression\n               | expression SUBTRACT expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EXP expression\n    \n    expression : expression EQUALCOMP expression\n               | expression GREATER_THAN_EQUAL expression\n               | expression LESS_THAN_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression NOTEQUAL expression\n    \n    expression : NOT expression\n    \n    expression : expression AND expression\n               | expression OR expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : CONTINUE\n               | BREAK\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    if_else_statement : IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement\n                      | IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement\n    \n    while_statement : WHILE LPAREN expression RPAREN LBRACE legal RBRACE\n    \n    for_statement : FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE\n    \n    type_identifier : INTTYPE IDENTIFIER\n                    | CHARTYPE IDENTIFIER\n                    | FLOATTYPE IDENTIFIER\n                    | STRINGTYPE IDENTIFIER\n    \n    function_statement : type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE\n                       | VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE\n    \n    function_input : type_identifier COMMA function_input\n                   | type_identifier\n                   | empty\n    \n    expression : IDENTIFIER\n    \n    empty :\n    '
    
_lr_action_items = {'NOT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[13,13,13,13,13,13,13,13,-22,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-55,13,13,13,13,-59,-65,-66,13,-57,-58,13,13,-56,-60,13,-55,]),'INT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[14,14,14,14,14,14,14,14,-22,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,105,14,14,14,14,14,14,14,14,14,14,14,14,-55,14,14,14,14,-59,-65,-66,14,-57,-58,14,14,-56,-60,14,-55,]),'FLOAT':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[15,15,15,15,15,15,15,15,-22,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,108,15,15,15,15,15,15,15,15,15,15,15,-55,15,15,15,15,-59,-65,-66,15,-57,-58,15,15,-56,-60,15,-55,]),'CONTINUE':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[16,16,16,16,16,16,16,16,-22,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-55,16,16,16,16,-59,-65,-66,16,-57,-58,16,16,-56,-60,16,-55,]),'BREAK':([0,6,7,8,9,10,11,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[17,17,17,17,17,17,17,17,-22,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-55,17,17,17,17,-59,-65,-66,17,-57,-58,17,17,-56,-60,17,-55,]),'IDENTIFIER':([0,6,7,8,9,10,11,13,19,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,92,93,94,95,99,100,101,102,114,127,128,131,135,136,141,142,144,148,149,150,153,154,155,156,161,163,172,174,175,176,177,178,182,183,185,187,],[18,18,18,18,18,18,18,54,56,57,58,59,65,-22,18,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,18,54,54,54,54,54,115,116,117,118,121,122,123,124,54,18,18,18,18,18,18,18,160,18,18,-55,18,18,18,18,-59,-65,-66,18,-57,-58,18,54,-56,-60,18,-55,]),'INTTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,103,119,127,128,131,135,136,141,142,146,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[19,19,19,19,19,19,19,-22,19,19,19,19,92,99,99,99,92,92,92,92,92,92,92,92,92,92,-55,92,92,92,92,-59,-65,-66,92,-57,-58,92,-56,-60,92,-55,]),'FLOATTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,103,119,127,128,131,135,136,141,142,146,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[20,20,20,20,20,20,20,-22,20,20,20,20,93,101,101,101,93,93,93,93,93,93,93,93,93,93,-55,93,93,93,93,-59,-65,-66,93,-57,-58,93,-56,-60,93,-55,]),'CHARTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,103,119,127,128,131,135,136,141,142,146,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[21,21,21,21,21,21,21,-22,21,21,21,21,94,100,100,100,94,94,94,94,94,94,94,94,94,94,-55,94,94,94,94,-59,-65,-66,94,-57,-58,94,-56,-60,94,-55,]),'STRINGTYPE':([0,6,7,8,9,10,11,29,30,44,45,46,63,64,103,119,127,128,131,135,136,141,142,146,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[22,22,22,22,22,22,22,-22,22,22,22,22,95,102,102,102,95,95,95,95,95,95,95,95,95,95,-55,95,95,95,95,-59,-65,-66,95,-57,-58,95,-56,-60,95,-55,]),'PRINT':([0,6,7,8,9,10,11,29,30,44,45,46,127,128,131,135,136,141,142,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[23,23,23,23,23,23,23,-22,23,23,23,23,23,23,23,23,23,23,23,23,23,-55,23,23,23,23,-59,-65,-66,23,-57,-58,23,-56,-60,23,-55,]),'IF':([0,6,7,8,9,10,11,29,30,44,45,46,127,128,131,135,136,141,142,148,149,150,153,154,155,156,161,163,166,172,174,175,176,177,182,183,185,187,],[24,24,24,24,24,24,24,-22,24,24,24,24,24,24,24,24,24,24,24,24,24,-55,24,24,24,24,-59,-65,173,-66,24,-57,-58,24,-56,-60,24,-55,]),'WHILE':([0,6,7,8,9,10,11,29,30,44,45,46,127,128,131,135,136,141,142,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[25,25,25,25,25,25,25,-22,25,25,25,25,25,25,25,25,25,25,25,25,25,-55,25,25,25,25,-59,-65,-66,25,-57,-58,25,-56,-60,25,-55,]),'FOR':([0,6,7,8,9,10,11,29,30,44,45,46,127,128,131,135,136,141,142,148,149,150,153,154,155,156,161,163,172,174,175,176,177,182,183,185,187,],[26,26,26,26,26,26,26,-22,26,26,26,26,26,26,26,26,26,26,26,26,26,-55,26,26,26,26,-59,-65,-66,26,-57,-58,26,-56,-60,26,-55,]),'VOID':([0,6,7,8,9,10,11,29,30,44,45,46,150,161,163,172,175,176,182,183,187,],[28,28,28,28,28,28,28,-22,28,28,28,28,-55,-59,-65,-66,-57,-58,-56,-60,-55,]),'COMMENT':([0,6,7,8,9,10,11,29,30,44,45,46,150,161,163,172,175,176,182,183,187,],[29,29,29,29,29,29,29,-22,29,29,29,29,-55,-59,-65,-66,-57,-58,-56,-60,-55,]),'$end':([0,1,6,7,8,9,10,11,12,29,30,44,45,46,47,48,49,50,51,52,66,80,81,82,150,161,163,172,175,176,182,183,187,],[-71,0,-71,-71,-71,-71,-71,-71,-11,-22,-71,-71,-71,-71,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-55,-59,-65,-66,-57,-58,-56,-60,-55,]),'SEMICOLON':([2,3,4,5,14,15,16,17,18,53,54,56,57,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,91,105,106,107,108,109,110,111,115,116,117,118,126,129,133,137,138,139,140,159,160,],[30,44,45,46,-51,-52,-53,-54,-70,-48,-70,-29,-30,-31,-32,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,114,-23,-24,-25,-27,-26,-28,-33,-29,-30,-31,-32,-34,146,149,153,154,155,156,-35,-36,]),'ADD':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[31,-51,-52,-53,-54,-70,31,-70,-37,-38,-39,-40,-41,31,31,31,31,31,31,31,31,31,31,31,-51,31,31,-52,31,31,31,-70,31,]),'SUBTRACT':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[32,-51,-52,-53,-54,-70,32,-70,-37,-38,-39,-40,-41,32,32,32,32,32,32,32,32,32,32,32,-51,32,32,-52,32,32,32,-70,32,]),'MULTIPLY':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[33,-51,-52,-53,-54,-70,33,-70,33,33,-39,-40,-41,33,33,33,33,33,33,33,33,33,33,33,-51,33,33,-52,33,33,33,-70,33,]),'DIVIDE':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[34,-51,-52,-53,-54,-70,34,-70,34,34,-39,-40,-41,34,34,34,34,34,34,34,34,34,34,34,-51,34,34,-52,34,34,34,-70,34,]),'EXP':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[35,-51,-52,-53,-54,-70,35,-70,35,35,-39,-40,-41,35,35,35,35,35,35,35,35,35,35,35,-51,35,35,-52,35,35,35,-70,35,]),'EQUALCOMP':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[36,-51,-52,-53,-54,-70,36,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,36,36,36,36,36,-51,36,36,-52,36,36,36,-70,36,]),'GREATER_THAN_EQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[37,-51,-52,-53,-54,-70,37,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,37,37,37,37,37,-51,37,37,-52,37,37,37,-70,37,]),'LESS_THAN_EQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[38,-51,-52,-53,-54,-70,38,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,38,38,38,38,38,-51,38,38,-52,38,38,38,-70,38,]),'GREATER_THAN':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[39,-51,-52,-53,-54,-70,39,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,39,39,39,39,39,-51,39,39,-52,39,39,39,-70,39,]),'LESS_THAN':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[40,-51,-52,-53,-54,-70,40,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,40,40,40,40,40,-51,40,40,-52,40,40,40,-70,40,]),'NOTEQUAL':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[41,-51,-52,-53,-54,-70,41,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,41,41,41,41,41,-51,41,41,-52,41,41,41,-70,41,]),'AND':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[42,-51,-52,-53,-54,-70,42,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,42,42,42,42,42,-51,42,42,-52,42,42,42,-70,42,]),'OR':([2,14,15,16,17,18,53,54,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,105,106,107,108,129,133,159,160,181,],[43,-51,-52,-53,-54,-70,43,-70,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,43,43,43,43,43,-51,43,43,-52,43,43,43,-70,43,]),'RPAREN':([14,15,16,17,53,54,64,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89,90,96,97,98,103,104,105,106,107,108,109,110,115,116,117,118,119,121,122,123,124,125,130,162,181,],[-51,-52,-53,-54,-48,-70,-71,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,111,112,113,-68,120,-69,-71,126,-23,-24,-25,-27,-26,-28,-29,-30,-31,-32,-71,-61,-62,-63,-64,132,-67,171,184,]),'EQUAL':([18,56,57,58,59,115,116,117,118,],[55,84,85,86,87,84,85,86,87,]),'LPAREN':([23,24,25,26,27,56,57,58,59,65,83,173,],[60,61,62,63,64,-61,-63,-62,-64,103,104,178,]),'INPUT':([55,],[83,]),'CHAR':([86,],[109,]),'STRING':([87,],[110,]),'COMMA':([96,121,122,123,124,],[119,-61,-62,-63,-64,]),'LBRACE':([112,113,120,132,166,171,184,],[127,128,131,148,174,177,185,]),'RETURN':([127,128,131,135,136,141,142,148,149,150,153,154,155,156,161,174,175,176,177,182,183,185,187,],[144,144,144,144,144,144,144,144,144,-55,144,144,144,144,-59,144,-57,-58,144,-56,-60,144,-55,]),'RBRACE':([127,128,131,134,135,136,141,142,143,145,147,148,149,150,151,152,153,154,155,156,157,158,161,164,165,167,168,169,170,174,175,176,177,179,180,182,183,185,186,187,],[-71,-71,-71,150,-71,-71,-71,-71,-21,161,163,-71,-71,-55,-18,-17,-71,-71,-71,-71,-19,-20,-59,172,-12,-13,-14,-15,-16,-71,-57,-58,-71,182,183,-56,-60,-71,187,-55,]),'ELSE':([150,187,],[166,166,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ka':([0,6,7,8,9,10,11,30,44,45,46,],[1,47,48,49,50,51,52,66,80,81,82,]),'expression':([0,6,7,8,9,10,11,13,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,61,62,84,85,114,127,128,131,135,136,141,142,144,148,149,153,154,155,156,174,177,178,185,],[2,2,2,2,2,2,2,53,2,67,68,69,70,71,72,73,74,75,76,77,78,79,2,2,2,88,89,90,106,107,129,133,133,133,133,133,133,133,159,133,133,133,133,133,133,133,133,181,133,]),'assign':([0,6,7,8,9,10,11,30,44,45,46,63,127,128,131,135,136,141,142,146,148,149,153,154,155,156,174,177,185,],[3,3,3,3,3,3,3,3,3,3,3,91,137,137,137,137,137,137,137,162,137,137,137,137,137,137,137,137,137,]),'print':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[4,4,4,4,4,4,4,4,4,4,4,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'input':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[5,5,5,5,5,5,5,5,5,5,5,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'if_statement':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,166,174,177,185,],[6,6,6,6,6,6,6,6,6,6,6,136,136,136,136,136,136,136,136,136,136,136,136,136,176,136,136,136,]),'if_else_statement':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,166,174,177,185,],[7,7,7,7,7,7,7,7,7,7,7,135,135,135,135,135,135,135,135,135,135,135,135,135,175,135,135,135,]),'while_statement':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[8,8,8,8,8,8,8,8,8,8,8,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'for_statement':([0,6,7,8,9,10,11,30,44,45,46,127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[9,9,9,9,9,9,9,9,9,9,9,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'function_statement':([0,6,7,8,9,10,11,30,44,45,46,],[10,10,10,10,10,10,10,10,10,10,10,]),'comment':([0,6,7,8,9,10,11,30,44,45,46,],[11,11,11,11,11,11,11,11,11,11,11,]),'empty':([0,6,7,8,9,10,11,30,44,45,46,64,103,119,127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[12,12,12,12,12,12,12,12,12,12,12,98,98,98,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'type_identifier':([0,6,7,8,9,10,11,30,44,45,46,64,103,119,],[27,27,27,27,27,27,27,27,27,27,27,96,96,96,]),'function_input':([64,103,119,],[97,125,130,]),'legal':([127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[134,145,147,151,152,157,158,164,165,167,168,169,170,179,180,186,]),'return':([127,128,131,135,136,141,142,148,149,153,154,155,156,174,177,185,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ka","S'",1,None,None,None),
  ('ka -> expression SEMICOLON ka','ka',3,'p_ka','ka.py',192),
  ('ka -> assign SEMICOLON ka','ka',3,'p_ka','ka.py',193),
  ('ka -> print SEMICOLON ka','ka',3,'p_ka','ka.py',194),
  ('ka -> input SEMICOLON ka','ka',3,'p_ka','ka.py',195),
  ('ka -> if_statement ka','ka',2,'p_ka','ka.py',196),
  ('ka -> if_else_statement ka','ka',2,'p_ka','ka.py',197),
  ('ka -> while_statement ka','ka',2,'p_ka','ka.py',198),
  ('ka -> for_statement ka','ka',2,'p_ka','ka.py',199),
  ('ka -> function_statement ka','ka',2,'p_ka','ka.py',200),
  ('ka -> comment ka','ka',2,'p_ka','ka.py',201),
  ('ka -> empty','ka',1,'p_ka','ka.py',202),
  ('legal -> expression SEMICOLON legal','legal',3,'p_legal','ka.py',212),
  ('legal -> assign SEMICOLON legal','legal',3,'p_legal','ka.py',213),
  ('legal -> print SEMICOLON legal','legal',3,'p_legal','ka.py',214),
  ('legal -> input SEMICOLON legal','legal',3,'p_legal','ka.py',215),
  ('legal -> return SEMICOLON legal','legal',3,'p_legal','ka.py',216),
  ('legal -> if_statement legal','legal',2,'p_legal','ka.py',217),
  ('legal -> if_else_statement legal','legal',2,'p_legal','ka.py',218),
  ('legal -> while_statement legal','legal',2,'p_legal','ka.py',219),
  ('legal -> for_statement legal','legal',2,'p_legal','ka.py',220),
  ('legal -> empty','legal',1,'p_legal','ka.py',221),
  ('comment -> COMMENT','comment',1,'p_comment','ka.py',235),
  ('assign -> INTTYPE IDENTIFIER EQUAL INT','assign',4,'p_assign','ka.py',242),
  ('assign -> INTTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',243),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL expression','assign',4,'p_assign','ka.py',244),
  ('assign -> CHARTYPE IDENTIFIER EQUAL CHAR','assign',4,'p_assign','ka.py',245),
  ('assign -> FLOATTYPE IDENTIFIER EQUAL FLOAT','assign',4,'p_assign','ka.py',246),
  ('assign -> STRINGTYPE IDENTIFIER EQUAL STRING','assign',4,'p_assign','ka.py',247),
  ('assign -> INTTYPE IDENTIFIER','assign',2,'p_assign','ka.py',248),
  ('assign -> FLOATTYPE IDENTIFIER','assign',2,'p_assign','ka.py',249),
  ('assign -> CHARTYPE IDENTIFIER','assign',2,'p_assign','ka.py',250),
  ('assign -> STRINGTYPE IDENTIFIER','assign',2,'p_assign','ka.py',251),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','ka.py',258),
  ('input -> IDENTIFIER EQUAL INPUT LPAREN RPAREN','input',5,'p_input','ka.py',265),
  ('return -> RETURN expression','return',2,'p_return','ka.py',272),
  ('return -> RETURN IDENTIFIER','return',2,'p_return','ka.py',273),
  ('expression -> expression ADD expression','expression',3,'p_expression_binary','ka.py',280),
  ('expression -> expression SUBTRACT expression','expression',3,'p_expression_binary','ka.py',281),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary','ka.py',282),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ka.py',283),
  ('expression -> expression EXP expression','expression',3,'p_expression_binary','ka.py',284),
  ('expression -> expression EQUALCOMP expression','expression',3,'p_expression_binary_compare','ka.py',302),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',303),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression_binary_compare','ka.py',304),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binary_compare','ka.py',305),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binary_compare','ka.py',306),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binary_compare','ka.py',307),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ka.py',327),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','ka.py',335),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','ka.py',336),
  ('expression -> INT','expression',1,'p_int_float','ka.py',347),
  ('expression -> FLOAT','expression',1,'p_int_float','ka.py',348),
  ('expression -> CONTINUE','expression',1,'p_continue_break','ka.py',355),
  ('expression -> BREAK','expression',1,'p_continue_break','ka.py',356),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE','if_statement',7,'p_expression_if','ka.py',363),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE LBRACE legal RBRACE','if_else_statement',11,'p_expression_if_else','ka.py',370),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_else_statement','if_else_statement',9,'p_expression_if_else','ka.py',371),
  ('if_else_statement -> IF LPAREN expression RPAREN LBRACE legal RBRACE ELSE if_statement','if_else_statement',9,'p_expression_if_else','ka.py',372),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE legal RBRACE','while_statement',7,'p_while_statement','ka.py',387),
  ('for_statement -> FOR LPAREN assign SEMICOLON expression SEMICOLON assign RPAREN LBRACE legal RBRACE','for_statement',11,'p_for_statement','ka.py',394),
  ('type_identifier -> INTTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',401),
  ('type_identifier -> CHARTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',402),
  ('type_identifier -> FLOATTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',403),
  ('type_identifier -> STRINGTYPE IDENTIFIER','type_identifier',2,'p_types','ka.py',404),
  ('function_statement -> type_identifier LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',7,'p_function','ka.py',411),
  ('function_statement -> VOID IDENTIFIER LPAREN function_input RPAREN LBRACE legal RBRACE','function_statement',8,'p_function','ka.py',412),
  ('function_input -> type_identifier COMMA function_input','function_input',3,'p_function_input','ka.py',422),
  ('function_input -> type_identifier','function_input',1,'p_function_input','ka.py',423),
  ('function_input -> empty','function_input',1,'p_function_input','ka.py',424),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','ka.py',434),
  ('empty -> <empty>','empty',0,'p_empty','ka.py',441),
]
